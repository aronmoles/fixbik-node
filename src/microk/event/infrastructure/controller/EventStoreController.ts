import Controller from '../../../core/domain/http/Controller';
import { ControllerResponse } from '../../../core/domain/http/ControllerResponse';
import { ControllerConfig } from '../../../core/domain/http/ControllerConfig';
import { HttpMethod } from '../../../common/http/HttpMethod';
import DomainEventDto from './DomainEventDto';
import { Req } from '../../../core/domain/http/Req';
import Response from '../../../core/domain/http/Response';
import EventStore from '../../domain/EventStore';
import Inject from '../../../core/infrastructure/di/Inject.decorator';
import { Keys } from '../../../../modules/shared/infrastructure/di/Keys';
import { Criteria } from '../../../common/criteria/Criteria';
import { Order } from '../../../common/criteria/Order';
import { Filters } from '../../../common/criteria/Filters';

/**
 * @openapi
 * /event-store:
 *   get:
 *     operationId: eventStore
 *     tags:
 *       - Event Store
 *     summary: Retrieve events generated by app.
 *     description: ''
 *     responses:
 *       200:
 *         description: "Return events stored in the app."
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   $ref: '#/components/schemas/DomainEventDto'
 *       default:
 *         description: "Error"
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ResponseError'
 */
export default class EventStoreController implements Controller<DomainEventDto[]> {
    private static LIMIT_PER_PAGE = 50;

    constructor(
        @Inject(Keys.CQRS.EventStore) private readonly eventStore: EventStore,
    ) {
    }

    config(): ControllerConfig {
        return {
            method: HttpMethod.GET,
            path: '/event-store',
        };
    }

    async run(req: Req): Promise<ControllerResponse<DomainEventDto[]>> {
        const page = Number(req.query.page ?? 0);

        const criteria = new Criteria(
            Filters.none(),
            Order.asc('occurredOn'),
            EventStoreController.LIMIT_PER_PAGE,
            EventStoreController.LIMIT_PER_PAGE * page,
        )
        const domainEvents = await this.eventStore.searchByCriteria(criteria)
        const countAll = await this.eventStore.countAll()

        return Response.success(
            domainEvents.map((domainEvent) => domainEvent.toPrimitive() as unknown as DomainEventDto),
            {
                current: page,
                totalPages: Math.ceil(countAll / EventStoreController.LIMIT_PER_PAGE),
                totalElements: countAll,
            },
        )
    }
}
