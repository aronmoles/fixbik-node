14524181bec752559baeb1f931a71365
"use strict";

/* istanbul ignore next */
function cov_1p4febhb40() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/core/infrastructure/di/Inject.decorator.ts";
  var hash = "1b69b72637c2ab27d3f5e589409e376f20dd4bf7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/core/infrastructure/di/Inject.decorator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 4,
          column: 30
        },
        end: {
          line: 4,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 14,
          column: 6
        }
      },
      "4": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 85
        }
      },
      "5": {
        start: {
          line: 8,
          column: 34
        },
        end: {
          line: 8,
          column: 109
        }
      },
      "6": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 12,
          column: 11
        }
      },
      "7": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 100
        }
      },
      "8": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "Inject",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 15
          }
        },
        loc: {
          start: {
            line: 5,
            column: 28
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 12
          }
        },
        loc: {
          start: {
            line: 6,
            column: 58
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 6
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 34
          },
          end: {
            line: 8,
            column: 109
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 34
          },
          end: {
            line: 8,
            column: 103
          }
        }, {
          start: {
            line: 8,
            column: 107
          },
          end: {
            line: 8,
            column: 109
          }
        }],
        line: 8
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1b69b72637c2ab27d3f5e589409e376f20dd4bf7"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1p4febhb40 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1p4febhb40();
cov_1p4febhb40().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1p4febhb40().s[1]++;

require("reflect-metadata");

const DependencyContainer_1 =
/* istanbul ignore next */
(cov_1p4febhb40().s[2]++, require("./DependencyContainer"));

function Inject(serviceKey) {
  /* istanbul ignore next */
  cov_1p4febhb40().f[0]++;
  cov_1p4febhb40().s[3]++;
  return function (target, propertyKey, parameterIndex) {
    /* istanbul ignore next */
    cov_1p4febhb40().f[1]++;
    const metadataKey =
    /* istanbul ignore next */
    (cov_1p4febhb40().s[4]++, `${target.prototype.constructor.name}:constructor-params`);
    const constructorParams =
    /* istanbul ignore next */
    (cov_1p4febhb40().s[5]++,
    /* istanbul ignore next */
    (cov_1p4febhb40().b[0][0]++, Reflect.getMetadata(metadataKey, DependencyContainer_1.INJECT_TARGET)) ||
    /* istanbul ignore next */
    (cov_1p4febhb40().b[0][1]++, []));

    /* istanbul ignore next */
    cov_1p4febhb40().s[6]++;
    constructorParams.push({
      index: parameterIndex,
      serviceKey
    });

    /* istanbul ignore next */
    cov_1p4febhb40().s[7]++;
    Reflect.defineMetadata(metadataKey, constructorParams, DependencyContainer_1.INJECT_TARGET);
  };
}

/* istanbul ignore next */
cov_1p4febhb40().s[8]++;
exports.default = Inject;