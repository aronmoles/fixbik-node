bc4851f55a953ee8f20a001ee620b352
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const InfoQueryHandler_1 = __importDefault(require("../../../../src/modules/info/application/info/InfoQueryHandler"));
const InfoService_1 = __importDefault(require("../../../../src/modules/info/application/info/InfoService"));
const EventBusMock_1 = __importDefault(require("../../shared/__mocks__/EventBusMock"));
const InfoQueryMother_1 = __importDefault(require("../domain/InfoQueryMother"));
let handler;
let eventBus;
beforeEach(() => {
    eventBus = new EventBusMock_1.default();
    const creator = new InfoService_1.default(eventBus);
    handler = new InfoQueryHandler_1.default(creator);
});
describe('InfoRequest', () => {
    it('should retrieve a info of app', () => __awaiter(void 0, void 0, void 0, function* () {
        const query = InfoQueryMother_1.default.random();
        yield handler.handle(query);
        eventBus.hasBeenPublishedEvent();
    }));
});
