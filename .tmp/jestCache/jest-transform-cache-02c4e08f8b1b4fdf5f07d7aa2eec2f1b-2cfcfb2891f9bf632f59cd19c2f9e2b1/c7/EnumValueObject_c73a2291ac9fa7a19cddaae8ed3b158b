0324a42b4532d0a4964fff287907947f
"use strict";

/* istanbul ignore next */
function cov_25t2souy0b() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/value-object/EnumValueObject.ts";
  var hash = "4ffc297bfb3ab4968869dce7357320c6fc7ec10b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/value-object/EnumValueObject.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 5,
          column: 8
        },
        end: {
          line: 5,
          column: 39
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 6,
          column: 28
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 38
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "5": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "6": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 27
        }
      },
      "7": {
        start: {
          line: 18,
          column: 0
        },
        end: {
          line: 18,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 4,
            column: 5
          }
        },
        loc: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 29
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4ffc297bfb3ab4968869dce7357320c6fc7ec10b"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25t2souy0b = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_25t2souy0b();
cov_25t2souy0b().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

class EnumValueObject {
  constructor(value, validValues) {
    /* istanbul ignore next */
    cov_25t2souy0b().f[0]++;
    cov_25t2souy0b().s[1]++;
    this.validValues = validValues;

    /* istanbul ignore next */
    cov_25t2souy0b().s[2]++;
    this._value = value;

    /* istanbul ignore next */
    cov_25t2souy0b().s[3]++;
    this.checkValueIsValid(value);
  }

  checkValueIsValid(value) {
    /* istanbul ignore next */
    cov_25t2souy0b().f[1]++;
    cov_25t2souy0b().s[4]++;

    if (!this.validValues.includes(value)) {
      /* istanbul ignore next */
      cov_25t2souy0b().b[0][0]++;
      cov_25t2souy0b().s[5]++;
      this.throwErrorForInvalidValue(value);
    } else
    /* istanbul ignore next */
    {
      cov_25t2souy0b().b[0][1]++;
    }
  }

  value() {
    /* istanbul ignore next */
    cov_25t2souy0b().f[2]++;
    cov_25t2souy0b().s[6]++;
    return this._value;
  }

}

/* istanbul ignore next */
cov_25t2souy0b().s[7]++;
exports.default = EnumValueObject;