c57b6e1b05adc3fd3da5325f4d9e654b
"use strict";

/* istanbul ignore next */
function cov_usb1x5hm5() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/modules/auth/infrastructure/persistence/typeorm/AuthUser.Entity.ts";
  var hash = "ff7ab39c4440d5b4b75d0da68ae5716ceab69153";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/modules/auth/infrastructure/persistence/typeorm/AuthUser.Entity.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 32
        }
      },
      "4": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 36
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "6": {
        start: {
          line: 9,
          column: 24
        },
        end: {
          line: 9,
          column: 81
        }
      },
      "7": {
        start: {
          line: 10,
          column: 21
        },
        end: {
          line: 10,
          column: 75
        }
      },
      "8": {
        start: {
          line: 11,
          column: 27
        },
        end: {
          line: 11,
          column: 87
        }
      },
      "9": {
        start: {
          line: 12,
          column: 39
        },
        end: {
          line: 12,
          column: 111
        }
      },
      "10": {
        start: {
          line: 13,
          column: 33
        },
        end: {
          line: 13,
          column: 123
        }
      },
      "11": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 38,
          column: 3
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ff7ab39c4440d5b4b75d0da68ae5716ceab69153"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_usb1x5hm5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_usb1x5hm5();

var __importDefault =
/* istanbul ignore next */
(cov_usb1x5hm5().s[0]++,
/* istanbul ignore next */
(cov_usb1x5hm5().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_usb1x5hm5().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_usb1x5hm5().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_usb1x5hm5().f[0]++;
  cov_usb1x5hm5().s[1]++;
  return (
    /* istanbul ignore next */
    (cov_usb1x5hm5().b[2][0]++, mod) &&
    /* istanbul ignore next */
    (cov_usb1x5hm5().b[2][1]++, mod.__esModule) ?
    /* istanbul ignore next */
    (cov_usb1x5hm5().b[1][0]++, mod) :
    /* istanbul ignore next */
    (cov_usb1x5hm5().b[1][1]++, {
      "default": mod
    })
  );
}));

/* istanbul ignore next */
cov_usb1x5hm5().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_usb1x5hm5().s[3]++;
exports.AuthUserEntity = void 0;
const typeorm_1 =
/* istanbul ignore next */
(cov_usb1x5hm5().s[4]++, require("typeorm"));
const AuthUser_1 =
/* istanbul ignore next */
(cov_usb1x5hm5().s[5]++, require("../../../domain/AuthUser"));
const AuthUserEmail_1 =
/* istanbul ignore next */
(cov_usb1x5hm5().s[6]++, __importDefault(require("../../../domain/AuthUserEmail")));
const AuthUserId_1 =
/* istanbul ignore next */
(cov_usb1x5hm5().s[7]++, __importDefault(require("../../../domain/AuthUserId")));
const AuthUserPassword_1 =
/* istanbul ignore next */
(cov_usb1x5hm5().s[8]++, __importDefault(require("../../../domain/AuthUserPassword")));
const AuthUserRecoverPasswordToken_1 =
/* istanbul ignore next */
(cov_usb1x5hm5().s[9]++, __importDefault(require("../../../domain/AuthUserRecoverPasswordToken")));
const ValueObjectTransformer_1 =
/* istanbul ignore next */
(cov_usb1x5hm5().s[10]++, require("../../../../../microk/persistence/infrastructure/typeorm/ValueObjectTransformer"));

/* istanbul ignore next */
cov_usb1x5hm5().s[11]++;
exports.AuthUserEntity = new typeorm_1.EntitySchema({
  name: 'AuthUser',
  tableName: 'auth_user',
  target: AuthUser_1.AuthUser,
  columns: {
    id: {
      type: String,
      primary: true,
      transformer: (0, ValueObjectTransformer_1.ValueObjectTransformer)(AuthUserId_1.default)
    },
    email: {
      type: String,
      transformer: (0, ValueObjectTransformer_1.ValueObjectTransformer)(AuthUserEmail_1.default)
    },
    password: {
      type: String,
      transformer: (0, ValueObjectTransformer_1.ValueObjectTransformer)(AuthUserPassword_1.default)
    },
    recoverPasswordToken: {
      type: String,
      nullable: true,
      transformer: (0, ValueObjectTransformer_1.ValueObjectTransformer)(AuthUserRecoverPasswordToken_1.default)
    }
  }
});