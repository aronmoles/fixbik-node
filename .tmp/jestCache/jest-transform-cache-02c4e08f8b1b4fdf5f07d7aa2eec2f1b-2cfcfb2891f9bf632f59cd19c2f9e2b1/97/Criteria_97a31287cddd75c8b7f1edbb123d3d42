222576e940be94b07f502c6deedb15db
"use strict";

/* istanbul ignore next */
function cov_1n2o7ufj4p() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/criteria/Criteria.ts";
  var hash = "e4a5472b1875a41021570ff16e0bedc3894b7317";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/criteria/Criteria.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 26
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 58
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 27
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 27
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 29
        }
      },
      "7": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 107
        }
      },
      "9": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 51
        }
      },
      "10": {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 22,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 47
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 17
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 18
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 58
          }
        }, {
          start: {
            line: 16,
            column: 62
          },
          end: {
            line: 16,
            column: 106
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 19,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 19,
            column: 25
          }
        }, {
          start: {
            line: 19,
            column: 29
          },
          end: {
            line: 19,
            column: 50
          }
        }],
        line: 19
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e4a5472b1875a41021570ff16e0bedc3894b7317"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1n2o7ufj4p = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1n2o7ufj4p();
cov_1n2o7ufj4p().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1n2o7ufj4p().s[1]++;
exports.Criteria = void 0;
const Utils_1 =
/* istanbul ignore next */
(cov_1n2o7ufj4p().s[2]++, require("../../core/infrastructure/Utils"));

class Criteria {
  constructor(filters, order, limit, offset) {
    /* istanbul ignore next */
    cov_1n2o7ufj4p().f[0]++;
    cov_1n2o7ufj4p().s[3]++;
    this.filters = filters;

    /* istanbul ignore next */
    cov_1n2o7ufj4p().s[4]++;
    this.order = order;

    /* istanbul ignore next */
    cov_1n2o7ufj4p().s[5]++;
    this.limit = limit;

    /* istanbul ignore next */
    cov_1n2o7ufj4p().s[6]++;
    this.offset = offset;
  }

  hasFilters() {
    /* istanbul ignore next */
    cov_1n2o7ufj4p().f[1]++;
    cov_1n2o7ufj4p().s[7]++;
    return this.filters.filters.length > 0;
  }

  hasPagination() {
    /* istanbul ignore next */
    cov_1n2o7ufj4p().f[2]++;
    cov_1n2o7ufj4p().s[8]++;
    return (
      /* istanbul ignore next */
      (cov_1n2o7ufj4p().b[0][0]++, !(0, Utils_1.isNullOrUndefined)(this.limit)) &&
      /* istanbul ignore next */
      (cov_1n2o7ufj4p().b[0][1]++, !(0, Utils_1.isNullOrUndefined)(this.offset))
    );
  }

  hasOrder() {
    /* istanbul ignore next */
    cov_1n2o7ufj4p().f[3]++;
    cov_1n2o7ufj4p().s[9]++;
    return (
      /* istanbul ignore next */
      (cov_1n2o7ufj4p().b[1][0]++, this.order) &&
      /* istanbul ignore next */
      (cov_1n2o7ufj4p().b[1][1]++, this.order.hasOrder())
    );
  }

}

/* istanbul ignore next */
cov_1n2o7ufj4p().s[10]++;
exports.Criteria = Criteria;