2223dac6a72d719b857fa5166364b613
"use strict";

/* istanbul ignore next */
function cov_z024f0nve() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/message/MessageMeta.ts";
  var hash = "45bb19c663985465a4709497318f9f8a8bc72d44";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/message/MessageMeta.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 5,
          column: 8
        },
        end: {
          line: 5,
          column: 27
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 32
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 26
        }
      },
      "4": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 30
        }
      },
      "5": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 19,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 4,
            column: 5
          }
        },
        loc: {
          start: {
            line: 4,
            column: 28
          },
          end: {
            line: 6,
            column: 5
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 4,
            column: 24
          },
          end: {
            line: 4,
            column: 26
          }
        }],
        line: 4
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "45bb19c663985465a4709497318f9f8a8bc72d44"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_z024f0nve = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_z024f0nve();
cov_z024f0nve().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

class MessageMeta {
  constructor(value =
  /* istanbul ignore next */
  (cov_z024f0nve().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_z024f0nve().f[0]++;
    cov_z024f0nve().s[1]++;
    this.value = value;
  }

  set(key, value) {
    /* istanbul ignore next */
    cov_z024f0nve().f[1]++;
    cov_z024f0nve().s[2]++;
    this.value[key] = value;
  }

  toPrimitive() {
    /* istanbul ignore next */
    cov_z024f0nve().f[2]++;
    cov_z024f0nve().s[3]++;
    return this.value;
  }

}

/* istanbul ignore next */
cov_z024f0nve().s[4]++;
exports.default = MessageMeta;

/* istanbul ignore next */
cov_z024f0nve().s[5]++;
MessageMeta.KEYS = {
  CORRELATION_ID: 'correlationId',
  REPLY_TO: 'replyTo',
  TIME: 'time'
};