1a21a3a916e5ee1ea03417ded6ec532f
"use strict";

/* istanbul ignore next */
function cov_11bg95nqhw() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/criteria/Filter.ts";
  var hash = "219bc3cd30c40ab90305b5f450f0f0ffe94c511f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/criteria/Filter.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 24
        }
      },
      "2": {
        start: {
          line: 4,
          column: 31
        },
        end: {
          line: 4,
          column: 78
        }
      },
      "3": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 46
        }
      },
      "4": {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 6,
          column: 52
        }
      },
      "5": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 27
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 27
        }
      },
      "9": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 41
        }
      },
      "10": {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 16,
          column: 47
        }
      },
      "11": {
        start: {
          line: 17,
          column: 22
        },
        end: {
          line: 17,
          column: 41
        }
      },
      "12": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "13": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 91
        }
      },
      "14": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 155
        }
      },
      "15": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 40
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 30
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 18
          }
        }, {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 18,
            column: 31
          }
        }, {
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 18,
            column: 41
          }
        }],
        line: 18
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "219bc3cd30c40ab90305b5f450f0f0ffe94c511f"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_11bg95nqhw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_11bg95nqhw();
cov_11bg95nqhw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_11bg95nqhw().s[1]++;
exports.Filter = void 0;
const InvalidArgumentError_1 =
/* istanbul ignore next */
(cov_11bg95nqhw().s[2]++, require("../value-object/InvalidArgumentError"));
const FilterField_1 =
/* istanbul ignore next */
(cov_11bg95nqhw().s[3]++, require("./FilterField"));
const FilterOperator_1 =
/* istanbul ignore next */
(cov_11bg95nqhw().s[4]++, require("./FilterOperator"));
const FilterValue_1 =
/* istanbul ignore next */
(cov_11bg95nqhw().s[5]++, require("./FilterValue"));

class Filter {
  constructor(field, operator, value) {
    /* istanbul ignore next */
    cov_11bg95nqhw().f[0]++;
    cov_11bg95nqhw().s[6]++;
    this.field = field;

    /* istanbul ignore next */
    cov_11bg95nqhw().s[7]++;
    this.operator = operator;

    /* istanbul ignore next */
    cov_11bg95nqhw().s[8]++;
    this.value = value;
  }

  static fromValues(values) {
    /* istanbul ignore next */
    cov_11bg95nqhw().f[1]++;
    const field =
    /* istanbul ignore next */
    (cov_11bg95nqhw().s[9]++, values.get('field'));
    const operator =
    /* istanbul ignore next */
    (cov_11bg95nqhw().s[10]++, values.get('operator'));
    const value =
    /* istanbul ignore next */
    (cov_11bg95nqhw().s[11]++, values.get('value'));

    /* istanbul ignore next */
    cov_11bg95nqhw().s[12]++;

    if (
    /* istanbul ignore next */
    (cov_11bg95nqhw().b[1][0]++, !field) ||
    /* istanbul ignore next */
    (cov_11bg95nqhw().b[1][1]++, !operator) ||
    /* istanbul ignore next */
    (cov_11bg95nqhw().b[1][2]++, !value)) {
      /* istanbul ignore next */
      cov_11bg95nqhw().b[0][0]++;
      cov_11bg95nqhw().s[13]++;
      throw new InvalidArgumentError_1.InvalidArgumentError('The filter is invalid');
    } else
    /* istanbul ignore next */
    {
      cov_11bg95nqhw().b[0][1]++;
    }

    cov_11bg95nqhw().s[14]++;
    return new Filter(new FilterField_1.FilterField(field), FilterOperator_1.FilterOperator.fromValue(operator), new FilterValue_1.FilterValue(value));
  }

}

/* istanbul ignore next */
cov_11bg95nqhw().s[15]++;
exports.Filter = Filter;