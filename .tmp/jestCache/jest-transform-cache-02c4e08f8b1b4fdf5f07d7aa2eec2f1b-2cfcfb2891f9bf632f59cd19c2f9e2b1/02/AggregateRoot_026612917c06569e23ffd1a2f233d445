9f382e204ccc6d4afdb14928a5db65f5
"use strict";

/* istanbul ignore next */
function cov_1xx8hrob9e() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/AggregateRoot.ts";
  var hash = "726a272ca223f3e554b6907efc52b152cc42daa1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/AggregateRoot.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 31
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 6,
          column: 31
        }
      },
      "3": {
        start: {
          line: 9,
          column: 29
        },
        end: {
          line: 9,
          column: 54
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 31
        }
      },
      "5": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "7": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 7,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 23
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 8
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "726a272ca223f3e554b6907efc52b152cc42daa1"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xx8hrob9e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1xx8hrob9e();
cov_1xx8hrob9e().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1xx8hrob9e().s[1]++;
exports.AggregateRoot = void 0;

class AggregateRoot {
  constructor() {
    /* istanbul ignore next */
    cov_1xx8hrob9e().f[0]++;
    cov_1xx8hrob9e().s[2]++;
    this.domainEvents = [];
  }

  pullDomainEvents() {
    /* istanbul ignore next */
    cov_1xx8hrob9e().f[1]++;
    const domainEvents =
    /* istanbul ignore next */
    (cov_1xx8hrob9e().s[3]++, this.domainEvents.slice());

    /* istanbul ignore next */
    cov_1xx8hrob9e().s[4]++;
    this.domainEvents = [];

    /* istanbul ignore next */
    cov_1xx8hrob9e().s[5]++;
    return domainEvents;
  }

  record(event) {
    /* istanbul ignore next */
    cov_1xx8hrob9e().f[2]++;
    cov_1xx8hrob9e().s[6]++;
    this.domainEvents.push(event);
  }

}

/* istanbul ignore next */
cov_1xx8hrob9e().s[7]++;
exports.AggregateRoot = AggregateRoot;