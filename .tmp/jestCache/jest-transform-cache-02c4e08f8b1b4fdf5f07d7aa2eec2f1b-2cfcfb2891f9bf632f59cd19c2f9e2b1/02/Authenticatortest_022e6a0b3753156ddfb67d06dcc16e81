fb69f168a46357ca82e9b0ce6672fe4a
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AuthenticateQueryHandler_1 = __importDefault(require("../../../../src/modules/auth/application/login/AuthenticateQueryHandler"));
const Authenticator_1 = __importDefault(require("../../../../src/modules/auth/application/login/Authenticator"));
const EventBusMock_1 = __importDefault(require("../../shared/__mocks__/EventBusMock"));
const AuthTokenRepositoryMock_1 = __importDefault(require("../__mocks__/AuthTokenRepositoryMock"));
const AuthUserRepositoryMock_1 = __importDefault(require("../__mocks__/AuthUserRepositoryMock"));
const AuthUserMother_1 = __importDefault(require("../domain/AuthUserMother"));
const AuthenticateQueryMother_1 = __importDefault(require("./AuthenticateQueryMother"));
const UnauthorizedHttpError_1 = __importDefault(require("../../../../src/microk/common/http/errors/UnauthorizedHttpError"));
const NotFoundHttpError_1 = __importDefault(require("../../../../src/microk/common/http/errors/NotFoundHttpError"));
let authUserRepository;
let authTokenRepository;
let eventBus;
let authenticateQueryHandler;
beforeEach(() => {
    authTokenRepository = new AuthTokenRepositoryMock_1.default();
    authUserRepository = new AuthUserRepositoryMock_1.default();
    eventBus = new EventBusMock_1.default();
    authenticateQueryHandler = new AuthenticateQueryHandler_1.default(new Authenticator_1.default(authUserRepository, authTokenRepository, eventBus));
});
describe('Authenticator', () => {
    it('should create a valid auth token', () => __awaiter(void 0, void 0, void 0, function* () {
        const query = AuthenticateQueryMother_1.default.random();
        const authUser = AuthUserMother_1.default.fromQuery(query);
        authUserRepository.mockReturn(authUser);
        const authToken = yield authenticateQueryHandler.handle(query);
        expect(authToken.toString()).toBeDefined();
        eventBus.hasBeenPublishedEvent();
    }));
    it('should throw NotFoundError if user not exists', () => __awaiter(void 0, void 0, void 0, function* () {
        const query = AuthenticateQueryMother_1.default.random();
        authUserRepository.mockReturn(null);
        yield expect(() => __awaiter(void 0, void 0, void 0, function* () {
            yield authenticateQueryHandler.handle(query);
        })).rejects.toThrow(NotFoundHttpError_1.default);
    }));
    it('should throw UnauthorizedHttpError if user credentials are invalid', () => __awaiter(void 0, void 0, void 0, function* () {
        const query = AuthenticateQueryMother_1.default.random();
        const authUser = AuthUserMother_1.default.random();
        authUserRepository.mockReturn(authUser);
        yield expect(() => __awaiter(void 0, void 0, void 0, function* () {
            yield authenticateQueryHandler.handle(query);
        })).rejects.toThrow(UnauthorizedHttpError_1.default);
    }));
});
