d824fef493d336c6262fec7c2f33729e
"use strict";

/* istanbul ignore next */
function cov_100ihokzcg() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/modules/auth/domain/AuthUserId.ts";
  var hash = "dc3944168492aa68a641f392e0c991a2297a5446";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/modules/auth/domain/AuthUserId.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 83
        }
      },
      "4": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dc3944168492aa68a641f392e0c991a2297a5446"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_100ihokzcg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_100ihokzcg();

var __importDefault =
/* istanbul ignore next */
(cov_100ihokzcg().s[0]++,
/* istanbul ignore next */
(cov_100ihokzcg().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_100ihokzcg().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_100ihokzcg().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_100ihokzcg().f[0]++;
  cov_100ihokzcg().s[1]++;
  return (
    /* istanbul ignore next */
    (cov_100ihokzcg().b[2][0]++, mod) &&
    /* istanbul ignore next */
    (cov_100ihokzcg().b[2][1]++, mod.__esModule) ?
    /* istanbul ignore next */
    (cov_100ihokzcg().b[1][0]++, mod) :
    /* istanbul ignore next */
    (cov_100ihokzcg().b[1][1]++, {
      "default": mod
    })
  );
}));

/* istanbul ignore next */
cov_100ihokzcg().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const Uuid_1 =
/* istanbul ignore next */
(cov_100ihokzcg().s[3]++, __importDefault(require("../../../microk/common/value-object/Uuid")));

class AuthUserId extends
/* istanbul ignore next */
(Uuid_1.default) {}

/* istanbul ignore next */
cov_100ihokzcg().s[4]++;
exports.default = AuthUserId;