15f396d18ac995660fcaaf8b222dc3f6
"use strict";

/* istanbul ignore next */
function cov_gl9eik2sq() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/criteria/FilterOperator.ts";
  var hash = "8a4b5524ede43d46ce97b7a1e44f8ecefbbfa1ab";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/criteria/FilterOperator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 51
        }
      },
      "4": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 85
        }
      },
      "5": {
        start: {
          line: 8,
          column: 31
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "6": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 20,
          column: 59
        }
      },
      "7": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "8": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 33
        }
      },
      "9": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 25
        }
      },
      "10": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 35
        }
      },
      "11": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 25
        }
      },
      "12": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "13": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 30
        }
      },
      "14": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "15": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "16": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 58
        }
      },
      "17": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 62
        }
      },
      "18": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 55
        }
      },
      "19": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 64
        }
      },
      "20": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 55
        }
      },
      "21": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 64
        }
      },
      "22": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 57
        }
      },
      "23": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 113
        }
      },
      "24": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 46
        }
      },
      "25": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 105
        }
      },
      "26": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 56,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 1
          },
          end: {
            line: 10,
            column: 2
          }
        },
        loc: {
          start: {
            line: 10,
            column: 21
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 23
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 49
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 37
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 52
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 14
          },
          end: {
            line: 20,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 14
          },
          end: {
            line: 20,
            column: 30
          }
        }, {
          start: {
            line: 20,
            column: 35
          },
          end: {
            line: 20,
            column: 56
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 28,
            column: 58
          }
        }, {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 30,
            column: 62
          }
        }, {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 32,
            column: 55
          }
        }, {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 34,
            column: 64
          }
        }, {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 36,
            column: 55
          }
        }, {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 38,
            column: 64
          }
        }, {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 40,
            column: 57
          }
        }, {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 46,
            column: 113
          }
        }],
        line: 26
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0, 0, 0, 0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8a4b5524ede43d46ce97b7a1e44f8ecefbbfa1ab"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gl9eik2sq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_gl9eik2sq();

var __importDefault =
/* istanbul ignore next */
(cov_gl9eik2sq().s[0]++,
/* istanbul ignore next */
(cov_gl9eik2sq().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_gl9eik2sq().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_gl9eik2sq().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_gl9eik2sq().f[0]++;
  cov_gl9eik2sq().s[1]++;
  return (
    /* istanbul ignore next */
    (cov_gl9eik2sq().b[2][0]++, mod) &&
    /* istanbul ignore next */
    (cov_gl9eik2sq().b[2][1]++, mod.__esModule) ?
    /* istanbul ignore next */
    (cov_gl9eik2sq().b[1][0]++, mod) :
    /* istanbul ignore next */
    (cov_gl9eik2sq().b[1][1]++, {
      "default": mod
    })
  );
}));

/* istanbul ignore next */
cov_gl9eik2sq().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_gl9eik2sq().s[3]++;
exports.FilterOperator = exports.Operator = void 0;
const EnumValueObject_1 =
/* istanbul ignore next */
(cov_gl9eik2sq().s[4]++, __importDefault(require("../value-object/EnumValueObject")));
const InvalidArgumentError_1 =
/* istanbul ignore next */
(cov_gl9eik2sq().s[5]++, require("../value-object/InvalidArgumentError"));
var Operator;

/* istanbul ignore next */
cov_gl9eik2sq().s[6]++;

(function (Operator) {
  /* istanbul ignore next */
  cov_gl9eik2sq().f[1]++;
  cov_gl9eik2sq().s[7]++;
  Operator["EQUAL"] = "=";

  /* istanbul ignore next */
  cov_gl9eik2sq().s[8]++;
  Operator["NOT_EQUAL"] = "!=";

  /* istanbul ignore next */
  cov_gl9eik2sq().s[9]++;
  Operator["GT"] = ">";

  /* istanbul ignore next */
  cov_gl9eik2sq().s[10]++;
  Operator["GT_OR_EQUAL"] = ">=";

  /* istanbul ignore next */
  cov_gl9eik2sq().s[11]++;
  Operator["LT"] = "<";

  /* istanbul ignore next */
  cov_gl9eik2sq().s[12]++;
  Operator["LT_OR_EQUAL"] = "<=";

  /* istanbul ignore next */
  cov_gl9eik2sq().s[13]++;
  Operator["LIKE"] = "LIKE"; // CONTAINS = 'CONTAINS',
  // NOT_CONTAINS = 'NOT_CONTAINS',
})(Operator =
/* istanbul ignore next */
(cov_gl9eik2sq().b[3][0]++, exports.Operator) ||
/* istanbul ignore next */
(cov_gl9eik2sq().b[3][1]++, exports.Operator = {}));

class FilterOperator extends
/* istanbul ignore next */
(EnumValueObject_1.default) {
  static equal() {
    /* istanbul ignore next */
    cov_gl9eik2sq().f[2]++;
    cov_gl9eik2sq().s[14]++;
    return this.fromValue(Operator.EQUAL);
  }

  static fromValue(value) {
    /* istanbul ignore next */
    cov_gl9eik2sq().f[3]++;
    cov_gl9eik2sq().s[15]++;

    switch (value) {
      case Operator.EQUAL:
        /* istanbul ignore next */
        cov_gl9eik2sq().b[4][0]++;
        cov_gl9eik2sq().s[16]++;
        return new FilterOperator(Operator.EQUAL);

      case Operator.NOT_EQUAL:
        /* istanbul ignore next */
        cov_gl9eik2sq().b[4][1]++;
        cov_gl9eik2sq().s[17]++;
        return new FilterOperator(Operator.NOT_EQUAL);

      case Operator.GT:
        /* istanbul ignore next */
        cov_gl9eik2sq().b[4][2]++;
        cov_gl9eik2sq().s[18]++;
        return new FilterOperator(Operator.GT);

      case Operator.GT_OR_EQUAL:
        /* istanbul ignore next */
        cov_gl9eik2sq().b[4][3]++;
        cov_gl9eik2sq().s[19]++;
        return new FilterOperator(Operator.GT_OR_EQUAL);

      case Operator.LT:
        /* istanbul ignore next */
        cov_gl9eik2sq().b[4][4]++;
        cov_gl9eik2sq().s[20]++;
        return new FilterOperator(Operator.LT);

      case Operator.LT_OR_EQUAL:
        /* istanbul ignore next */
        cov_gl9eik2sq().b[4][5]++;
        cov_gl9eik2sq().s[21]++;
        return new FilterOperator(Operator.LT_OR_EQUAL);

      case Operator.LIKE:
        /* istanbul ignore next */
        cov_gl9eik2sq().b[4][6]++;
        cov_gl9eik2sq().s[22]++;
        return new FilterOperator(Operator.LIKE);
      // case Operator.CONTAINS:
      //     return new FilterOperator(Operator.CONTAINS);
      // case Operator.NOT_CONTAINS:
      //     return new FilterOperator(Operator.NOT_CONTAINS);

      default:
        /* istanbul ignore next */
        cov_gl9eik2sq().b[4][7]++;
        cov_gl9eik2sq().s[23]++;
        throw new InvalidArgumentError_1.InvalidArgumentError(`The filter operator ${value} is invalid`);
    }
  }

  constructor(value) {
    /* istanbul ignore next */
    cov_gl9eik2sq().f[4]++;
    cov_gl9eik2sq().s[24]++;
    super(value, Object.values(Operator));
  }

  throwErrorForInvalidValue(value) {
    /* istanbul ignore next */
    cov_gl9eik2sq().f[5]++;
    cov_gl9eik2sq().s[25]++;
    throw new InvalidArgumentError_1.InvalidArgumentError(`The filter operator ${value} is invalid`);
  }

}

/* istanbul ignore next */
cov_gl9eik2sq().s[26]++;
exports.FilterOperator = FilterOperator;