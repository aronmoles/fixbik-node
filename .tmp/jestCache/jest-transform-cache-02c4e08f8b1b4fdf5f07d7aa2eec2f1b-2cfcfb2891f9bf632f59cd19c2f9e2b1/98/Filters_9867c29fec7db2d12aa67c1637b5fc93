cf907d0c63f49d78671f3b426f4629fb
"use strict";

/* istanbul ignore next */
function cov_mzlqcph49() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/criteria/Filters.ts";
  var hash = "7cfa84c66ff7ecadb89c872ec39c5a58fda04db2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/common/criteria/Filters.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 25
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 31
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 68
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "6": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 26
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 25
          },
          end: {
            line: 8,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 31
          },
          end: {
            line: 11,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 18
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7cfa84c66ff7ecadb89c872ec39c5a58fda04db2"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_mzlqcph49 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_mzlqcph49();
cov_mzlqcph49().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_mzlqcph49().s[1]++;
exports.Filters = void 0;
const Filter_1 =
/* istanbul ignore next */
(cov_mzlqcph49().s[2]++, require("./Filter"));

class Filters {
  constructor(filters) {
    /* istanbul ignore next */
    cov_mzlqcph49().f[0]++;
    cov_mzlqcph49().s[3]++;
    this.filters = filters;
  }

  static fromValues(filters) {
    /* istanbul ignore next */
    cov_mzlqcph49().f[1]++;
    cov_mzlqcph49().s[4]++;
    return new Filters(filters.map(Filter_1.Filter.fromValues));
  }

  static none() {
    /* istanbul ignore next */
    cov_mzlqcph49().f[2]++;
    cov_mzlqcph49().s[5]++;
    return new Filters([]);
  }

}

/* istanbul ignore next */
cov_mzlqcph49().s[6]++;
exports.Filters = Filters;