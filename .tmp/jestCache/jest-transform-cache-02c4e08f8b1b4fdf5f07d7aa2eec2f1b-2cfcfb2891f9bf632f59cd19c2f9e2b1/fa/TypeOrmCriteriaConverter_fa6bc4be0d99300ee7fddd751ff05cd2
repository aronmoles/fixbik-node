0fe006ba1ed1ef472d9b87f866e470fb
"use strict";

/* istanbul ignore next */
function cov_g13cam930() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/persistence/infrastructure/typeorm/TypeOrmCriteriaConverter.ts";
  var hash = "d563a08e292013892f6f3c42223bb5e962b3a83c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/microk/persistence/infrastructure/typeorm/TypeOrmCriteriaConverter.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 25
        },
        end: {
          line: 4,
          column: 75
        }
      },
      "3": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 7,
          column: 26
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "5": {
        start: {
          line: 9,
          column: 12
        },
        end: {
          line: 11,
          column: 14
        }
      },
      "6": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 16,
          column: 9
        }
      },
      "7": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 43
        }
      },
      "8": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 42
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "10": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 31
        }
      },
      "11": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 21,
          column: 13
        }
      },
      "12": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 87
        }
      },
      "13": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "14": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "15": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 66
        }
      },
      "16": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 86
        }
      },
      "17": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 69
        }
      },
      "18": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 76
        }
      },
      "19": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 69
        }
      },
      "20": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 76
        }
      },
      "21": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 65
        }
      },
      "22": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 44
        }
      },
      "23": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 48,
          column: 43
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 22
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 32
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 25
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 8,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 16,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 22,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "3": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 28,
            column: 66
          }
        }, {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 30,
            column: 86
          }
        }, {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 32,
            column: 69
          }
        }, {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 34,
            column: 76
          }
        }, {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 36,
            column: 69
          }
        }, {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 38,
            column: 76
          }
        }, {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 40,
            column: 65
          }
        }, {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 44,
            column: 44
          }
        }],
        line: 26
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0, 0, 0, 0, 0, 0]
    },
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d563a08e292013892f6f3c42223bb5e962b3a83c"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_g13cam930 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_g13cam930();
cov_g13cam930().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const typeorm_1 =
/* istanbul ignore next */
(cov_g13cam930().s[1]++, require("typeorm"));
const FilterOperator_1 =
/* istanbul ignore next */
(cov_g13cam930().s[2]++, require("../../../common/criteria/FilterOperator"));

class TypeOrmCriteriaConverter {
  convert(criteria) {
    /* istanbul ignore next */
    cov_g13cam930().f[0]++;
    const options =
    /* istanbul ignore next */
    (cov_g13cam930().s[3]++, {});

    /* istanbul ignore next */
    cov_g13cam930().s[4]++;

    if (criteria.hasOrder()) {
      /* istanbul ignore next */
      cov_g13cam930().b[0][0]++;
      cov_g13cam930().s[5]++;
      options.order = {
        [criteria.order.orderBy.value()]: criteria.order.orderType.value()
      };
    } else
    /* istanbul ignore next */
    {
      cov_g13cam930().b[0][1]++;
    }

    cov_g13cam930().s[6]++;

    if (criteria.hasPagination()) {
      /* istanbul ignore next */
      cov_g13cam930().b[1][0]++;
      cov_g13cam930().s[7]++;
      options.skip = criteria.offset;

      /* istanbul ignore next */
      cov_g13cam930().s[8]++;
      options.take = criteria.limit;
    } else
    /* istanbul ignore next */
    {
      cov_g13cam930().b[1][1]++;
    }

    cov_g13cam930().s[9]++;

    if (criteria.hasFilters()) {
      /* istanbul ignore next */
      cov_g13cam930().b[2][0]++;
      cov_g13cam930().s[10]++;
      options.where = {};

      /* istanbul ignore next */
      cov_g13cam930().s[11]++;

      for (const filter of criteria.filters.filters) {
        /* istanbul ignore next */
        cov_g13cam930().s[12]++;
        options.where[filter.field.value()] = this.buildWhereCondition(filter);
      }
    } else
    /* istanbul ignore next */
    {
      cov_g13cam930().b[2][1]++;
    }

    cov_g13cam930().s[13]++;
    return options;
  }

  buildWhereCondition(filter) {
    /* istanbul ignore next */
    cov_g13cam930().f[1]++;
    cov_g13cam930().s[14]++;

    switch (filter.operator.value()) {
      case FilterOperator_1.Operator.EQUAL:
        /* istanbul ignore next */
        cov_g13cam930().b[3][0]++;
        cov_g13cam930().s[15]++;
        return (0, typeorm_1.Equal)(filter.value.value());

      case FilterOperator_1.Operator.NOT_EQUAL:
        /* istanbul ignore next */
        cov_g13cam930().b[3][1]++;
        cov_g13cam930().s[16]++;
        return (0, typeorm_1.Not)((0, typeorm_1.Equal)(filter.value.value()));

      case FilterOperator_1.Operator.GT:
        /* istanbul ignore next */
        cov_g13cam930().b[3][2]++;
        cov_g13cam930().s[17]++;
        return (0, typeorm_1.MoreThan)(filter.value.value());

      case FilterOperator_1.Operator.GT_OR_EQUAL:
        /* istanbul ignore next */
        cov_g13cam930().b[3][3]++;
        cov_g13cam930().s[18]++;
        return (0, typeorm_1.MoreThanOrEqual)(filter.value.value());

      case FilterOperator_1.Operator.LT:
        /* istanbul ignore next */
        cov_g13cam930().b[3][4]++;
        cov_g13cam930().s[19]++;
        return (0, typeorm_1.LessThan)(filter.value.value());

      case FilterOperator_1.Operator.LT_OR_EQUAL:
        /* istanbul ignore next */
        cov_g13cam930().b[3][5]++;
        cov_g13cam930().s[20]++;
        return (0, typeorm_1.LessThanOrEqual)(filter.value.value());

      case FilterOperator_1.Operator.LIKE:
        /* istanbul ignore next */
        cov_g13cam930().b[3][6]++;
        cov_g13cam930().s[21]++;
        return (0, typeorm_1.Like)(filter.value.value());
      // case Operator.CONTAINS:
      //     return In<string>(filter.value.value);

      default:
        /* istanbul ignore next */
        cov_g13cam930().b[3][7]++;
        cov_g13cam930().s[22]++;
        return filter.value.value();
    }
  }

}

/* istanbul ignore next */
cov_g13cam930().s[23]++;
exports.default = TypeOrmCriteriaConverter;