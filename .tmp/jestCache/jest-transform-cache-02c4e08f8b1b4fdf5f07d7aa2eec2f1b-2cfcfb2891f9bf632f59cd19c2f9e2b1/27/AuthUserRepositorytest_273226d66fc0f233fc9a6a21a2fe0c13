2135202699d9197d2fe07ee432867898
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Container_1 = __importDefault(require("../../../../../src/app/Container"));
const AuthUserMother_1 = __importDefault(require("../../domain/AuthUserMother"));
const Order_1 = require("../../../../../src/microk/common/criteria/Order");
const FilterOperator_1 = require("../../../../../src/microk/common/criteria/FilterOperator");
const Filters_1 = require("../../../../../src/microk/common/criteria/Filters");
const Filter_1 = require("../../../../../src/microk/common/criteria/Filter");
const FilterField_1 = require("../../../../../src/microk/common/criteria/FilterField");
const Criteria_1 = require("../../../../../src/microk/common/criteria/Criteria");
const FilterValue_1 = require("../../../../../src/microk/common/criteria/FilterValue");
const repository = Container_1.default.get('Auth.domain.AuthUserRepository');
const environmentArranger = Container_1.default.get('Test.EnvironmentArranger');
beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
    yield (yield environmentArranger).arrange();
}));
afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
    yield (yield environmentArranger).arrange();
    yield (yield environmentArranger).close();
}));
describe('AuthUserRepository', () => {
    describe('#save', () => {
        it('should save a auth user and search by id', () => __awaiter(void 0, void 0, void 0, function* () {
            const authUser = AuthUserMother_1.default.random();
            yield repository.save(authUser);
            const authUserResponse = yield repository.search(authUser.id);
            expect(authUserResponse).toEqual(authUser);
        }));
    });
    describe('#searchOneByCriteria', () => {
        it('should save a auth user and search by criteria', () => __awaiter(void 0, void 0, void 0, function* () {
            const authUser = AuthUserMother_1.default.random();
            yield repository.save(authUser);
            const criteria = new Criteria_1.Criteria(new Filters_1.Filters([new Filter_1.Filter(new FilterField_1.FilterField('email'), FilterOperator_1.FilterOperator.equal(), new FilterValue_1.FilterValue(authUser.email.toString()))]), Order_1.Order.none());
            const authUserResponse = yield repository.searchOneByCriteria(criteria);
            expect(authUserResponse).toEqual(authUser);
        }));
    });
    describe('#searchByCriteria', () => {
        it('should save a auth user and search by criteria', () => __awaiter(void 0, void 0, void 0, function* () {
            const authUser = AuthUserMother_1.default.random();
            yield repository.save(authUser);
            const criteria = new Criteria_1.Criteria(new Filters_1.Filters([new Filter_1.Filter(new FilterField_1.FilterField('email'), FilterOperator_1.FilterOperator.equal(), new FilterValue_1.FilterValue(authUser.email.toString()))]), Order_1.Order.none());
            const authUsersResponse = yield repository.searchByCriteria(criteria);
            expect(authUsersResponse).toEqual([authUser]);
        }));
    });
});
