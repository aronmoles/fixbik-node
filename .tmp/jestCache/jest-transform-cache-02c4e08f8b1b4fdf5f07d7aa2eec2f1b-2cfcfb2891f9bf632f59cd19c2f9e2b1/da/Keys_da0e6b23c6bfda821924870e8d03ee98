bab83108511d8eff79836ce2eccb3247
"use strict";

/* istanbul ignore next */
function cov_1c1zkxkfs() {
  var path = "/Users/cuatroochenta/FixBik/fixbik-node/src/modules/shared/infrastructure/di/Keys.ts";
  var hash = "4458a3dc6cbcaecf3845a32ebf9dacaf769f06fe";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/FixBik/fixbik-node/src/modules/shared/infrastructure/di/Keys.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 22
        }
      },
      "2": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 55,
          column: 2
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {},
    b: {},
    inputSourceMap: null,
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4458a3dc6cbcaecf3845a32ebf9dacaf769f06fe"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1c1zkxkfs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1c1zkxkfs();
cov_1c1zkxkfs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1c1zkxkfs().s[1]++;
exports.Keys = void 0;

/* istanbul ignore next */
cov_1c1zkxkfs().s[2]++;
exports.Keys = {
  App: {
    Env: Symbol.for('Env'),
    Logger: Symbol.for('Log'),
    ControllerDiscoverer: Symbol.for('ControllerDiscoverer'),
    MiddlewareDiscoverer: Symbol.for('MiddlewareDiscoverer'),
    ErrorMiddlewareDiscoverer: Symbol.for('ErrorMiddlewareDiscoverer'),
    ErrorTracker: Symbol.for('ErrorTracker'),
    MessageStore: Symbol.for('MessageStore'),
    PersistErrorMiddleware: Symbol.for('PersistErrorMiddleware'),
    HttpErrorMiddleware: Symbol.for('HttpErrorMiddleware'),
    StoreMessageBusMiddleware: Symbol.for('StoreMessageBusMiddleware'),
    TimeBusMiddleware: Symbol.for('TimeBusMiddleware'),
    AuthMiddleware: Symbol.for('AuthMiddleware'),
    ServerOpenApiConfig: Symbol.for('ServerOpenApiConfig'),
    ConnectionManager: Symbol.for('ConnectionManager')
  },
  CQRS: {
    CommandHandlersMapper: Symbol.for('CommandHandlersMapper'),
    CommandBus: Symbol.for('CommandBus'),
    QueryHandlersMapper: Symbol.for('QueryHandlersMapper'),
    QueryBus: Symbol.for('QueryBus'),
    EventSubscriberMapper: Symbol.for('EventSubscriberMapper'),
    EventBus: Symbol.for('EventBus'),
    RabbitMqConfig: Symbol.for('RabbitMqConfig'),
    EventDeserializer: Symbol.for('EventDeserializer'),
    EventClassMapper: Symbol.for('EventClassMapper'),
    EventStore: Symbol.for('EventStore'),
    EventStoreController: Symbol.for('EventStoreController')
  },
  Test: {
    EnvironmentArranger: Symbol.for('EnvironmentArranger'),
    EnvironmentFixtures: Symbol.for('EnvironmentFixtures')
  },
  Info: {
    InfoController: Symbol.for('InfoController'),
    SetInfoController: Symbol.for('SetInfoController'),
    InfoService: Symbol.for('InfoService'),
    SetInfoService: Symbol.for('SetInfoService'),
    SendEmailService: Symbol.for('SendEmailService'),
    InfoQueryHandler: Symbol.for('InfoQueryHandler'),
    SetInfoCommandHandler: Symbol.for('SetInfoCommandHandler'),
    SendEmailInfoRequestDomainEventSubscriber: Symbol.for('SendEmailInfoRequestDomainEventSubscriber')
  },
  Auth: {
    AuthenticateController: Symbol.for('AuthenticateController'),
    Authenticator: Symbol.for('Authenticator'),
    AuthenticateQueryHandler: Symbol.for('AuthenticateQueryHandler'),
    AuthUserRepository: Symbol.for('AuthUserRepository'),
    AuthTokenRepository: Symbol.for('AuthTokenRepository')
  }
};