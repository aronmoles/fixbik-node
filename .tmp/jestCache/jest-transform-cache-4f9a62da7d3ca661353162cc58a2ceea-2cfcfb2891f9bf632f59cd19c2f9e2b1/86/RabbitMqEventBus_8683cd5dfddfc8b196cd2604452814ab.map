{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/event/infrastructure/rabbit-mq/RabbitMqEventBus.ts","mappings":"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","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/event/infrastructure/rabbit-mq/RabbitMqEventBus.ts"],"sourcesContent":["import { Connection, Message, Exchange, Queue } from 'amqp-ts';\nimport MessageName from '../../../common/message/MessageName';\nimport Logger from '../../../core/domain/Logger';\nimport WrapperExecutor from '../../../core/domain/WrapperExecutor';\nimport Executor from '../../../core/infrastructure/Executor';\nimport DomainEvent from '../../domain/DomainEvent';\nimport EventBus from '../../domain/EventBus';\nimport EventSubscriber from '../../domain/EventSubscriber';\nimport RabbitMqConfig from './RabbitMqConfig';\nimport { EventJsonDeserializer } from '../EventJsonDeserializer';\nimport { Mapper } from '../../../common/Mapper';\n\nexport default class RabbitMqEventbus implements EventBus {\n    private readonly executor: Executor<DomainEvent, void>;\n\n    private readonly connection: Connection;\n    private readonly exchange: Exchange;\n    private readonly queue: Queue;\n\n    constructor(\n        config: RabbitMqConfig,\n        private readonly domainEventSubscriberMapper: Mapper<MessageName, Array<EventSubscriber<DomainEvent>>>,\n        private readonly deserializer: EventJsonDeserializer,\n        private readonly logger: Logger,\n        executors: WrapperExecutor<DomainEvent, void>[] = [],\n    ) {\n        this.executor = new Executor<DomainEvent, void>(executors);\n\n        this.connection = new Connection(`amqp://${config.user}:${config.password}@${config.host}`);\n        this.exchange = this.connection.declareExchange(config.exchange, 'fanout', { durable: false });\n        this.queue = this.connection.declareQueue(config.queue);\n    }\n\n    async start(): Promise<void> {\n        if (!this.deserializer) {\n            throw new Error('RabbitMqEventBus has not being properly initialized, deserializer is missing');\n        }\n\n        await this.connection.completeConfiguration();\n\n        await this.queue.bind(this.exchange);\n        await this.queue.stopConsumer();\n        await this.queue.activateConsumer(\n            async(message) => {\n                try {\n                    const event = this.deserializer.deserialize(message.content.toString());\n                    if (event) {\n                        const subscribers = this.domainEventSubscriberMapper.search(event.name);\n                        if (subscribers) {\n                            const subscribersNames = subscribers.map((subscriber) => subscriber.constructor.name);\n                            this.logger.info(`[RabbitMqEventBus] Message processed: ${event.name.toString()} by ${subscribersNames.join(', ')}`);\n                            const subscribersExecutions = subscribers.map((subscriber) => {\n                                return this.executor.run(event, async () => subscriber.dispatch(event))\n                            });\n                            await Promise.all(subscribersExecutions);\n                        }\n                    }\n                    message.ack();\n                } catch (error) {\n                    message.reject()\n                }\n            },\n            { noAck: false }\n        );\n    }\n\n    async publish(events: Array<DomainEvent>): Promise<void> {\n        events.forEach((event) => {\n            const eventPrimitive = event.toPrimitive();\n            const message = new Message({\n                data: {\n                    ...eventPrimitive,\n                    meta: undefined,\n                },\n                meta: eventPrimitive.meta,\n            });\n            this.logger.info(`[RabbitMqEventBus] Event to be published: ${event.name.toString()}`);\n            this.exchange.send(message);\n        });\n    }\n}\n"],"version":3}