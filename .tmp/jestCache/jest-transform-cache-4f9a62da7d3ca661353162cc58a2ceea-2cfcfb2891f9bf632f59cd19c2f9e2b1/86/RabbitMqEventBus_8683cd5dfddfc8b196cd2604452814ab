27f3b47404e7f9b7d1474104a634d70d
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const amqp_ts_1 = require("amqp-ts");
const Executor_1 = __importDefault(require("../../../core/infrastructure/Executor"));
class RabbitMqEventbus {
    constructor(config, domainEventSubscriberMapper, deserializer, logger, executors = []) {
        this.domainEventSubscriberMapper = domainEventSubscriberMapper;
        this.deserializer = deserializer;
        this.logger = logger;
        this.executor = new Executor_1.default(executors);
        this.connection = new amqp_ts_1.Connection(`amqp://${config.user}:${config.password}@${config.host}`);
        this.exchange = this.connection.declareExchange(config.exchange, 'fanout', { durable: false });
        this.queue = this.connection.declareQueue(config.queue);
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.deserializer) {
                throw new Error('RabbitMqEventBus has not being properly initialized, deserializer is missing');
            }
            yield this.connection.completeConfiguration();
            yield this.queue.bind(this.exchange);
            yield this.queue.stopConsumer();
            yield this.queue.activateConsumer((message) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const event = this.deserializer.deserialize(message.content.toString());
                    if (event) {
                        const subscribers = this.domainEventSubscriberMapper.search(event.name);
                        if (subscribers) {
                            const subscribersNames = subscribers.map((subscriber) => subscriber.constructor.name);
                            this.logger.info(`[RabbitMqEventBus] Message processed: ${event.name.toString()} by ${subscribersNames.join(', ')}`);
                            const subscribersExecutions = subscribers.map((subscriber) => {
                                return this.executor.run(event, () => __awaiter(this, void 0, void 0, function* () { return subscriber.dispatch(event); }));
                            });
                            yield Promise.all(subscribersExecutions);
                        }
                    }
                    message.ack();
                }
                catch (error) {
                    message.reject();
                }
            }), { noAck: false });
        });
    }
    publish(events) {
        return __awaiter(this, void 0, void 0, function* () {
            events.forEach((event) => {
                const eventPrimitive = event.toPrimitive();
                const message = new amqp_ts_1.Message({
                    data: Object.assign(Object.assign({}, eventPrimitive), { meta: undefined }),
                    meta: eventPrimitive.meta,
                });
                this.logger.info(`[RabbitMqEventBus] Event to be published: ${event.name.toString()}`);
                this.exchange.send(message);
            });
        });
    }
}
exports.default = RabbitMqEventbus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,