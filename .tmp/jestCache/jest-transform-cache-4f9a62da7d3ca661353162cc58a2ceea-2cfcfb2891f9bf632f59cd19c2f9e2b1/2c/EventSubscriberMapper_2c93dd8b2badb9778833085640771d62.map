{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/event/infrastructure/EventSubscriberMapper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,MAAa,qBAAb,CAAkC;AAG9B,EAAA,WAAA,CAAY,sBAAZ,EAAuE;AAAA;AAAA;AAAA;AACnE,SAAK,yBAAL,GAAiC,KAAK,sBAAL,CAA4B,sBAA5B,CAAjC;AACH;;AAEO,EAAA,sBAAsB,CAC1B,sBAD0B,EACiC;AAAA;AAAA;AAE3D,UAAM,yBAAyB;AAAA;AAAA,8BAAG,IAAI,GAAJ,EAAH,CAA/B;;AAF2D;AAAA;AAI3D,IAAA,sBAAsB,CAAC,OAAvB,CAA+B,CAAC,qBAAD,KAA0B;AAAA;AAAA;AAAA;AACrD,MAAA,qBAAqB,CAAC,YAAtB,GAAqC,OAArC,CAA6C,CAAC,gBAAD,KAAqB;AAAA;AAAA;AAC9D,YAAI,2BAA2B;AAAA;AAAA,kCAAG,yBAAyB,CAAC,GAA1B,CAA8B,gBAAgB,CAAC,UAAjB,CAA4B,KAA5B,EAA9B,CAAH,CAA/B;;AAD8D;AAAA;;AAE9D,YAAI,CAAC,2BAAL,EAAkC;AAAA;AAAA;AAAA;AAC9B,UAAA,2BAA2B,GAAG,EAA9B;AACH,SAFD;AAAA;AAAA;AAAA;AAAA;;AAF8D;AAK9D,QAAA,2BAA2B,CAAC,IAA5B,CAAiC,qBAAjC;;AAL8D;AAAA;AAM9D,QAAA,yBAAyB,CAAC,GAA1B,CAA8B,gBAAgB,CAAC,UAAjB,CAA4B,KAA5B,EAA9B,EAAmE,2BAAnE;AACH,OAPD;AAQH,KATD;;AAJ2D;AAAA;AAe3D,WAAO,yBAAP;AACH;;AAEM,EAAA,MAAM,CAAC,WAAD,EAAyB;AAAA;AAAA;AAClC,UAAM,sBAAsB;AAAA;AAAA,+BAAG,KAAK,yBAAL,CAA+B,GAA/B,CAAmC,WAAW,CAAC,KAAZ,EAAnC,CAAH,CAA5B;;AADkC;AAAA;;AAGlC,QAAI,CAAC,sBAAL,EAA6B;AAAA;AAAA;AAAA;AACzB,aAAO,EAAP;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;;AAHkC;AAOlC,WAAO,sBAAP;AACH;;AAlC6B;;;;AAAlC,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourcesContent":["import { Mapper } from '../../common/Mapper';\nimport MessageName from '../../common/message/MessageName';\nimport DomainEvent from '../domain/DomainEvent';\nimport EventSubscriber from '../domain/EventSubscriber';\n\nexport class EventSubscriberMapper implements Mapper<MessageName, EventSubscriber<DomainEvent>[]> {\n    private domainEventSubscribersMap: Map<string, Array<EventSubscriber<DomainEvent>>>;\n\n    constructor(domainEventSubscribers: Array<EventSubscriber<DomainEvent>>) {\n        this.domainEventSubscribersMap = this.formatEventSubscribers(domainEventSubscribers);\n    }\n\n    private formatEventSubscribers(\n        domainEventSubscribers: Array<EventSubscriber<DomainEvent>>,\n    ): Map<string, Array<EventSubscriber<DomainEvent>>> {\n        const domainEventSubscribersMap = new Map<string, Array<EventSubscriber<DomainEvent>>>();\n\n        domainEventSubscribers.forEach((domainEventSubscriber) => {\n            domainEventSubscriber.subscribedTo().forEach((domainEventClass) => {\n                let domainEventSubscribersInMap = domainEventSubscribersMap.get(domainEventClass.EVENT_NAME.value());\n                if (!domainEventSubscribersInMap) {\n                    domainEventSubscribersInMap = [];\n                }\n                domainEventSubscribersInMap.push(domainEventSubscriber)\n                domainEventSubscribersMap.set(domainEventClass.EVENT_NAME.value(), domainEventSubscribersInMap)\n            })\n        });\n\n        return domainEventSubscribersMap;\n    }\n\n    public search(messageName: MessageName): Array<EventSubscriber<DomainEvent>> {\n        const domainEventSubscribers = this.domainEventSubscribersMap.get(messageName.value());\n\n        if (!domainEventSubscribers) {\n            return [];\n        }\n\n        return domainEventSubscribers;\n    }\n}\n"]}