{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/persistence/infrastructure/typeorm/TypeOrmCriteriaConverter.ts","mappings":";;AACA,qCAAsG;AAGtG,4EAAmE;AAEnE,MAAqB,wBAAwB;IAClC,OAAO,CAAC,QAAkB;QAC7B,MAAM,OAAO,GAA6B,EAAE,CAAC;QAE7C,IAAI,QAAQ,CAAC,QAAQ,EAAE,EAAE;YACrB,OAAO,CAAC,KAAK,GAAG;gBACZ,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE;gBACpC,EAAE,EAAE,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE;aACvC,CAAC;SACL;QAED,IAAI,QAAQ,CAAC,aAAa,EAAE,EAAE;YAC1B,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC;YAC/B,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC;SACjC;QAED,IAAI,QAAQ,CAAC,UAAU,EAAE,EAAE;YACvB,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;YACnB,KAAK,MAAM,MAAM,IAAI,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE;gBAC3C,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;aAC1E;SACJ;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;IAEO,mBAAmB,CAAC,MAAc;QACtC,QAAQ,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE;YAC7B,KAAK,yBAAQ,CAAC,KAAK;gBACf,OAAO,IAAA,aAAG,EAAC,GAAG,EAAE,CAAC,qBAAqB,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACvE,KAAK,yBAAQ,CAAC,SAAS;gBACnB,OAAO,IAAA,aAAG,EAAC,IAAA,eAAK,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACpC,KAAK,yBAAQ,CAAC,EAAE;gBACZ,OAAO,IAAA,kBAAQ,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAClC,KAAK,yBAAQ,CAAC,WAAW;gBACrB,OAAO,IAAA,yBAAe,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACzC,KAAK,yBAAQ,CAAC,EAAE;gBACZ,OAAO,IAAA,kBAAQ,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAClC,KAAK,yBAAQ,CAAC,WAAW;gBACrB,OAAO,IAAA,yBAAe,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACzC,KAAK,yBAAQ,CAAC,IAAI;gBACd,OAAO,IAAA,cAAI,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC9B,0BAA0B;YAC1B,uCAAuC;YACvC;gBACI,OAAO,MAAM,CAAC,KAAK,CAAC;SAC3B;IACL,CAAC;CACJ;AAhDD,2CAgDC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/persistence/infrastructure/typeorm/TypeOrmCriteriaConverter.ts"],"sourcesContent":["import { FindManyOptions } from 'typeorm/find-options/FindManyOptions';\nimport { Equal, LessThan, LessThanOrEqual, Like, MoreThan, MoreThanOrEqual, Not, Raw } from 'typeorm';\nimport { Criteria } from '../../../common/criteria/Criteria';\nimport { Filter } from '../../../common/criteria/Filter';\nimport { Operator } from '../../../common/criteria/FilterOperator';\n\nexport default class TypeOrmCriteriaConverter {\n    public convert(criteria: Criteria): FindManyOptions<unknown> {\n        const options: FindManyOptions<unknown> = {};\n\n        if (criteria.hasOrder()) {\n            options.order = {\n                name: criteria.order.orderBy.value(),\n                id: criteria.order.orderType.value(),\n            };\n        }\n\n        if (criteria.hasPagination()) {\n            options.skip = criteria.offset;\n            options.take = criteria.limit;\n        }\n\n        if (criteria.hasFilters()) {\n            options.where = {};\n            for (const filter of criteria.filters.filters) {\n                options.where[filter.field.value()] = this.buildWhereCondition(filter);\n            }\n        }\n\n        return options;\n    }\n\n    private buildWhereCondition(filter: Filter): any {\n        switch (filter.operator.value()) {\n            case Operator.EQUAL:\n                return Raw(() => `AuthUser.email = '${filter.value.toString()}%'`);\n            case Operator.NOT_EQUAL:\n                return Not(Equal(filter.value));\n            case Operator.GT:\n                return MoreThan(filter.value);\n            case Operator.GT_OR_EQUAL:\n                return MoreThanOrEqual(filter.value);\n            case Operator.LT:\n                return LessThan(filter.value);\n            case Operator.LT_OR_EQUAL:\n                return LessThanOrEqual(filter.value);\n            case Operator.LIKE:\n                return Like(filter.value);\n            // case Operator.CONTAINS:\n            //     return In<string>(filter.value);\n            default:\n                return filter.value;\n        }\n    }\n}\n"],"version":3}