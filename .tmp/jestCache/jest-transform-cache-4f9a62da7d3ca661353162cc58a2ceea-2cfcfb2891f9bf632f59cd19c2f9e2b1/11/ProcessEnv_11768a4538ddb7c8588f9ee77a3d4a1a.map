{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/app/ProcessEnv.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA,uCAAyB;AAEzB,IAAY,OAIX;AAJD,WAAY,OAAO;IACf,mCAAG,CAAA;IACH,qCAAI,CAAA;IACJ,qCAAI,CAAA;AACR,CAAC,EAJW,OAAO,GAAP,eAAO,KAAP,eAAO,QAIlB;AAmBD,MAAqB,UAAU;IAG3B;QACI,IAAI,CAAC,GAAG,GAAG;YACP,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;YAC9B,IAAI,EAAE,MAAM;YAEZ,aAAa,EAAE,EAAE;YACjB,aAAa,EAAE,EAAE;YACjB,iBAAiB,EAAE,EAAE;YACrB,iBAAiB,EAAE,EAAE;YACrB,cAAc,EAAE,EAAE;YAElB,UAAU,EAAE,EAAE;YACd,UAAU,EAAE,EAAE;YACd,UAAU,EAAE,EAAE;YACd,cAAc,EAAE,EAAE;YAClB,cAAc,EAAE,EAAE;SACrB,CAAC;QAEF,uBAAuB;QACvB,MAAM,eAAe,GAAG,GAAG,SAAS,eAAe,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC1E,IAAI,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;YAChC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC,CAAC;SACvD;aAAM;YACH,MAAM,WAAW,GAAG,GAAG,SAAS,aAAa,CAAC;YAC9C,IAAI,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;gBAC5B,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;aACnD;SACJ;QAED,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAwB,CAAC;QAE7D,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;YACvB,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAE/B,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aACzB;iBAAM;gBACH,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,EAAE,CAAC,CAAC;aAC7C;SACJ;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE;YACtD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC9C;IACL,CAAC;IAEM,GAAG,CAAyB,GAAM;QACrC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IAEM,GAAG,CAAyB,GAAM,EAAE,KAAgB;QACvD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IAC1B,CAAC;CACJ;AAxDD,6BAwDC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/app/ProcessEnv.ts"],"sourcesContent":["/* eslint-disable no-undef, @typescript-eslint/no-var-requires */\nimport Env from '@microk/core/domain/Env';\nimport * as fs from 'fs';\n\nexport enum EnvMode {\n    dev,\n    test,\n    prod,\n}\n\nexport interface EnvKey {\n    NODE_ENV: string;\n    PORT: string;\n\n    RABBITMQ_HOST: string;\n    RABBITMQ_USER: string;\n    RABBITMQ_PASSWORD: string;\n    RABBITMQ_EXCHANGE: string;\n    RABBITMQ_QUEUE: string;\n\n    MYSQL_HOST: string;\n    MYSQL_PORT: string;\n    MYSQL_USER: string;\n    MYSQL_PASSWORD: string;\n    MYSQL_DATABASE: string;\n}\n\nexport default class ProcessEnv implements Env<EnvKey> {\n    private readonly env: EnvKey;\n\n    constructor() {\n        this.env = {\n            NODE_ENV: process.env.NODE_ENV,\n            PORT: '3000',\n\n            RABBITMQ_HOST: '',\n            RABBITMQ_USER: '',\n            RABBITMQ_PASSWORD: '',\n            RABBITMQ_EXCHANGE: '',\n            RABBITMQ_QUEUE: '',\n\n            MYSQL_HOST: '',\n            MYSQL_PORT: '',\n            MYSQL_USER: '',\n            MYSQL_PASSWORD: '',\n            MYSQL_DATABASE: '',\n        };\n\n        // TODO Crear un DotEnv\n        const modeEnvFilePath = `${__dirname}/../../.env.${process.env.NODE_ENV}`;\n        if (fs.existsSync(modeEnvFilePath)) {\n            require('dotenv').config({ path: modeEnvFilePath });\n        } else {\n            const envFilePath = `${__dirname}/../../.env`;\n            if (fs.existsSync(envFilePath)) {\n                require('dotenv').config({ path: envFilePath });\n            }\n        }\n\n        const envKeys = Object.keys(this.env) as Array<keyof EnvKey>;\n\n        for (const key of envKeys) {\n            const value = process.env[key];\n\n            if (value) {\n                this.env[key] = value;\n            } else {\n                throw new Error(`Missing env key ${key}`);\n            }\n        }\n\n        if (!Object.keys(EnvMode).includes(this.get('NODE_ENV'))) {\n            throw new Error('Invalid NODE_ENV value.');\n        }\n    }\n\n    public get<T extends keyof EnvKey>(key: T): EnvKey[T] {\n        return this.env[key];\n    }\n\n    public set<T extends keyof EnvKey>(key: T, value: EnvKey[T]) {\n        this.env[key] = value;\n    }\n}\n"],"version":3}