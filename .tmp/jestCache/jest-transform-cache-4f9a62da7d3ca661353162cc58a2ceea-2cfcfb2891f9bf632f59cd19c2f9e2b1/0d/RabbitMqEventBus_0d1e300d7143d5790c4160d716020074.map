{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/event/infrastructure/rabbit-mq/RabbitMqEventBus.ts"],"names":[],"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","sourcesContent":["import { Connection, Message, Exchange, Queue } from 'amqp-ts';\nimport MessageName from '../../../common/message/MessageName';\nimport Logger from '../../../core/domain/Logger';\nimport WrapperExecutor from '../../../core/domain/WrapperExecutor';\nimport Executor from '../../../core/infrastructure/Executor';\nimport DomainEvent from '../../domain/DomainEvent';\nimport EventBus from '../../domain/EventBus';\nimport EventSubscriber from '../../domain/EventSubscriber';\nimport RabbitMqConfig from './RabbitMqConfig';\nimport { EventJsonDeserializer } from '../EventJsonDeserializer';\nimport { Mapper } from '../../../common/Mapper';\n\nexport default class RabbitMqEventbus implements EventBus {\n    private readonly executor: Executor<DomainEvent, void>;\n\n    private readonly connection: Connection;\n    private readonly exchange: Exchange;\n    private readonly queue: Queue;\n\n    constructor(\n        config: RabbitMqConfig,\n        private readonly domainEventSubscriberMapper: Mapper<MessageName, Array<EventSubscriber<DomainEvent>>>,\n        private readonly deserializer: EventJsonDeserializer,\n        private readonly logger: Logger,\n        executors: WrapperExecutor<DomainEvent, void>[] = [],\n    ) {\n        this.executor = new Executor<DomainEvent, void>(executors);\n\n        this.connection = new Connection(`amqp://${config.user}:${config.password}@${config.host}`);\n        this.exchange = this.connection.declareExchange(config.exchange, 'fanout', { durable: false });\n        this.queue = this.connection.declareQueue(config.queue);\n    }\n\n    async start(): Promise<void> {\n        if (!this.deserializer) {\n            throw new Error('RabbitMqEventBus has not being properly initialized, deserializer is missing');\n        }\n\n        await this.connection.completeConfiguration();\n\n        await this.queue.bind(this.exchange);\n        await this.queue.stopConsumer();\n        await this.queue.activateConsumer(\n            async(message) => {\n                try {\n                    const event = this.deserializer.deserialize(message.content.toString());\n                    if (event) {\n                        const subscribers = this.domainEventSubscriberMapper.search(event.name);\n                        if (subscribers) {\n                            const subscribersNames = subscribers.map((subscriber) => subscriber.constructor.name);\n                            this.logger.info(`[RabbitMqEventBus] Message processed: ${event.name.toString()} by ${subscribersNames.join(', ')}`);\n                            const subscribersExecutions = subscribers.map((subscriber) => {\n                                return this.executor.run(event, async () => subscriber.dispatch(event))\n                            });\n                            await Promise.all(subscribersExecutions);\n                        }\n                    }\n                    message.ack();\n                } catch (error) {\n                    message.reject()\n                }\n            },\n            { noAck: false }\n        );\n    }\n\n    async publish(events: Array<DomainEvent>): Promise<void> {\n        events.forEach((event) => {\n            const eventPrimitive = event.toPrimitive();\n            const message = new Message({\n                data: {\n                    ...eventPrimitive,\n                    meta: undefined,\n                },\n                meta: eventPrimitive.meta,\n            });\n            this.logger.info(`[RabbitMqEventBus] Event to be published: ${event.name.toString()}`);\n            this.exchange.send(message);\n        });\n    }\n}\n"]}