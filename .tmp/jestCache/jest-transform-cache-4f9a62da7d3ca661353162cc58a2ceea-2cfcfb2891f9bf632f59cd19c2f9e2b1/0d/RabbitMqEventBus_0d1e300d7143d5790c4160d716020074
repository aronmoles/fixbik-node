76be566f94dfdfcca304bb1bf0823581
"use strict";

/* istanbul ignore next */
function cov_1rj8e6cfoj() {
  var path = "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/event/infrastructure/rabbit-mq/RabbitMqEventBus.ts";
  var hash = "96bfdb0ef6647f69f19229f3d332768fa55d45b3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/event/infrastructure/rabbit-mq/RabbitMqEventBus.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 16
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 28
        },
        end: {
          line: 3,
          column: 110
        }
      },
      "2": {
        start: {
          line: 3,
          column: 91
        },
        end: {
          line: 3,
          column: 106
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "4": {
        start: {
          line: 5,
          column: 36
        },
        end: {
          line: 5,
          column: 97
        }
      },
      "5": {
        start: {
          line: 5,
          column: 42
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "6": {
        start: {
          line: 5,
          column: 85
        },
        end: {
          line: 5,
          column: 95
        }
      },
      "7": {
        start: {
          line: 6,
          column: 35
        },
        end: {
          line: 6,
          column: 100
        }
      },
      "8": {
        start: {
          line: 6,
          column: 41
        },
        end: {
          line: 6,
          column: 73
        }
      },
      "9": {
        start: {
          line: 6,
          column: 88
        },
        end: {
          line: 6,
          column: 98
        }
      },
      "10": {
        start: {
          line: 7,
          column: 32
        },
        end: {
          line: 7,
          column: 116
        }
      },
      "11": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "12": {
        start: {
          line: 11,
          column: 22
        },
        end: {
          line: 13,
          column: 1
        }
      },
      "13": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "14": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 62
        }
      },
      "15": {
        start: {
          line: 15,
          column: 18
        },
        end: {
          line: 15,
          column: 36
        }
      },
      "16": {
        start: {
          line: 16,
          column: 19
        },
        end: {
          line: 16,
          column: 84
        }
      },
      "17": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 71
        }
      },
      "18": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "19": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 29
        }
      },
      "20": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 58
        }
      },
      "21": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 110
        }
      },
      "22": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 103
        }
      },
      "23": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 64
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 55,
          column: 11
        }
      },
      "25": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 31,
          column: 13
        }
      },
      "26": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 112
        }
      },
      "27": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 58
        }
      },
      "28": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 49
        }
      },
      "29": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 44
        }
      },
      "30": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 54,
          column: 34
        }
      },
      "31": {
        start: {
          line: 35,
          column: 59
        },
        end: {
          line: 54,
          column: 14
        }
      },
      "32": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 53,
          column: 17
        }
      },
      "33": {
        start: {
          line: 37,
          column: 34
        },
        end: {
          line: 37,
          column: 91
        }
      },
      "34": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 48,
          column: 21
        }
      },
      "35": {
        start: {
          line: 39,
          column: 44
        },
        end: {
          line: 39,
          column: 95
        }
      },
      "36": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 47,
          column: 25
        }
      },
      "37": {
        start: {
          line: 41,
          column: 53
        },
        end: {
          line: 41,
          column: 113
        }
      },
      "38": {
        start: {
          line: 41,
          column: 85
        },
        end: {
          line: 41,
          column: 112
        }
      },
      "39": {
        start: {
          line: 42,
          column: 28
        },
        end: {
          line: 42,
          column: 145
        }
      },
      "40": {
        start: {
          line: 43,
          column: 58
        },
        end: {
          line: 45,
          column: 30
        }
      },
      "41": {
        start: {
          line: 44,
          column: 32
        },
        end: {
          line: 44,
          column: 156
        }
      },
      "42": {
        start: {
          line: 44,
          column: 70
        },
        end: {
          line: 44,
          column: 154
        }
      },
      "43": {
        start: {
          line: 44,
          column: 117
        },
        end: {
          line: 44,
          column: 151
        }
      },
      "44": {
        start: {
          line: 46,
          column: 28
        },
        end: {
          line: 46,
          column: 69
        }
      },
      "45": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 34
        }
      },
      "46": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 37
        }
      },
      "47": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 68,
          column: 11
        }
      },
      "48": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "49": {
        start: {
          line: 60,
          column: 39
        },
        end: {
          line: 60,
          column: 58
        }
      },
      "50": {
        start: {
          line: 61,
          column: 32
        },
        end: {
          line: 64,
          column: 18
        }
      },
      "51": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 103
        }
      },
      "52": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 44
        }
      },
      "53": {
        start: {
          line: 71,
          column: 0
        },
        end: {
          line: 71,
          column: 35
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 2,
            column: 45
          }
        },
        loc: {
          start: {
            line: 2,
            column: 89
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "adopt",
        decl: {
          start: {
            line: 3,
            column: 13
          },
          end: {
            line: 3,
            column: 18
          }
        },
        loc: {
          start: {
            line: 3,
            column: 26
          },
          end: {
            line: 3,
            column: 112
          }
        },
        line: 3
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 3,
            column: 70
          },
          end: {
            line: 3,
            column: 71
          }
        },
        loc: {
          start: {
            line: 3,
            column: 89
          },
          end: {
            line: 3,
            column: 108
          }
        },
        line: 3
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 4,
            column: 37
          }
        },
        loc: {
          start: {
            line: 4,
            column: 63
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 4
      },
      "4": {
        name: "fulfilled",
        decl: {
          start: {
            line: 5,
            column: 17
          },
          end: {
            line: 5,
            column: 26
          }
        },
        loc: {
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 99
          }
        },
        line: 5
      },
      "5": {
        name: "rejected",
        decl: {
          start: {
            line: 6,
            column: 17
          },
          end: {
            line: 6,
            column: 25
          }
        },
        loc: {
          start: {
            line: 6,
            column: 33
          },
          end: {
            line: 6,
            column: 102
          }
        },
        line: 6
      },
      "6": {
        name: "step",
        decl: {
          start: {
            line: 7,
            column: 17
          },
          end: {
            line: 7,
            column: 21
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 7,
            column: 118
          }
        },
        line: 7
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 11,
            column: 56
          },
          end: {
            line: 11,
            column: 57
          }
        },
        loc: {
          start: {
            line: 11,
            column: 71
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 11
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 91
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 18
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 27
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 28,
            column: 47
          },
          end: {
            line: 28,
            column: 48
          }
        },
        loc: {
          start: {
            line: 28,
            column: 60
          },
          end: {
            line: 55,
            column: 9
          }
        },
        line: 28
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 35,
            column: 46
          },
          end: {
            line: 35,
            column: 47
          }
        },
        loc: {
          start: {
            line: 35,
            column: 59
          },
          end: {
            line: 54,
            column: 14
          }
        },
        line: 35
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 35,
            column: 91
          },
          end: {
            line: 35,
            column: 92
          }
        },
        loc: {
          start: {
            line: 35,
            column: 104
          },
          end: {
            line: 54,
            column: 13
          }
        },
        line: 35
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 41,
            column: 69
          },
          end: {
            line: 41,
            column: 70
          }
        },
        loc: {
          start: {
            line: 41,
            column: 85
          },
          end: {
            line: 41,
            column: 112
          }
        },
        line: 41
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 43,
            column: 74
          },
          end: {
            line: 43,
            column: 75
          }
        },
        loc: {
          start: {
            line: 43,
            column: 90
          },
          end: {
            line: 45,
            column: 29
          }
        },
        line: 43
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 44,
            column: 64
          },
          end: {
            line: 44,
            column: 65
          }
        },
        loc: {
          start: {
            line: 44,
            column: 70
          },
          end: {
            line: 44,
            column: 154
          }
        },
        line: 44
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 44,
            column: 102
          },
          end: {
            line: 44,
            column: 103
          }
        },
        loc: {
          start: {
            line: 44,
            column: 115
          },
          end: {
            line: 44,
            column: 153
          }
        },
        line: 44
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 20
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 57
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 58,
            column: 47
          },
          end: {
            line: 58,
            column: 48
          }
        },
        loc: {
          start: {
            line: 58,
            column: 60
          },
          end: {
            line: 68,
            column: 9
          }
        },
        line: 58
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 59,
            column: 27
          },
          end: {
            line: 59,
            column: 28
          }
        },
        loc: {
          start: {
            line: 59,
            column: 38
          },
          end: {
            line: 67,
            column: 13
          }
        },
        line: 59
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 16
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 2,
            column: 21
          }
        }, {
          start: {
            line: 2,
            column: 25
          },
          end: {
            line: 2,
            column: 39
          }
        }, {
          start: {
            line: 2,
            column: 44
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 56
          },
          end: {
            line: 3,
            column: 61
          }
        }, {
          start: {
            line: 3,
            column: 64
          },
          end: {
            line: 3,
            column: 109
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 16
          },
          end: {
            line: 4,
            column: 17
          }
        }, {
          start: {
            line: 4,
            column: 22
          },
          end: {
            line: 4,
            column: 33
          }
        }],
        line: 4
      },
      "3": {
        loc: {
          start: {
            line: 7,
            column: 32
          },
          end: {
            line: 7,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 7,
            column: 46
          },
          end: {
            line: 7,
            column: 67
          }
        }, {
          start: {
            line: 7,
            column: 70
          },
          end: {
            line: 7,
            column: 115
          }
        }],
        line: 7
      },
      "4": {
        loc: {
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 51
          },
          end: {
            line: 8,
            column: 61
          }
        }, {
          start: {
            line: 8,
            column: 65
          },
          end: {
            line: 8,
            column: 67
          }
        }],
        line: 8
      },
      "5": {
        loc: {
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 13,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 23
          },
          end: {
            line: 11,
            column: 27
          }
        }, {
          start: {
            line: 11,
            column: 31
          },
          end: {
            line: 11,
            column: 51
          }
        }, {
          start: {
            line: 11,
            column: 56
          },
          end: {
            line: 13,
            column: 1
          }
        }],
        line: 11
      },
      "6": {
        loc: {
          start: {
            line: 12,
            column: 11
          },
          end: {
            line: 12,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 12,
            column: 37
          },
          end: {
            line: 12,
            column: 40
          }
        }, {
          start: {
            line: 12,
            column: 43
          },
          end: {
            line: 12,
            column: 61
          }
        }],
        line: 12
      },
      "7": {
        loc: {
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 12
          },
          end: {
            line: 12,
            column: 15
          }
        }, {
          start: {
            line: 12,
            column: 19
          },
          end: {
            line: 12,
            column: 33
          }
        }],
        line: 12
      },
      "8": {
        loc: {
          start: {
            line: 18,
            column: 75
          },
          end: {
            line: 18,
            column: 89
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 87
          },
          end: {
            line: 18,
            column: 89
          }
        }],
        line: 18
      },
      "9": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 31,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "10": {
        loc: {
          start: {
            line: 38,
            column: 20
          },
          end: {
            line: 48,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 20
          },
          end: {
            line: 48,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "11": {
        loc: {
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 47,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 47,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/event/infrastructure/rabbit-mq/RabbitMqEventBus.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/event/infrastructure/rabbit-mq/RabbitMqEventBus.ts"],
      sourcesContent: ["import { Connection, Message, Exchange, Queue } from 'amqp-ts';\nimport MessageName from '../../../common/message/MessageName';\nimport Logger from '../../../core/domain/Logger';\nimport WrapperExecutor from '../../../core/domain/WrapperExecutor';\nimport Executor from '../../../core/infrastructure/Executor';\nimport DomainEvent from '../../domain/DomainEvent';\nimport EventBus from '../../domain/EventBus';\nimport EventSubscriber from '../../domain/EventSubscriber';\nimport RabbitMqConfig from './RabbitMqConfig';\nimport { EventJsonDeserializer } from '../EventJsonDeserializer';\nimport { Mapper } from '../../../common/Mapper';\n\nexport default class RabbitMqEventbus implements EventBus {\n    private readonly executor: Executor<DomainEvent, void>;\n\n    private readonly connection: Connection;\n    private readonly exchange: Exchange;\n    private readonly queue: Queue;\n\n    constructor(\n        config: RabbitMqConfig,\n        private readonly domainEventSubscriberMapper: Mapper<MessageName, Array<EventSubscriber<DomainEvent>>>,\n        private readonly deserializer: EventJsonDeserializer,\n        private readonly logger: Logger,\n        executors: WrapperExecutor<DomainEvent, void>[] = [],\n    ) {\n        this.executor = new Executor<DomainEvent, void>(executors);\n\n        this.connection = new Connection(`amqp://${config.user}:${config.password}@${config.host}`);\n        this.exchange = this.connection.declareExchange(config.exchange, 'fanout', { durable: false });\n        this.queue = this.connection.declareQueue(config.queue);\n    }\n\n    async start(): Promise<void> {\n        if (!this.deserializer) {\n            throw new Error('RabbitMqEventBus has not being properly initialized, deserializer is missing');\n        }\n\n        await this.connection.completeConfiguration();\n\n        await this.queue.bind(this.exchange);\n        await this.queue.stopConsumer();\n        await this.queue.activateConsumer(\n            async(message) => {\n                try {\n                    const event = this.deserializer.deserialize(message.content.toString());\n                    if (event) {\n                        const subscribers = this.domainEventSubscriberMapper.search(event.name);\n                        if (subscribers) {\n                            const subscribersNames = subscribers.map((subscriber) => subscriber.constructor.name);\n                            this.logger.info(`[RabbitMqEventBus] Message processed: ${event.name.toString()} by ${subscribersNames.join(', ')}`);\n                            const subscribersExecutions = subscribers.map((subscriber) => {\n                                return this.executor.run(event, async () => subscriber.dispatch(event))\n                            });\n                            await Promise.all(subscribersExecutions);\n                        }\n                    }\n                    message.ack();\n                } catch (error) {\n                    message.reject()\n                }\n            },\n            { noAck: false }\n        );\n    }\n\n    async publish(events: Array<DomainEvent>): Promise<void> {\n        events.forEach((event) => {\n            const eventPrimitive = event.toPrimitive();\n            const message = new Message({\n                data: {\n                    ...eventPrimitive,\n                    meta: undefined,\n                },\n                meta: eventPrimitive.meta,\n            });\n            this.logger.info(`[RabbitMqEventBus] Event to be published: ${event.name.toString()}`);\n            this.exchange.send(message);\n        });\n    }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "96bfdb0ef6647f69f19229f3d332768fa55d45b3"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1rj8e6cfoj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1rj8e6cfoj();

var __awaiter =
/* istanbul ignore next */
(cov_1rj8e6cfoj().s[0]++,
/* istanbul ignore next */
(cov_1rj8e6cfoj().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1rj8e6cfoj().b[0][1]++, this.__awaiter) ||
/* istanbul ignore next */
(cov_1rj8e6cfoj().b[0][2]++, function (thisArg, _arguments, P, generator) {
  /* istanbul ignore next */
  cov_1rj8e6cfoj().f[0]++;

  function adopt(value) {
    /* istanbul ignore next */
    cov_1rj8e6cfoj().f[1]++;
    cov_1rj8e6cfoj().s[1]++;
    return value instanceof P ?
    /* istanbul ignore next */
    (cov_1rj8e6cfoj().b[1][0]++, value) :
    /* istanbul ignore next */
    (cov_1rj8e6cfoj().b[1][1]++, new P(function (resolve) {
      /* istanbul ignore next */
      cov_1rj8e6cfoj().f[2]++;
      cov_1rj8e6cfoj().s[2]++;
      resolve(value);
    }));
  }

  /* istanbul ignore next */
  cov_1rj8e6cfoj().s[3]++;
  return new (
  /* istanbul ignore next */
  (cov_1rj8e6cfoj().b[2][0]++, P) ||
  /* istanbul ignore next */
  (cov_1rj8e6cfoj().b[2][1]++, P = Promise))(function (resolve, reject) {
    /* istanbul ignore next */
    cov_1rj8e6cfoj().f[3]++;

    function fulfilled(value) {
      /* istanbul ignore next */
      cov_1rj8e6cfoj().f[4]++;
      cov_1rj8e6cfoj().s[4]++;

      try {
        /* istanbul ignore next */
        cov_1rj8e6cfoj().s[5]++;
        step(generator.next(value));
      } catch (e) {
        /* istanbul ignore next */
        cov_1rj8e6cfoj().s[6]++;
        reject(e);
      }
    }

    function rejected(value) {
      /* istanbul ignore next */
      cov_1rj8e6cfoj().f[5]++;
      cov_1rj8e6cfoj().s[7]++;

      try {
        /* istanbul ignore next */
        cov_1rj8e6cfoj().s[8]++;
        step(generator["throw"](value));
      } catch (e) {
        /* istanbul ignore next */
        cov_1rj8e6cfoj().s[9]++;
        reject(e);
      }
    }

    function step(result) {
      /* istanbul ignore next */
      cov_1rj8e6cfoj().f[6]++;
      cov_1rj8e6cfoj().s[10]++;
      result.done ?
      /* istanbul ignore next */
      (cov_1rj8e6cfoj().b[3][0]++, resolve(result.value)) :
      /* istanbul ignore next */
      (cov_1rj8e6cfoj().b[3][1]++, adopt(result.value).then(fulfilled, rejected));
    }

    /* istanbul ignore next */
    cov_1rj8e6cfoj().s[11]++;
    step((generator = generator.apply(thisArg,
    /* istanbul ignore next */
    (cov_1rj8e6cfoj().b[4][0]++, _arguments) ||
    /* istanbul ignore next */
    (cov_1rj8e6cfoj().b[4][1]++, []))).next());
  });
}));

var __importDefault =
/* istanbul ignore next */
(cov_1rj8e6cfoj().s[12]++,
/* istanbul ignore next */
(cov_1rj8e6cfoj().b[5][0]++, this) &&
/* istanbul ignore next */
(cov_1rj8e6cfoj().b[5][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1rj8e6cfoj().b[5][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1rj8e6cfoj().f[7]++;
  cov_1rj8e6cfoj().s[13]++;
  return (
    /* istanbul ignore next */
    (cov_1rj8e6cfoj().b[7][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1rj8e6cfoj().b[7][1]++, mod.__esModule) ?
    /* istanbul ignore next */
    (cov_1rj8e6cfoj().b[6][0]++, mod) :
    /* istanbul ignore next */
    (cov_1rj8e6cfoj().b[6][1]++, {
      "default": mod
    })
  );
}));

/* istanbul ignore next */
cov_1rj8e6cfoj().s[14]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const amqp_ts_1 =
/* istanbul ignore next */
(cov_1rj8e6cfoj().s[15]++, require("amqp-ts"));
const Executor_1 =
/* istanbul ignore next */
(cov_1rj8e6cfoj().s[16]++, __importDefault(require("../../../core/infrastructure/Executor")));

class RabbitMqEventbus {
  constructor(config, domainEventSubscriberMapper, deserializer, logger, executors =
  /* istanbul ignore next */
  (cov_1rj8e6cfoj().b[8][0]++, [])) {
    /* istanbul ignore next */
    cov_1rj8e6cfoj().f[8]++;
    cov_1rj8e6cfoj().s[17]++;
    this.domainEventSubscriberMapper = domainEventSubscriberMapper;

    /* istanbul ignore next */
    cov_1rj8e6cfoj().s[18]++;
    this.deserializer = deserializer;

    /* istanbul ignore next */
    cov_1rj8e6cfoj().s[19]++;
    this.logger = logger;

    /* istanbul ignore next */
    cov_1rj8e6cfoj().s[20]++;
    this.executor = new Executor_1.default(executors);

    /* istanbul ignore next */
    cov_1rj8e6cfoj().s[21]++;
    this.connection = new amqp_ts_1.Connection(`amqp://${config.user}:${config.password}@${config.host}`);

    /* istanbul ignore next */
    cov_1rj8e6cfoj().s[22]++;
    this.exchange = this.connection.declareExchange(config.exchange, 'fanout', {
      durable: false
    });

    /* istanbul ignore next */
    cov_1rj8e6cfoj().s[23]++;
    this.queue = this.connection.declareQueue(config.queue);
  }

  start() {
    /* istanbul ignore next */
    cov_1rj8e6cfoj().f[9]++;
    cov_1rj8e6cfoj().s[24]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1rj8e6cfoj().f[10]++;
      cov_1rj8e6cfoj().s[25]++;

      if (!this.deserializer) {
        /* istanbul ignore next */
        cov_1rj8e6cfoj().b[9][0]++;
        cov_1rj8e6cfoj().s[26]++;
        throw new Error('RabbitMqEventBus has not being properly initialized, deserializer is missing');
      } else
      /* istanbul ignore next */
      {
        cov_1rj8e6cfoj().b[9][1]++;
      }

      cov_1rj8e6cfoj().s[27]++;
      yield this.connection.completeConfiguration();

      /* istanbul ignore next */
      cov_1rj8e6cfoj().s[28]++;
      yield this.queue.bind(this.exchange);

      /* istanbul ignore next */
      cov_1rj8e6cfoj().s[29]++;
      yield this.queue.stopConsumer();

      /* istanbul ignore next */
      cov_1rj8e6cfoj().s[30]++;
      yield this.queue.activateConsumer((message) => {
        /* istanbul ignore next */
        cov_1rj8e6cfoj().f[11]++;
        cov_1rj8e6cfoj().s[31]++;
        return __awaiter(this, void 0, void 0, function* () {
          /* istanbul ignore next */
          cov_1rj8e6cfoj().f[12]++;
          cov_1rj8e6cfoj().s[32]++;

          try {
            const event =
            /* istanbul ignore next */
            (cov_1rj8e6cfoj().s[33]++, this.deserializer.deserialize(message.content.toString()));

            /* istanbul ignore next */
            cov_1rj8e6cfoj().s[34]++;

            if (event) {
              /* istanbul ignore next */
              cov_1rj8e6cfoj().b[10][0]++;
              const subscribers =
              /* istanbul ignore next */
              (cov_1rj8e6cfoj().s[35]++, this.domainEventSubscriberMapper.search(event.name));

              /* istanbul ignore next */
              cov_1rj8e6cfoj().s[36]++;

              if (subscribers) {
                /* istanbul ignore next */
                cov_1rj8e6cfoj().b[11][0]++;
                const subscribersNames =
                /* istanbul ignore next */
                (cov_1rj8e6cfoj().s[37]++, subscribers.map((subscriber) => {
                  /* istanbul ignore next */
                  cov_1rj8e6cfoj().f[13]++;
                  cov_1rj8e6cfoj().s[38]++;
                  return subscriber.constructor.name;
                }));

                /* istanbul ignore next */
                cov_1rj8e6cfoj().s[39]++;
                this.logger.info(`[RabbitMqEventBus] Message processed: ${event.name.toString()} by ${subscribersNames.join(', ')}`);
                const subscribersExecutions =
                /* istanbul ignore next */
                (cov_1rj8e6cfoj().s[40]++, subscribers.map((subscriber) => {
                  /* istanbul ignore next */
                  cov_1rj8e6cfoj().f[14]++;
                  cov_1rj8e6cfoj().s[41]++;
                  return this.executor.run(event, () => {
                    /* istanbul ignore next */
                    cov_1rj8e6cfoj().f[15]++;
                    cov_1rj8e6cfoj().s[42]++;
                    return __awaiter(this, void 0, void 0, function* () {
                      /* istanbul ignore next */
                      cov_1rj8e6cfoj().f[16]++;
                      cov_1rj8e6cfoj().s[43]++;
                      return subscriber.dispatch(event);
                    });
                  });
                }));

                /* istanbul ignore next */
                cov_1rj8e6cfoj().s[44]++;
                yield Promise.all(subscribersExecutions);
              } else
              /* istanbul ignore next */
              {
                cov_1rj8e6cfoj().b[11][1]++;
              }
            } else
            /* istanbul ignore next */
            {
              cov_1rj8e6cfoj().b[10][1]++;
            }

            cov_1rj8e6cfoj().s[45]++;
            message.ack();
          } catch (error) {
            /* istanbul ignore next */
            cov_1rj8e6cfoj().s[46]++;
            message.reject();
          }
        });
      }, {
        noAck: false
      });
    });
  }

  publish(events) {
    /* istanbul ignore next */
    cov_1rj8e6cfoj().f[17]++;
    cov_1rj8e6cfoj().s[47]++;
    return __awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1rj8e6cfoj().f[18]++;
      cov_1rj8e6cfoj().s[48]++;
      events.forEach((event) => {
        /* istanbul ignore next */
        cov_1rj8e6cfoj().f[19]++;
        const eventPrimitive =
        /* istanbul ignore next */
        (cov_1rj8e6cfoj().s[49]++, event.toPrimitive());
        const message =
        /* istanbul ignore next */
        (cov_1rj8e6cfoj().s[50]++, new amqp_ts_1.Message({
          data: Object.assign(Object.assign({}, eventPrimitive), {
            meta: undefined
          }),
          meta: eventPrimitive.meta
        }));

        /* istanbul ignore next */
        cov_1rj8e6cfoj().s[51]++;
        this.logger.info(`[RabbitMqEventBus] Event to be published: ${event.name.toString()}`);

        /* istanbul ignore next */
        cov_1rj8e6cfoj().s[52]++;
        this.exchange.send(message);
      });
    });
  }

}

/* istanbul ignore next */
cov_1rj8e6cfoj().s[53]++;
exports.default = RabbitMqEventbus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9jdWF0cm9vY2hlbnRhL01hZ2ljU2hvcHBlci9tYWdpY3Nob3BwZXItbm9kZS9zcmMvbWljcm9rL2V2ZW50L2luZnJhc3RydWN0dXJlL3JhYmJpdC1tcS9SYWJiaXRNcUV2ZW50QnVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QUFBLE9BQUosQ0FBWTtBQUN4QixVQUFBLElBQUksRUFBQSxNQUFBLENBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsRUFBQSxFQUNHLGNBREgsQ0FBQSxFQUNpQjtBQUNqQixZQUFBLElBQUksRUFBRTtBQURXLFdBRGpCLENBRG9CO0FBS3hCLFVBQUEsSUFBSSxFQUFFLGNBQWMsQ0FBQztBQUxHLFNBQVosQ0FBSCxDQUFiOztBQUZxQjtBQUFBO0FBU3JCLGFBQUssTUFBTCxDQUFZLElBQVosQ0FBaUIsNkNBQTZDLEtBQUssQ0FBQyxJQUFOLENBQVcsUUFBWCxFQUFxQixFQUFuRjs7QUFUcUI7QUFBQTtBQVVyQixhQUFLLFFBQUwsQ0FBYyxJQUFkLENBQW1CLE9BQW5CO0FBQ0gsT0FYRDtBQVlILEs7QUFBQTs7QUFuRWdDOzs7O0FBQXJDLE9BQUEsQ0FBQSxPQUFBLEdBQUEsZ0JBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25uZWN0aW9uLCBNZXNzYWdlLCBFeGNoYW5nZSwgUXVldWUgfSBmcm9tICdhbXFwLXRzJztcbmltcG9ydCBNZXNzYWdlTmFtZSBmcm9tICcuLi8uLi8uLi9jb21tb24vbWVzc2FnZS9NZXNzYWdlTmFtZSc7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4uLy4uLy4uL2NvcmUvZG9tYWluL0xvZ2dlcic7XG5pbXBvcnQgV3JhcHBlckV4ZWN1dG9yIGZyb20gJy4uLy4uLy4uL2NvcmUvZG9tYWluL1dyYXBwZXJFeGVjdXRvcic7XG5pbXBvcnQgRXhlY3V0b3IgZnJvbSAnLi4vLi4vLi4vY29yZS9pbmZyYXN0cnVjdHVyZS9FeGVjdXRvcic7XG5pbXBvcnQgRG9tYWluRXZlbnQgZnJvbSAnLi4vLi4vZG9tYWluL0RvbWFpbkV2ZW50JztcbmltcG9ydCBFdmVudEJ1cyBmcm9tICcuLi8uLi9kb21haW4vRXZlbnRCdXMnO1xuaW1wb3J0IEV2ZW50U3Vic2NyaWJlciBmcm9tICcuLi8uLi9kb21haW4vRXZlbnRTdWJzY3JpYmVyJztcbmltcG9ydCBSYWJiaXRNcUNvbmZpZyBmcm9tICcuL1JhYmJpdE1xQ29uZmlnJztcbmltcG9ydCB7IEV2ZW50SnNvbkRlc2VyaWFsaXplciB9IGZyb20gJy4uL0V2ZW50SnNvbkRlc2VyaWFsaXplcic7XG5pbXBvcnQgeyBNYXBwZXIgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vTWFwcGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFiYml0TXFFdmVudGJ1cyBpbXBsZW1lbnRzIEV2ZW50QnVzIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV4ZWN1dG9yOiBFeGVjdXRvcjxEb21haW5FdmVudCwgdm9pZD47XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbm5lY3Rpb246IENvbm5lY3Rpb247XG4gICAgcHJpdmF0ZSByZWFkb25seSBleGNoYW5nZTogRXhjaGFuZ2U7XG4gICAgcHJpdmF0ZSByZWFkb25seSBxdWV1ZTogUXVldWU7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgY29uZmlnOiBSYWJiaXRNcUNvbmZpZyxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkb21haW5FdmVudFN1YnNjcmliZXJNYXBwZXI6IE1hcHBlcjxNZXNzYWdlTmFtZSwgQXJyYXk8RXZlbnRTdWJzY3JpYmVyPERvbWFpbkV2ZW50Pj4+LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGRlc2VyaWFsaXplcjogRXZlbnRKc29uRGVzZXJpYWxpemVyLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTG9nZ2VyLFxuICAgICAgICBleGVjdXRvcnM6IFdyYXBwZXJFeGVjdXRvcjxEb21haW5FdmVudCwgdm9pZD5bXSA9IFtdLFxuICAgICkge1xuICAgICAgICB0aGlzLmV4ZWN1dG9yID0gbmV3IEV4ZWN1dG9yPERvbWFpbkV2ZW50LCB2b2lkPihleGVjdXRvcnMpO1xuXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG5ldyBDb25uZWN0aW9uKGBhbXFwOi8vJHtjb25maWcudXNlcn06JHtjb25maWcucGFzc3dvcmR9QCR7Y29uZmlnLmhvc3R9YCk7XG4gICAgICAgIHRoaXMuZXhjaGFuZ2UgPSB0aGlzLmNvbm5lY3Rpb24uZGVjbGFyZUV4Y2hhbmdlKGNvbmZpZy5leGNoYW5nZSwgJ2Zhbm91dCcsIHsgZHVyYWJsZTogZmFsc2UgfSk7XG4gICAgICAgIHRoaXMucXVldWUgPSB0aGlzLmNvbm5lY3Rpb24uZGVjbGFyZVF1ZXVlKGNvbmZpZy5xdWV1ZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICghdGhpcy5kZXNlcmlhbGl6ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmFiYml0TXFFdmVudEJ1cyBoYXMgbm90IGJlaW5nIHByb3Blcmx5IGluaXRpYWxpemVkLCBkZXNlcmlhbGl6ZXIgaXMgbWlzc2luZycpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5jb25uZWN0aW9uLmNvbXBsZXRlQ29uZmlndXJhdGlvbigpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucXVldWUuYmluZCh0aGlzLmV4Y2hhbmdlKTtcbiAgICAgICAgYXdhaXQgdGhpcy5xdWV1ZS5zdG9wQ29uc3VtZXIoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5xdWV1ZS5hY3RpdmF0ZUNvbnN1bWVyKFxuICAgICAgICAgICAgYXN5bmMobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5kZXNlcmlhbGl6ZXIuZGVzZXJpYWxpemUobWVzc2FnZS5jb250ZW50LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YnNjcmliZXJzID0gdGhpcy5kb21haW5FdmVudFN1YnNjcmliZXJNYXBwZXIuc2VhcmNoKGV2ZW50Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3Vic2NyaWJlcnNOYW1lcyA9IHN1YnNjcmliZXJzLm1hcCgoc3Vic2NyaWJlcikgPT4gc3Vic2NyaWJlci5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKGBbUmFiYml0TXFFdmVudEJ1c10gTWVzc2FnZSBwcm9jZXNzZWQ6ICR7ZXZlbnQubmFtZS50b1N0cmluZygpfSBieSAke3N1YnNjcmliZXJzTmFtZXMuam9pbignLCAnKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJzY3JpYmVyc0V4ZWN1dGlvbnMgPSBzdWJzY3JpYmVycy5tYXAoKHN1YnNjcmliZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhlY3V0b3IucnVuKGV2ZW50LCBhc3luYyAoKSA9PiBzdWJzY3JpYmVyLmRpc3BhdGNoKGV2ZW50KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChzdWJzY3JpYmVyc0V4ZWN1dGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYWNrKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yZWplY3QoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IG5vQWNrOiBmYWxzZSB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYXN5bmMgcHVibGlzaChldmVudHM6IEFycmF5PERvbWFpbkV2ZW50Pik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBldmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50UHJpbWl0aXZlID0gZXZlbnQudG9QcmltaXRpdmUoKTtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAuLi5ldmVudFByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgbWV0YTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWV0YTogZXZlbnRQcmltaXRpdmUubWV0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyhgW1JhYmJpdE1xRXZlbnRCdXNdIEV2ZW50IHRvIGJlIHB1Ymxpc2hlZDogJHtldmVudC5uYW1lLnRvU3RyaW5nKCl9YCk7XG4gICAgICAgICAgICB0aGlzLmV4Y2hhbmdlLnNlbmQobWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==