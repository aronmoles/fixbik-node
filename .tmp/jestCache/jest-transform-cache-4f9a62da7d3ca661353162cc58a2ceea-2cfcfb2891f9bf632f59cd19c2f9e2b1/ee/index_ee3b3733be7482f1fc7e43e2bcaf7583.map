{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/docs/openapi/index.ts","mappings":"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","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/docs/openapi/index.ts"],"sourcesContent":["import doctrine from 'doctrine';\nimport fs from 'fs';\nimport glob from 'glob';\nimport mergeWith from 'lodash.mergewith';\nimport { OpenAPIObject } from 'openapi3-ts';\nimport {\n    ComponentsObject,\n    ExternalDocumentationObject,\n    InfoObject,\n    PathsObject,\n    SecurityRequirementObject,\n    ServerObject,\n    TagObject,\n} from 'openapi3-ts/src/model/OpenApi';\nimport path from 'path';\nimport YAML from 'yaml';\n\nexport type OpenApiConfig = {\n    baseDir: string,\n    filesPattern: string,\n\n    info: InfoObject;\n    servers?: ServerObject[];\n    paths?: PathsObject;\n    components?: ComponentsObject;\n    security?: SecurityRequirementObject[];\n    tags?: TagObject[];\n    externalDocs?: ExternalDocumentationObject;\n}\n\nexport default class OpenApi {\n    private static DEFAULT_EXCLUDED_FOLDER = 'node_modules';\n    private static DEFAULT_GLOB_OPTIONS = { ignore: '**/node_modules/**' };\n    // eslint-disable-next-line prefer-named-capture-group\n    private static COMMENTS_PATTERN = /((\\/\\*\\*+[\\s\\S]*?\\*\\/)|(\\/\\*+.*\\*\\/)|^\\/\\/.*?[\\r\\n])[\\r\\n]*/gm;\n    private static BREAK_LINE = /\\n/g;\n\n    constructor(\n        private readonly config: OpenApiConfig,\n    ) {\n    }\n\n    private globFilesMatches = (\n        baseDir: string,\n        filesPattern: string,\n        excludedFolder: string = OpenApi.DEFAULT_EXCLUDED_FOLDER,\n    ) => {\n        try {\n            const files = glob.sync(path.resolve(baseDir, filesPattern), OpenApi.DEFAULT_GLOB_OPTIONS);\n            return files.filter((file) => !file.includes(excludedFolder));\n        } catch (error) {\n            throw new Error('Error Glob Files');\n        }\n    }\n\n    private readFile(filePath: string): string {\n        return fs.readFileSync(filePath).toString();\n    }\n\n    private readFiles(files: string[]): string[] {\n        if (!files || !Array.isArray(files)) {\n            return [];\n        }\n        return files.map((file) => this.readFile(file));\n    }\n\n\n    private getComments = (text) => {\n        const comments = text.match(OpenApi.COMMENTS_PATTERN);\n        if (comments) {\n            const filterComments = comments.filter((comment) => comment.match(OpenApi.BREAK_LINE));\n            return filterComments.map((comment) => comment.trim());\n        }\n        return [];\n    };\n\n    private getOnlyComments(fileContents: string[] = []) {\n        if (!Array.isArray(fileContents)) {\n            return [];\n        }\n        const comments = fileContents.map((comment) => {\n            const trimedComments = comment.trim();\n            return this.getComments(trimedComments);\n        });\n        return [].concat(...comments).filter((comment) => (comment[0] === '/' && comment[1] !== '/'));\n    }\n\n    private jsdocInfo(comments): any[] {\n        if (!comments || !Array.isArray(comments)) {\n            return [];\n        }\n        return comments.map((comment) => {\n            const jsDocComment = doctrine.parse(comment, { unwrap: true });\n            return jsDocComment;\n        });\n    }\n\n    private parseYamlComments(jsDoc: any[]) {\n        const yamlComments = []\n        for (const doc of jsDoc) {\n            for (const tag of doc.tags) {\n                if (tag.title === 'openapi') {\n                    yamlComments.push(tag.description)\n                }\n            }\n        }\n        return yamlComments;\n    }\n\n    private parseJsonCommentsFromYaml(yamlComments): object[] {\n        const jsons = []\n        for (const doc of yamlComments) {\n            const parsed = YAML.parseDocument(doc);\n\n            const anchors = parsed.anchors.getNames();\n            if (anchors.length) {\n                throw new Error('Error parsing YAML comments');\n            } else if (parsed.errors && parsed.errors.length) {\n                throw new Error('Error parsing YAML comments');\n            } else {\n                jsons.push(parsed.toJSON());\n            }\n        }\n        return jsons;\n    }\n\n    private mergeDeep(first, second) {\n        return mergeWith({}, first, second, (x, y) => (y === null ? x : undefined));\n    }\n\n    private removeEmptyKeys(obj) {\n        if (!obj) {\n            return {};\n        }\n        Object.keys(obj).forEach((key) => {\n            if (obj[key] === undefined) {\n                delete obj[key];\n            }\n        });\n        return obj;\n    }\n\n    generateDocs(): OpenAPIObject {\n        const files = this.globFilesMatches(this.config.baseDir, this.config.filesPattern);\n        const fileContents = this.readFiles(files);\n        const comments = this.getOnlyComments(fileContents);\n        const jsDocInfo = this.jsdocInfo(comments)\n        const yamlComments = this.parseYamlComments(jsDocInfo)\n        const jsonComments = this.parseJsonCommentsFromYaml(yamlComments)\n\n        const openApi: OpenAPIObject = this.removeEmptyKeys({\n            openapi: '3.0.0',\n            info: this.config.info,\n            servers: this.config.servers,\n            paths: this.config.paths || {},\n            components: {\n                ...this.config.components,\n                schemas: this.config.components.schemas || {},\n            },\n            security: this.config.security,\n            tags: this.config.tags,\n            externalDocs: this.config.externalDocs,\n        });\n\n        for (const jsonComment of jsonComments) {\n            for (const key of Object.keys(jsonComment)) {\n                if (key.startsWith('/')) {\n                    openApi.paths[key] = this.mergeDeep(openApi.paths[key], jsonComment[key]);\n                } else {\n                    openApi.components.schemas[key] = jsonComment[key];\n                }\n            }\n        }\n\n        return openApi;\n    }\n}\n"],"version":3}