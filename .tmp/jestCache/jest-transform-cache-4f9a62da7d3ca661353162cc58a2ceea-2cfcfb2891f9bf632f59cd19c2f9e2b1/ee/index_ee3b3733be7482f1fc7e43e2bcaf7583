a7bb83a38df9765642e3fbfe18e21af3
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const doctrine_1 = __importDefault(require("doctrine"));
const fs_1 = __importDefault(require("fs"));
const glob_1 = __importDefault(require("glob"));
const lodash_mergewith_1 = __importDefault(require("lodash.mergewith"));
const path_1 = __importDefault(require("path"));
const yaml_1 = __importDefault(require("yaml"));
class OpenApi {
    constructor(config) {
        this.config = config;
        this.globFilesMatches = (baseDir, filesPattern, excludedFolder = OpenApi.DEFAULT_EXCLUDED_FOLDER) => {
            try {
                const files = glob_1.default.sync(path_1.default.resolve(baseDir, filesPattern), OpenApi.DEFAULT_GLOB_OPTIONS);
                return files.filter((file) => !file.includes(excludedFolder));
            }
            catch (error) {
                throw new Error('Error Glob Files');
            }
        };
        this.getComments = (text) => {
            const comments = text.match(OpenApi.COMMENTS_PATTERN);
            if (comments) {
                const filterComments = comments.filter((comment) => comment.match(OpenApi.BREAK_LINE));
                return filterComments.map((comment) => comment.trim());
            }
            return [];
        };
    }
    readFile(filePath) {
        return fs_1.default.readFileSync(filePath).toString();
    }
    readFiles(files) {
        if (!files || !Array.isArray(files)) {
            return [];
        }
        return files.map((file) => this.readFile(file));
    }
    getOnlyComments(fileContents = []) {
        if (!Array.isArray(fileContents)) {
            return [];
        }
        const comments = fileContents.map((comment) => {
            const trimedComments = comment.trim();
            return this.getComments(trimedComments);
        });
        return [].concat(...comments).filter((comment) => (comment[0] === '/' && comment[1] !== '/'));
    }
    jsdocInfo(comments) {
        if (!comments || !Array.isArray(comments)) {
            return [];
        }
        return comments.map((comment) => {
            const jsDocComment = doctrine_1.default.parse(comment, { unwrap: true });
            return jsDocComment;
        });
    }
    parseYamlComments(jsDoc) {
        const yamlComments = [];
        for (const doc of jsDoc) {
            for (const tag of doc.tags) {
                if (tag.title === 'openapi') {
                    yamlComments.push(tag.description);
                }
            }
        }
        return yamlComments;
    }
    parseJsonCommentsFromYaml(yamlComments) {
        const jsons = [];
        for (const doc of yamlComments) {
            const parsed = yaml_1.default.parseDocument(doc);
            const anchors = parsed.anchors.getNames();
            if (anchors.length) {
                throw new Error('Error parsing YAML comments');
            }
            else if (parsed.errors && parsed.errors.length) {
                throw new Error('Error parsing YAML comments');
            }
            else {
                jsons.push(parsed.toJSON());
            }
        }
        return jsons;
    }
    mergeDeep(first, second) {
        return (0, lodash_mergewith_1.default)({}, first, second, (x, y) => (y === null ? x : undefined));
    }
    removeEmptyKeys(obj) {
        if (!obj) {
            return {};
        }
        Object.keys(obj).forEach((key) => {
            if (obj[key] === undefined) {
                delete obj[key];
            }
        });
        return obj;
    }
    generateDocs() {
        const files = this.globFilesMatches(this.config.baseDir, this.config.filesPattern);
        const fileContents = this.readFiles(files);
        const comments = this.getOnlyComments(fileContents);
        const jsDocInfo = this.jsdocInfo(comments);
        const yamlComments = this.parseYamlComments(jsDocInfo);
        const jsonComments = this.parseJsonCommentsFromYaml(yamlComments);
        const openApi = this.removeEmptyKeys({
            openapi: '3.0.0',
            info: this.config.info,
            servers: this.config.servers,
            paths: this.config.paths || {},
            components: Object.assign(Object.assign({}, this.config.components), { schemas: this.config.components.schemas || {} }),
            security: this.config.security,
            tags: this.config.tags,
            externalDocs: this.config.externalDocs,
        });
        for (const jsonComment of jsonComments) {
            for (const key of Object.keys(jsonComment)) {
                if (key.startsWith('/')) {
                    openApi.paths[key] = this.mergeDeep(openApi.paths[key], jsonComment[key]);
                }
                else {
                    openApi.components.schemas[key] = jsonComment[key];
                }
            }
        }
        return openApi;
    }
}
exports.default = OpenApi;
OpenApi.DEFAULT_EXCLUDED_FOLDER = 'node_modules';
OpenApi.DEFAULT_GLOB_OPTIONS = { ignore: '**/node_modules/**' };
// eslint-disable-next-line prefer-named-capture-group
OpenApi.COMMENTS_PATTERN = /((\/\*\*+[\s\S]*?\*\/)|(\/\*+.*\*\/)|^\/\/.*?[\r\n])[\r\n]*/gm;
OpenApi.BREAK_LINE = /\n/g;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,