{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/modules/auth/application/search-by-email/AuthUserSearchByEmail.ts"],"names":[],"mappingskCAAA,CAAA,CAAA;AACA,MAAA,QAAA;AAAA;AAAA,2BAAA,OAAA,CAAA,gCAAA,CAAA,CAAA;AACA,MAAA,aAAA;AAAA;AAAA,2BAAA,OAAA,CAAA,qCAAA,CAAA,CAAA;AACA,MAAA,gBAAA;AAAA;AAAA,2BAAA,OAAA,CAAA,wCAAA,CAAA,CAAA;AACA,MAAA,SAAA;AAAA;AAAA,2BAAA,OAAA,CAAA,iCAAA,CAAA,CAAA;AACA,MAAA,aAAA;AAAA;AAAA,2BAAA,OAAA,CAAA,qCAAA,CAAA,CAAA;AACA,MAAA,OAAA;AAAA;AAAA,2BAAA,OAAA,CAAA,+BAAA,CAAA,CAAA;AACA,MAAA,mBAAA;AAAA;AAAA,2BAAA,eAAA,CAAA,OAAA,CAAA,8CAAA,CAAA,CAAA,CAAA;;AAKA,MAAqB,qBAArB,CAA0C;AACtC,EAAA,WAAA,CACqB,kBADrB,EAC2D;AAAA;AAAA;AAAA;AAAtC,SAAA,kBAAA,GAAA,kBAAA;AAEpB;;AAEY,EAAA,MAAM,CAAC,KAAD,EAAqB;AAAA;AAAA;AAAA;;;;AACpC,YAAM,QAAQ;AAAA;AAAA,iCAAG,KAAK,aAAL,CAAmB,KAAnB,CAAH,CAAd;AACA,YAAM,QAAQ;AAAA;AAAA,iCAAG,MAAM,KAAK,kBAAL,CAAwB,mBAAxB,CAA4C,QAA5C,CAAT,CAAd;;;;;AAEA,UAAI,CAAC,QAAL,EAAe;AAAA;AAAA;AAAA;AACX,cAAM,IAAI,mBAAA,CAAA,OAAJ,CAAsB,8BAA8B,KAAK,CAAC,QAAN,EAAgB,GAApE,CAAN;AACH,OAFD;AAAA;AAAA;AAAA;AAAA;;;AAIA,aAAO,QAAP;AACH,K;AAAA;;AAEO,EAAA,aAAa,CAAC,KAAD,EAAqB;AAAA;AAAA;AAAA;AACtC,WAAO,IAAI,UAAA,CAAA,QAAJ,CACH,IAAI,SAAA,CAAA,OAAJ,CAAY,CAAC,IAAI,QAAA,CAAA,MAAJ,CACT,IAAI,aAAA,CAAA,WAAJ,CAAgB,OAAhB,CADS,EAET,gBAAA,CAAA,cAAA,CAAe,KAAf,EAFS,EAGT,IAAI,aAAA,CAAA,WAAJ,CAAgB,KAAK,CAAC,QAAN,EAAhB,CAHS,CAAD,CAAZ,CADG,EAMH,OAAA,CAAA,KAAA,CAAM,IAAN,EANG,CAAP;AAQH;;AA1BqC;;;;AAA1C,OAAA,CAAA,OAAA,GAAA,qBAAA","sourcesContent":["import { Criteria } from '@microk/common/criteria/Criteria';\nimport { Filter } from '@microk/common/criteria/Filter';\nimport { FilterField } from '@microk/common/criteria/FilterField';\nimport { FilterOperator } from '@microk/common/criteria/FilterOperator';\nimport { Filters } from '@microk/common/criteria/Filters';\nimport { FilterValue } from '@microk/common/criteria/FilterValue';\nimport { Order } from '@microk/common/criteria/Order';\nimport NotFoundHttpError from '@microk/common/http/errors/NotFoundHttpError';\nimport { AuthUser } from '../../domain/AuthUser';\nimport AuthUserEmail from '../../domain/AuthUserEmail';\nimport { AuthUserRepository } from '../../domain/AuthUserRepository';\n\nexport default class AuthUserSearchByEmail {\n    constructor(\n        private readonly authUserRepository: AuthUserRepository,\n    ) {\n    }\n\n    public async search(email: AuthUserEmail): Promise<NonNullable<AuthUser>> {\n        const criteria = this.buildCriteria(email)\n        const authUser = await this.authUserRepository.searchOneByCriteria(criteria);\n\n        if (!authUser) {\n            throw new NotFoundHttpError(`Not found user with email <${email.toString()}>`)\n        }\n\n        return authUser;\n    }\n\n    private buildCriteria(email: AuthUserEmail) {\n        return new Criteria(\n            new Filters([new Filter(\n                new FilterField('email'),\n                FilterOperator.equal(),\n                new FilterValue(email.toString()),\n            )]),\n            Order.none(),\n        );\n    }\n}\n"]}