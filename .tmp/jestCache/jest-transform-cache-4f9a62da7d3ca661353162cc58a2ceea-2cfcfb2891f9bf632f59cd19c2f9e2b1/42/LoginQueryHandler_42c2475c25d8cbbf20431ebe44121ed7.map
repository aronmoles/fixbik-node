{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/modules/auth/application/login/LoginQueryHandler.ts"],"names":[],"mappingscAAA;AAAA;AAAA,2BAAA,OAAA,CAAA,wCAAA,CAAA,CAAA;AACA,MAAA,YAAA;AAAA;AAAA,2BAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA,CAAA;;AAIA,MAAqB,iBAArB;AAAA;AAAA,CAA+C,cAAA,CAAA,YAA/C,EAA2F;AACvF,EAAA,WAAA,CACqB,YADrB,EAC+C;AAAA;AAAA;AAAA;AAE3C,UAAM,YAAA,CAAA,OAAN;;AAF2C;AAAA;AAA1B,SAAA,YAAA,GAAA,YAAA;AAGpB;;AAEK,EAAA,MAAM,CAAC,KAAD,EAAkB;AAAA;AAAA;AAAA;;;;AAC1B,YAAM,SAAS;AAAA;AAAA,iCAAG,MAAM,KAAK,YAAL,CAAkB,GAAlB,CAAsB,KAAK,CAAC,KAA5B,EAAmC,KAAK,CAAC,QAAzC,CAAT,CAAf;;;;AACA,aAAO;AACH,QAAA,SAAS,EAAE,SAAS,CAAC,QAAV;AADR,OAAP;AAGH,K;AAAA;;AAZsF;;;;AAA3F,OAAA,CAAA,OAAA,GAAA,iBAAA","sourcesContent":["import { QueryHandler } from '@microk/cqrs/domain/query/QueryHandler';\nimport LoginQuery from './LoginQuery';\nimport LoginQueryResponse from './LoginQueryResponse';\nimport LoginService from './LoginService';\n\nexport default class LoginQueryHandler extends QueryHandler<LoginQuery, LoginQueryResponse> {\n    constructor(\n        private readonly loginService: LoginService,\n    ) {\n        super(LoginQuery);\n    }\n\n    async handle(query: LoginQuery): Promise<LoginQueryResponse> {\n        const authToken = await this.loginService.run(query.email, query.password);\n        return {\n            authToken: authToken.toString(),\n        };\n    }\n}\n"]}