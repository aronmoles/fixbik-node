{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/tests/infrastructure/typeorm/TypeOrmEnvironmentArranger.ts","mappings":";;;;;;;;;;;;AACA,0EAAuE;AAEvE,MAAa,0BAA2B,SAAQ,yCAAmB;IAC/D,YAAoB,OAA4B;QAC5C,KAAK,EAAE,CAAC;QADQ,YAAO,GAAP,OAAO,CAAqB;IAEhD,CAAC;IAEY,OAAO;;YAChB,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAC/B,CAAC;KAAA;IAEe,aAAa;;YACzB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YAEvC,IAAI;gBACA,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;oBAC3B,MAAM,UAAU,GAAG,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACpE,MAAM,UAAU,CAAC,KAAK,CAAC,kBAAkB,MAAM,CAAC,SAAS,GAAG,CAAC,CAAC;iBACjE;aACJ;YAAC,OAAO,KAAK,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,kCAAkC,KAAK,EAAE,CAAC,CAAC;aAC9D;QACL,CAAC;KAAA;IAEa,QAAQ;;YAClB,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,eAAe,CAAC;QACjD,CAAC;KAAA;IAES,MAAM;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAEY,KAAK;;YACd,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;QACzC,CAAC;KAAA;CACJ;AAjCD,gEAiCC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/tests/infrastructure/typeorm/TypeOrmEnvironmentArranger.ts"],"sourcesContent":["import { Connection, EntityMetadata } from 'typeorm';\nimport { EnvironmentArranger } from '../../domain/EnvironmentArranger';\n\nexport class TypeOrmEnvironmentArranger extends EnvironmentArranger {\n    constructor(private _client: Promise<Connection>) {\n        super();\n    }\n\n    public async arrange(): Promise<void> {\n        await this.cleanDatabase();\n    }\n\n    protected async cleanDatabase(): Promise<void> {\n        const entities = await this.entities();\n\n        try {\n            for (const entity of entities) {\n                const repository = (await this.client()).getRepository(entity.name);\n                await repository.query(`TRUNCATE TABLE ${entity.tableName};`);\n            }\n        } catch (error) {\n            throw new Error(`Unable to clean test database: ${error}`);\n        }\n    }\n\n    private async entities(): Promise<EntityMetadata[]> {\n        return (await this.client()).entityMetadatas;\n    }\n\n    protected client(): Promise<Connection> {\n        return this._client;\n    }\n\n    public async close(): Promise<void> {\n        return (await this.client()).close();\n    }\n}\n"],"version":3}