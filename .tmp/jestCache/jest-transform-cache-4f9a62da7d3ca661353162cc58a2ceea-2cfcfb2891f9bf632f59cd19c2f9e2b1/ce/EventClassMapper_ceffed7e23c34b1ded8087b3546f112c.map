{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/event/infrastructure/EventClassMapper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBoB;;;;;;;;;;;;;;;;;;AAhBpB,MAAa,gBAAb,CAA6B;AAGzB,EAAA,WAAA,CAAY,OAAZ,EAAmD;AAAA;AAAA;AAAA;AAC/C,SAAK,OAAL,GAAe,OAAO,CAAC,MAAR,CAAe,KAAK,eAAL,EAAf,EAAuC,IAAI,GAAJ,EAAvC,CAAf;AACH;;AAEO,EAAA,eAAe,GAAA;AAAA;AAAA;AAAA;AACnB,WAAO,CAAC,GAAD,EAAe,UAAf,KAA2D;AAAA;AAAA;AAAA;AAC9D,MAAA,UAAU,CAAC,YAAX,GAA0B,OAA1B,CAAkC,CAAC,gBAAD,KAAqB;AAAA;AAAA;AAAA;AACnD,QAAA,GAAG,CAAC,GAAJ,CAAQ,gBAAgB,CAAC,UAAjB,CAA4B,KAA5B,EAAR,EAA6C,gBAA7C;AACH,OAFD;;AAD8D;AAAA;AAI9D,aAAO,GAAP;AACH,KALD;AAMH;;AAED,EAAA,GAAG,CAAC,IAAD,EAAa;AAAA;AAAA;AACZ,UAAM,WAAW;AAAA;AAAA,8BAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAjB,CAAH,CAAjB;;AADY;AAAA;;AAGZ,QAAI,CAAC,WAAL,EAAkB;AAAA;AAAA;AAAA;AACd,aAAO,SAAP;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;;AAHY;AAOZ,WAAO,WAAP;AACH;;AAxBwB;;;;AAA7B,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["import { Optional } from '../../common/Optional';\nimport DomainEvent, { DomainEventClass } from '../domain/DomainEvent';\nimport EventSubscriber from '../domain/EventSubscriber';\n\ntype Mapping = Map<string, DomainEventClass>;\n\nexport class EventClassMapper {\n    private mapping: Mapping;\n\n    constructor(mapping: EventSubscriber<DomainEvent>[]) {\n        this.mapping = mapping.reduce(this.eventsExtractor(), new Map<string, DomainEventClass>());\n    }\n\n    private eventsExtractor() {\n        return (map: Mapping, subscriber: EventSubscriber<DomainEvent>) => {\n            subscriber.subscribedTo().forEach((domainEventClass) => {\n                map.set(domainEventClass.EVENT_NAME.value(), domainEventClass);\n            });\n            return map;\n        };\n    }\n\n    for(name: string): Optional<DomainEventClass> {\n        const domainEvent = this.mapping.get(name);\n\n        if (!domainEvent) {\n            return undefined;\n        }\n\n        return domainEvent;\n    }\n}\n"]}