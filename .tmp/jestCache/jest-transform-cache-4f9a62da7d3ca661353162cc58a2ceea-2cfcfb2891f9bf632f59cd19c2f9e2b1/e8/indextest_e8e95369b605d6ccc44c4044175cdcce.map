{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/docs/openapi/index.test.ts","mappings":";;;;;;;;;;;;;;AAAA,oDAA8B;AAE9B,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;IACrB,EAAE,CAAC,kCAAkC,EAAE,GAAS,EAAE;QAC9C,MAAM,OAAO,GAAG,IAAI,eAAO,CAAC;YACxB,OAAO,EAAE,GAAG,SAAS,WAAW;YAChC,YAAY,EAAE,QAAQ;YACtB,IAAI,EAAE;gBACF,KAAK,EAAE,MAAM;gBACb,OAAO,EAAE,OAAO;gBAChB,WAAW,EAAE,YAAY;gBACzB,OAAO,EAAE;oBACL,IAAI,EAAE,KAAK;iBACd;aACJ;YACD,UAAU,EAAE;gBACR,eAAe,EAAE;oBACb,GAAG,EAAE;wBACD,IAAI,EAAE,MAAM;wBACZ,MAAM,EAAE,QAAQ;wBAChB,YAAY,EAAE,KAAK;qBACtB;iBACJ;aACJ;SACJ,CAAC,CAAA;QAEF,MAAM,UAAU,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;QAE1C,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;YACvB,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE;gBACF,OAAO,EAAE,OAAO;gBAChB,KAAK,EAAE,SAAS;aACnB;YACD,KAAK,EAAE;gBACH,eAAe,EAAE;oBACb,IAAI,EAAE;wBACF,WAAW,EAAE,QAAQ;wBACrB,IAAI,EAAE;4BACF,MAAM;yBACT;wBACD,OAAO,EAAE,6BAA6B;wBACtC,WAAW,EAAE,EAAE;wBACf,QAAQ,EAAE;4BACN;gCACI,GAAG,EAAE,EAAE;6BACV;yBACJ;wBACD,WAAW,EAAE;4BACT,WAAW,EAAE,+BAA+B;4BAC5C,QAAQ,EAAE,IAAI;4BACd,OAAO,EAAE;gCACL,kBAAkB,EAAE;oCAChB,MAAM,EAAE;wCACJ,IAAI,EAAE,mCAAmC;qCAC5C;iCACJ;6BACJ;yBACJ;wBACD,SAAS,EAAE;4BACP,GAAG,EAAE;gCACD,WAAW,EAAE,wEAAwE;gCACrF,OAAO,EAAE;oCACL,kBAAkB,EAAE;wCAChB,MAAM,EAAE;4CACJ,IAAI,EAAE,mCAAmC;yCAC5C;qCACJ;iCACJ;6BACJ;4BACD,GAAG,EAAE;gCACD,WAAW,EAAE,aAAa;gCAC1B,OAAO,EAAE;oCACL,kBAAkB,EAAE;wCAChB,MAAM,EAAE;4CACJ,IAAI,EAAE,4BAA4B;yCACrC;qCACJ;iCACJ;6BACJ;yBACJ;qBACJ;iBACJ;aACJ;YACD,UAAU,EAAE;gBACR,eAAe,EAAE;oBACb,GAAG,EAAE;wBACD,IAAI,EAAE,MAAM;wBACZ,MAAM,EAAE,QAAQ;wBAChB,YAAY,EAAE,KAAK;qBACtB;iBACJ;gBACD,OAAO,EAAE;oBACL,KAAK,EAAE;wBACH,IAAI,EAAE,QAAQ;wBACd,UAAU,EAAE;4BACR,OAAO,EAAE;gCACL,IAAI,EAAE,QAAQ;6BACjB;4BACD,IAAI,EAAE;gCACF,IAAI,EAAE,SAAS;gCACf,OAAO,EAAE,GAAG;6BACf;yBACJ;qBACJ;oBACD,YAAY,EAAE;wBACV,IAAI,EAAE,QAAQ;wBACd,QAAQ,EAAE;4BACN,YAAY;yBACf;wBACD,UAAU,EAAE;4BACR,UAAU,EAAE;gCACR,IAAI,EAAE,QAAQ;6BACjB;4BACD,oBAAoB,EAAE;gCAClB,IAAI,EAAE,QAAQ;6BACjB;4BACD,kBAAkB,EAAE;gCAChB,IAAI,EAAE,QAAQ;6BACjB;4BACD,UAAU,EAAE;gCACR,IAAI,EAAE,QAAQ;6BACjB;yBACJ;qBACJ;iBACJ;aACJ;SACJ,CAAC,CAAA;IACN,CAAC,CAAA,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/docs/openapi/index.test.ts"],"sourcesContent":["import OpenApi from './index';\n\ndescribe('OpenApi', () => {\n    it('should create a valid auth token', async () => {\n        const openApi = new OpenApi({\n            baseDir: `${__dirname}/examples`,\n            filesPattern: './*.ts',\n            info: {\n                title: 'Test',\n                version: '1.0.0',\n                description: 'Public API',\n                license: {\n                    name: 'MIT',\n                },\n            },\n            components: {\n                securitySchemes: {\n                    jwt: {\n                        type: 'http',\n                        scheme: 'bearer',\n                        bearerFormat: 'JWT',\n                    },\n                },\n            },\n        })\n\n        const openApiDoc = openApi.generateDocs();\n\n        expect(openApiDoc).toEqual({\n            openapi: '3.0.0',\n            info: {\n                version: '1.0.0',\n                title: 'FixBike',\n            },\n            paths: {\n                '/notification': {\n                    post: {\n                        operationId: 'addJob',\n                        tags: [\n                            'jobs',\n                        ],\n                        summary: 'Creates a new notification.',\n                        description: '',\n                        security: [\n                            {\n                                jwt: [],\n                            },\n                        ],\n                        requestBody: {\n                            description: 'Notification object to create',\n                            required: true,\n                            content: {\n                                'application/json': {\n                                    schema: {\n                                        $ref: '#/components/schemas/Notification',\n                                    },\n                                },\n                            },\n                        },\n                        responses: {\n                            201: {\n                                description: 'Successful operation. The notification has been created on the server.',\n                                content: {\n                                    'application/json': {\n                                        schema: {\n                                            $ref: '#/components/schemas/Notification',\n                                        },\n                                    },\n                                },\n                            },\n                            400: {\n                                description: 'Bad Request',\n                                content: {\n                                    'application/json': {\n                                        schema: {\n                                            $ref: '#/components/schemas/Error',\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            components: {\n                securitySchemes: {\n                    jwt: {\n                        type: 'http',\n                        scheme: 'bearer',\n                        bearerFormat: 'JWT',\n                    },\n                },\n                schemas: {\n                    Error: {\n                        type: 'object',\n                        properties: {\n                            message: {\n                                type: 'string',\n                            },\n                            code: {\n                                type: 'integer',\n                                example: 404,\n                            },\n                        },\n                    },\n                    Notification: {\n                        type: 'object',\n                        required: [\n                            'serviceUrl',\n                        ],\n                        properties: {\n                            serviceUrl: {\n                                type: 'string',\n                            },\n                            authenticationHeader: {\n                                type: 'string',\n                            },\n                            certificateSubject: {\n                                type: 'string',\n                            },\n                            parameters: {\n                                type: 'string',\n                            },\n                        },\n                    },\n                },\n            },\n        })\n    });\n});\n"],"version":3}