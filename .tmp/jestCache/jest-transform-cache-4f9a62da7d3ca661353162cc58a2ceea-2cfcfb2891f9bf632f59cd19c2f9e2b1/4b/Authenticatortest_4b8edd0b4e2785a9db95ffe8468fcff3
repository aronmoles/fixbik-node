179a9327c7dc2069f55af1fc1cb5ad1d
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const NotFoundHttpError_1 = __importDefault(require("@microk/common/http/errors/NotFoundHttpError"));
const UnauthorizedHttpError_1 = __importDefault(require("@microk/common/http/errors/UnauthorizedHttpError"));
const AuthenticateQueryHandler_1 = __importDefault(require("../../../../src/modules/auth/application/login/AuthenticateQueryHandler"));
const Authenticator_1 = __importDefault(require("../../../../src/modules/auth/application/login/Authenticator"));
const EventBusMock_1 = __importDefault(require("../../shared/__mocks__/EventBusMock"));
const AuthTokenRepositoryMock_1 = __importDefault(require("../__mocks__/AuthTokenRepositoryMock"));
const AuthUserRepositoryMock_1 = __importDefault(require("../__mocks__/AuthUserRepositoryMock"));
const AuthUserMother_1 = __importDefault(require("../domain/AuthUserMother"));
const AuthenticateQueryMother_1 = __importDefault(require("./AuthenticateQueryMother"));
let authUserRepository;
let authTokenRepository;
let eventBus;
let authenticateQueryHandler;
beforeEach(() => {
    authTokenRepository = new AuthTokenRepositoryMock_1.default();
    authUserRepository = new AuthUserRepositoryMock_1.default();
    eventBus = new EventBusMock_1.default();
    authenticateQueryHandler = new AuthenticateQueryHandler_1.default(new Authenticator_1.default(authUserRepository, authTokenRepository, eventBus));
});
describe('Authenticator', () => {
    it('should create a valid auth token', () => __awaiter(void 0, void 0, void 0, function* () {
        const query = AuthenticateQueryMother_1.default.random();
        const authUser = AuthUserMother_1.default.fromQuery(query);
        authUserRepository.mockReturn(authUser);
        const authToken = yield authenticateQueryHandler.handle(query);
        expect(authToken.toString()).toBeDefined();
        eventBus.hasBeenPublishedEvent();
    }));
    it('should throw NotFoundError if user not exists', () => __awaiter(void 0, void 0, void 0, function* () {
        const query = AuthenticateQueryMother_1.default.random();
        authUserRepository.mockReturn(null);
        yield expect(() => __awaiter(void 0, void 0, void 0, function* () {
            yield authenticateQueryHandler.handle(query);
        })).rejects.toThrow(NotFoundHttpError_1.default);
    }));
    it('should throw UnauthorizedHttpError if user credentials are invalid', () => __awaiter(void 0, void 0, void 0, function* () {
        const query = AuthenticateQueryMother_1.default.random();
        const authUser = AuthUserMother_1.default.random();
        authUserRepository.mockReturn(authUser);
        yield expect(() => __awaiter(void 0, void 0, void 0, function* () {
            yield authenticateQueryHandler.handle(query);
        })).rejects.toThrow(UnauthorizedHttpError_1.default);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3Rlc3RzL21vZHVsZXMvYXV0aC9hcHBsaWNhdGlvbi9BdXRoZW50aWNhdG9yLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxR0FBNkU7QUFDN0UsNkdBQXFGO0FBRXJGLHVJQUErRztBQUMvRyxpSEFBeUY7QUFFekYsdUZBQStEO0FBQy9ELG1HQUEyRTtBQUMzRSxpR0FBeUU7QUFDekUsOEVBQXNEO0FBQ3RELHdGQUFnRTtBQUVoRSxJQUFJLGtCQUEwQyxDQUFDO0FBQy9DLElBQUksbUJBQXdDLENBQUM7QUFDN0MsSUFBSSxRQUFzQixDQUFDO0FBQzNCLElBQUksd0JBQWtELENBQUM7QUFFdkQsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNaLG1CQUFtQixHQUFHLElBQUksaUNBQXVCLEVBQUUsQ0FBQztJQUNwRCxrQkFBa0IsR0FBRyxJQUFJLGdDQUFzQixFQUFFLENBQUM7SUFDbEQsUUFBUSxHQUFHLElBQUksc0JBQVksRUFBRSxDQUFDO0lBQzlCLHdCQUF3QixHQUFHLElBQUksa0NBQXdCLENBQ25ELElBQUksdUJBQWEsQ0FBQyxrQkFBa0IsRUFBRSxtQkFBbUIsRUFBRSxRQUFRLENBQUMsQ0FDdkUsQ0FBQztBQUNOLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDM0IsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEdBQVMsRUFBRTtRQUM5QyxNQUFNLEtBQUssR0FBRyxpQ0FBdUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMvQyxNQUFNLFFBQVEsR0FBRyx3QkFBYyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFeEMsTUFBTSxTQUFTLEdBQUcsTUFBTSx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFL0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzNDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ3JDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUUsR0FBUyxFQUFFO1FBQzNELE1BQU0sS0FBSyxHQUFHLGlDQUF1QixDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQy9DLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVwQyxNQUFNLE1BQU0sQ0FBQyxHQUFTLEVBQUU7WUFDcEIsTUFBTSx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLDJCQUFpQixDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvRUFBb0UsRUFBRSxHQUFTLEVBQUU7UUFDaEYsTUFBTSxLQUFLLEdBQUcsaUNBQXVCLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDL0MsTUFBTSxRQUFRLEdBQUcsd0JBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN6QyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFeEMsTUFBTSxNQUFNLENBQUMsR0FBUyxFQUFFO1lBQ3BCLE1BQU0sd0JBQXdCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELENBQUMsQ0FBQSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQywrQkFBcUIsQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvY3VhdHJvb2NoZW50YS9NYWdpY1Nob3BwZXIvbWFnaWNzaG9wcGVyLW5vZGUvdGVzdHMvbW9kdWxlcy9hdXRoL2FwcGxpY2F0aW9uL0F1dGhlbnRpY2F0b3IudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTm90Rm91bmRIdHRwRXJyb3IgZnJvbSAnQG1pY3Jvay9jb21tb24vaHR0cC9lcnJvcnMvTm90Rm91bmRIdHRwRXJyb3InO1xuaW1wb3J0IFVuYXV0aG9yaXplZEh0dHBFcnJvciBmcm9tICdAbWljcm9rL2NvbW1vbi9odHRwL2Vycm9ycy9VbmF1dGhvcml6ZWRIdHRwRXJyb3InO1xuaW1wb3J0IEV2ZW50QnVzIGZyb20gJ0BtaWNyb2svZXZlbnQvZG9tYWluL0V2ZW50QnVzJztcbmltcG9ydCBBdXRoZW50aWNhdGVRdWVyeUhhbmRsZXIgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXV0aC9hcHBsaWNhdGlvbi9sb2dpbi9BdXRoZW50aWNhdGVRdWVyeUhhbmRsZXInO1xuaW1wb3J0IEF1dGhlbnRpY2F0b3IgZnJvbSAnLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXV0aC9hcHBsaWNhdGlvbi9sb2dpbi9BdXRoZW50aWNhdG9yJztcbmltcG9ydCBBdXRoVG9rZW5SZXBvc2l0b3J5IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2F1dGgvZG9tYWluL0F1dGhUb2tlblJlcG9zaXRvcnknO1xuaW1wb3J0IEV2ZW50QnVzTW9jayBmcm9tICcuLi8uLi9zaGFyZWQvX19tb2Nrc19fL0V2ZW50QnVzTW9jayc7XG5pbXBvcnQgQXV0aFRva2VuUmVwb3NpdG9yeU1vY2sgZnJvbSAnLi4vX19tb2Nrc19fL0F1dGhUb2tlblJlcG9zaXRvcnlNb2NrJztcbmltcG9ydCBBdXRoVXNlclJlcG9zaXRvcnlNb2NrIGZyb20gJy4uL19fbW9ja3NfXy9BdXRoVXNlclJlcG9zaXRvcnlNb2NrJztcbmltcG9ydCBBdXRoVXNlck1vdGhlciBmcm9tICcuLi9kb21haW4vQXV0aFVzZXJNb3RoZXInO1xuaW1wb3J0IEF1dGhlbnRpY2F0ZVF1ZXJ5TW90aGVyIGZyb20gJy4vQXV0aGVudGljYXRlUXVlcnlNb3RoZXInO1xuXG5sZXQgYXV0aFVzZXJSZXBvc2l0b3J5OiBBdXRoVXNlclJlcG9zaXRvcnlNb2NrO1xubGV0IGF1dGhUb2tlblJlcG9zaXRvcnk6IEF1dGhUb2tlblJlcG9zaXRvcnk7XG5sZXQgZXZlbnRCdXM6IEV2ZW50QnVzTW9jaztcbmxldCBhdXRoZW50aWNhdGVRdWVyeUhhbmRsZXI6IEF1dGhlbnRpY2F0ZVF1ZXJ5SGFuZGxlcjtcblxuYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgYXV0aFRva2VuUmVwb3NpdG9yeSA9IG5ldyBBdXRoVG9rZW5SZXBvc2l0b3J5TW9jaygpO1xuICAgIGF1dGhVc2VyUmVwb3NpdG9yeSA9IG5ldyBBdXRoVXNlclJlcG9zaXRvcnlNb2NrKCk7XG4gICAgZXZlbnRCdXMgPSBuZXcgRXZlbnRCdXNNb2NrKCk7XG4gICAgYXV0aGVudGljYXRlUXVlcnlIYW5kbGVyID0gbmV3IEF1dGhlbnRpY2F0ZVF1ZXJ5SGFuZGxlcihcbiAgICAgICAgbmV3IEF1dGhlbnRpY2F0b3IoYXV0aFVzZXJSZXBvc2l0b3J5LCBhdXRoVG9rZW5SZXBvc2l0b3J5LCBldmVudEJ1cyksXG4gICAgKTtcbn0pO1xuXG5kZXNjcmliZSgnQXV0aGVudGljYXRvcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhIHZhbGlkIGF1dGggdG9rZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gQXV0aGVudGljYXRlUXVlcnlNb3RoZXIucmFuZG9tKCk7XG4gICAgICAgIGNvbnN0IGF1dGhVc2VyID0gQXV0aFVzZXJNb3RoZXIuZnJvbVF1ZXJ5KHF1ZXJ5KTtcbiAgICAgICAgYXV0aFVzZXJSZXBvc2l0b3J5Lm1vY2tSZXR1cm4oYXV0aFVzZXIpO1xuXG4gICAgICAgIGNvbnN0IGF1dGhUb2tlbiA9IGF3YWl0IGF1dGhlbnRpY2F0ZVF1ZXJ5SGFuZGxlci5oYW5kbGUocXVlcnkpO1xuXG4gICAgICAgIGV4cGVjdChhdXRoVG9rZW4udG9TdHJpbmcoKSkudG9CZURlZmluZWQoKTtcbiAgICAgICAgZXZlbnRCdXMuaGFzQmVlblB1Ymxpc2hlZEV2ZW50KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IE5vdEZvdW5kRXJyb3IgaWYgdXNlciBub3QgZXhpc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBxdWVyeSA9IEF1dGhlbnRpY2F0ZVF1ZXJ5TW90aGVyLnJhbmRvbSgpO1xuICAgICAgICBhdXRoVXNlclJlcG9zaXRvcnkubW9ja1JldHVybihudWxsKTtcblxuICAgICAgICBhd2FpdCBleHBlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgYXV0aGVudGljYXRlUXVlcnlIYW5kbGVyLmhhbmRsZShxdWVyeSk7XG4gICAgICAgIH0pLnJlamVjdHMudG9UaHJvdyhOb3RGb3VuZEh0dHBFcnJvcik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IFVuYXV0aG9yaXplZEh0dHBFcnJvciBpZiB1c2VyIGNyZWRlbnRpYWxzIGFyZSBpbnZhbGlkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBxdWVyeSA9IEF1dGhlbnRpY2F0ZVF1ZXJ5TW90aGVyLnJhbmRvbSgpO1xuICAgICAgICBjb25zdCBhdXRoVXNlciA9IEF1dGhVc2VyTW90aGVyLnJhbmRvbSgpO1xuICAgICAgICBhdXRoVXNlclJlcG9zaXRvcnkubW9ja1JldHVybihhdXRoVXNlcik7XG5cbiAgICAgICAgYXdhaXQgZXhwZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IGF1dGhlbnRpY2F0ZVF1ZXJ5SGFuZGxlci5oYW5kbGUocXVlcnkpO1xuICAgICAgICB9KS5yZWplY3RzLnRvVGhyb3coVW5hdXRob3JpemVkSHR0cEVycm9yKTtcbiAgICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9