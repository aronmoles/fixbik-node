2baff5f1ded7b94c1c2b9576151f1da4
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeOrmAuthUserRepository = void 0;
const TypeOrmRepository_1 = require("@microk/persistence/infrastructure/typeorm/TypeOrmRepository");
const AuthUserEntity_1 = require("./typeorm/AuthUserEntity");
class TypeOrmAuthUserRepository extends TypeOrmRepository_1.TypeOrmRepository {
    entitySchema() {
        return AuthUserEntity_1.AuthUserEntity;
    }
    save(course) {
        return this.persist(course);
    }
    search(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const repository = yield this.repository();
            const authUser = yield repository.findOne({ id });
            return authUser;
        });
    }
    customSearch() {
        return __awaiter(this, void 0, void 0, function* () {
            const repository = yield this.repository();
            const authUser = yield repository.findOne({
                where: {
                    email: 'amoles@pav.com',
                },
            });
            return authUser;
        });
    }
}
exports.TypeOrmAuthUserRepository = TypeOrmAuthUserRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9tb2R1bGVzL2F1dGgvaW5mcmFzdHJ1Y3R1cmUvcGVyc2lzdGVuY2UvVHlwZU9ybUF1dGhVc2VyUmVwb3NpdG9yeS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQSxvR0FBaUc7QUFLakcsNkRBQTBEO0FBRTFELE1BQWEseUJBQTBCLFNBQVEscUNBQTJCO0lBQzVELFlBQVk7UUFDbEIsT0FBTywrQkFBYyxDQUFDO0lBQzFCLENBQUM7SUFFTSxJQUFJLENBQUMsTUFBZ0I7UUFDeEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFWSxNQUFNLENBQUMsRUFBYzs7WUFDOUIsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFFM0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUVsRCxPQUFPLFFBQVEsQ0FBQztRQUNwQixDQUFDO0tBQUE7SUFFSyxZQUFZOztZQUNkLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQzNDLE1BQU0sUUFBUSxHQUFHLE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQztnQkFDdEMsS0FBSyxFQUFFO29CQUNILEtBQUssRUFBRSxnQkFBZ0I7aUJBQzFCO2FBQ0osQ0FBQyxDQUFBO1lBQ0YsT0FBTyxRQUFRLENBQUM7UUFDcEIsQ0FBQztLQUFBO0NBQ0o7QUExQkQsOERBMEJDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9jdWF0cm9vY2hlbnRhL01hZ2ljU2hvcHBlci9tYWdpY3Nob3BwZXItbm9kZS9zcmMvbW9kdWxlcy9hdXRoL2luZnJhc3RydWN0dXJlL3BlcnNpc3RlbmNlL1R5cGVPcm1BdXRoVXNlclJlcG9zaXRvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICdAbWljcm9rL2NvbW1vbi9OdWxsYWJsZSc7XG5pbXBvcnQgeyBUeXBlT3JtUmVwb3NpdG9yeSB9IGZyb20gJ0BtaWNyb2svcGVyc2lzdGVuY2UvaW5mcmFzdHJ1Y3R1cmUvdHlwZW9ybS9UeXBlT3JtUmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBFbnRpdHlTY2hlbWEgfSBmcm9tICd0eXBlb3JtJztcbmltcG9ydCB7IEF1dGhVc2VyIH0gZnJvbSAnLi4vLi4vZG9tYWluL0F1dGhVc2VyJztcbmltcG9ydCBBdXRoVXNlcklkIGZyb20gJy4uLy4uL2RvbWFpbi9BdXRoVXNlcklkJztcbmltcG9ydCB7IEF1dGhVc2VyUmVwb3NpdG9yeSB9IGZyb20gJy4uLy4uL2RvbWFpbi9BdXRoVXNlclJlcG9zaXRvcnknO1xuaW1wb3J0IHsgQXV0aFVzZXJFbnRpdHkgfSBmcm9tICcuL3R5cGVvcm0vQXV0aFVzZXJFbnRpdHknO1xuXG5leHBvcnQgY2xhc3MgVHlwZU9ybUF1dGhVc2VyUmVwb3NpdG9yeSBleHRlbmRzIFR5cGVPcm1SZXBvc2l0b3J5PEF1dGhVc2VyPiBpbXBsZW1lbnRzIEF1dGhVc2VyUmVwb3NpdG9yeSB7XG4gICAgcHJvdGVjdGVkIGVudGl0eVNjaGVtYSgpOiBFbnRpdHlTY2hlbWE8QXV0aFVzZXI+IHtcbiAgICAgICAgcmV0dXJuIEF1dGhVc2VyRW50aXR5O1xuICAgIH1cblxuICAgIHB1YmxpYyBzYXZlKGNvdXJzZTogQXV0aFVzZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdChjb3Vyc2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzZWFyY2goaWQ6IEF1dGhVc2VySWQpOiBQcm9taXNlPE51bGxhYmxlPEF1dGhVc2VyPj4ge1xuICAgICAgICBjb25zdCByZXBvc2l0b3J5ID0gYXdhaXQgdGhpcy5yZXBvc2l0b3J5KCk7XG5cbiAgICAgICAgY29uc3QgYXV0aFVzZXIgPSBhd2FpdCByZXBvc2l0b3J5LmZpbmRPbmUoeyBpZCB9KTtcblxuICAgICAgICByZXR1cm4gYXV0aFVzZXI7XG4gICAgfVxuXG4gICAgYXN5bmMgY3VzdG9tU2VhcmNoKCk6IFByb21pc2U8TnVsbGFibGU8QXV0aFVzZXI+PiB7XG4gICAgICAgIGNvbnN0IHJlcG9zaXRvcnkgPSBhd2FpdCB0aGlzLnJlcG9zaXRvcnkoKTtcbiAgICAgICAgY29uc3QgYXV0aFVzZXIgPSBhd2FpdCByZXBvc2l0b3J5LmZpbmRPbmUoe1xuICAgICAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICAgICAgICBlbWFpbDogJ2Ftb2xlc0BwYXYuY29tJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBhdXRoVXNlcjtcbiAgICB9XG59XG4iXSwidmVyc2lvbiI6M30=