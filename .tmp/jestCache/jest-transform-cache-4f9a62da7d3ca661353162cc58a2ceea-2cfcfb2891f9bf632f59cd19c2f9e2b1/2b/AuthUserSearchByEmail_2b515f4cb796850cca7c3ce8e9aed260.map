{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/modules/auth/application/search-by-email/AuthUserSearchByEmail.ts","mappings":";;;;;;;;;;;;;;AAAA,+DAA4D;AAC5D,2DAAwD;AACxD,qEAAkE;AAClE,2EAAwE;AACxE,6DAA0D;AAC1D,qEAAkE;AAClE,yDAAsD;AACtD,qGAA6E;AAK7E,MAAqB,qBAAqB;IACtC,YACqB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;IAE3D,CAAC;IAEY,MAAM,CAAC,KAAoB;;YACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;YAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YAE7E,IAAI,CAAC,QAAQ,EAAE;gBACX,MAAM,IAAI,2BAAiB,CAAC,8BAA8B,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA;aACjF;YAED,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IAEO,aAAa,CAAC,KAAoB;QACtC,OAAO,IAAI,mBAAQ,CACf,IAAI,iBAAO,CAAC,CAAC,IAAI,eAAM,CACnB,IAAI,yBAAW,CAAC,OAAO,CAAC,EACxB,+BAAc,CAAC,KAAK,EAAE,EACtB,IAAI,yBAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CACpC,CAAC,CAAC,EACH,aAAK,CAAC,IAAI,EAAE,CACf,CAAC;IACN,CAAC;CACJ;AA3BD,wCA2BC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/modules/auth/application/search-by-email/AuthUserSearchByEmail.ts"],"sourcesContent":["import { Criteria } from '@microk/common/criteria/Criteria';\nimport { Filter } from '@microk/common/criteria/Filter';\nimport { FilterField } from '@microk/common/criteria/FilterField';\nimport { FilterOperator } from '@microk/common/criteria/FilterOperator';\nimport { Filters } from '@microk/common/criteria/Filters';\nimport { FilterValue } from '@microk/common/criteria/FilterValue';\nimport { Order } from '@microk/common/criteria/Order';\nimport NotFoundHttpError from '@microk/common/http/errors/NotFoundHttpError';\nimport { AuthUser } from '../../domain/AuthUser';\nimport AuthUserEmail from '../../domain/AuthUserEmail';\nimport { AuthUserRepository } from '../../domain/AuthUserRepository';\n\nexport default class AuthUserSearchByEmail {\n    constructor(\n        private readonly authUserRepository: AuthUserRepository,\n    ) {\n    }\n\n    public async search(email: AuthUserEmail): Promise<NonNullable<AuthUser>> {\n        const criteria = this.buildCriteria(email)\n        const authUser = await this.authUserRepository.searchOneByCriteria(criteria);\n\n        if (!authUser) {\n            throw new NotFoundHttpError(`Not found user with email <${email.toString()}>`)\n        }\n\n        return authUser;\n    }\n\n    private buildCriteria(email: AuthUserEmail) {\n        return new Criteria(\n            new Filters([new Filter(\n                new FilterField('email'),\n                FilterOperator.equal(),\n                new FilterValue(email.toString()),\n            )]),\n            Order.none(),\n        );\n    }\n}\n"],"version":3}