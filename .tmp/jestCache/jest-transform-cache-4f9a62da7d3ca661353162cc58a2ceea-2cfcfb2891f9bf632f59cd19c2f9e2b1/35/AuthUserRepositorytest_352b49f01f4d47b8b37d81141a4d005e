f6c32d69c50cbe023bc6ba0f58082e53
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Container_1 = __importDefault(require("../../../../../src/app/Container"));
const AuthUserMother_1 = __importDefault(require("../../domain/AuthUserMother"));
const repository = Container_1.default.get('Auth.domain.AuthUserRepository');
const environmentArranger = Container_1.default.get('Test.EnvironmentArranger');
beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
    yield (yield environmentArranger).arrange();
}));
afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
    yield (yield environmentArranger).arrange();
    yield (yield environmentArranger).close();
}));
describe('AuthUserRepository', () => {
    describe('#save', () => {
        it('should save a auth user and search by id', () => __awaiter(void 0, void 0, void 0, function* () {
            const authUser = AuthUserMother_1.default.random();
            yield repository.save(authUser);
            const authUserResponse = yield repository.search(authUser.id);
            expect(authUserResponse).toEqual(authUser);
        }));
    });
    describe('#searchOneByCriteria', () => {
        it('should save a auth user and search by criteria', () => __awaiter(void 0, void 0, void 0, function* () {
            const authUser = AuthUserMother_1.default.random();
            yield repository.save(authUser);
            // const criteria = new Criteria(
            //     new Filters([new Filter(
            //         new FilterField('email'),
            //         FilterOperator.equal(),
            //         new FilterValue(authUser.email.toString()),
            //     )]),
            //     Order.none(),
            // )
            // const authUserResponse = await repository.searchOneByCriteria(criteria);
            //
            // expect(authUserResponse).toEqual(authUser)
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3Rlc3RzL21vZHVsZXMvYXV0aC9pbmZyYXN0cnVjdHVyZS9wZXJzaXN0ZW5jZS9BdXRoVXNlclJlcG9zaXRvcnkudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUNBLGlGQUF5RDtBQUV6RCxpRkFBeUQ7QUFFekQsTUFBTSxVQUFVLEdBQXVCLG1CQUFTLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDdkYsTUFBTSxtQkFBbUIsR0FBd0IsbUJBQVMsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUUzRixVQUFVLENBQUMsR0FBUyxFQUFFO0lBQ2xCLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDaEQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxHQUFTLEVBQUU7SUFDaEIsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM1QyxNQUFNLENBQUMsTUFBTSxtQkFBbUIsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzlDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO0lBQ2hDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1FBQ25CLEVBQUUsQ0FBQywwQ0FBMEMsRUFBRSxHQUFTLEVBQUU7WUFDdEQsTUFBTSxRQUFRLEdBQUcsd0JBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUV6QyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRTlELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM5QyxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1FBQ2xDLEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxHQUFTLEVBQUU7WUFDNUQsTUFBTSxRQUFRLEdBQUcsd0JBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN6QyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFaEMsaUNBQWlDO1lBQ2pDLCtCQUErQjtZQUMvQixvQ0FBb0M7WUFDcEMsa0NBQWtDO1lBQ2xDLHNEQUFzRDtZQUN0RCxXQUFXO1lBQ1gsb0JBQW9CO1lBQ3BCLElBQUk7WUFDSiwyRUFBMkU7WUFDM0UsRUFBRTtZQUNGLDZDQUE2QztRQUNqRCxDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvY3VhdHJvb2NoZW50YS9NYWdpY1Nob3BwZXIvbWFnaWNzaG9wcGVyLW5vZGUvdGVzdHMvbW9kdWxlcy9hdXRoL2luZnJhc3RydWN0dXJlL3BlcnNpc3RlbmNlL0F1dGhVc2VyUmVwb3NpdG9yeS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudmlyb25tZW50QXJyYW5nZXIgfSBmcm9tICdAbWljcm9rL3Rlc3RzL2RvbWFpbi9FbnZpcm9ubWVudEFycmFuZ2VyJztcbmltcG9ydCBDb250YWluZXIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9Db250YWluZXInO1xuaW1wb3J0IHsgQXV0aFVzZXJSZXBvc2l0b3J5IH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXV0aC9kb21haW4vQXV0aFVzZXJSZXBvc2l0b3J5JztcbmltcG9ydCBBdXRoVXNlck1vdGhlciBmcm9tICcuLi8uLi9kb21haW4vQXV0aFVzZXJNb3RoZXInO1xuXG5jb25zdCByZXBvc2l0b3J5OiBBdXRoVXNlclJlcG9zaXRvcnkgPSBDb250YWluZXIuZ2V0KCdBdXRoLmRvbWFpbi5BdXRoVXNlclJlcG9zaXRvcnknKTtcbmNvbnN0IGVudmlyb25tZW50QXJyYW5nZXI6IEVudmlyb25tZW50QXJyYW5nZXIgPSBDb250YWluZXIuZ2V0KCdUZXN0LkVudmlyb25tZW50QXJyYW5nZXInKTtcblxuYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgKGF3YWl0IGVudmlyb25tZW50QXJyYW5nZXIpLmFycmFuZ2UoKTtcbn0pO1xuXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgKGF3YWl0IGVudmlyb25tZW50QXJyYW5nZXIpLmFycmFuZ2UoKTtcbiAgICBhd2FpdCAoYXdhaXQgZW52aXJvbm1lbnRBcnJhbmdlcikuY2xvc2UoKTtcbn0pO1xuXG5kZXNjcmliZSgnQXV0aFVzZXJSZXBvc2l0b3J5JywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCcjc2F2ZScsICgpID0+IHtcbiAgICAgICAgaXQoJ3Nob3VsZCBzYXZlIGEgYXV0aCB1c2VyIGFuZCBzZWFyY2ggYnkgaWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdXRoVXNlciA9IEF1dGhVc2VyTW90aGVyLnJhbmRvbSgpO1xuXG4gICAgICAgICAgICBhd2FpdCByZXBvc2l0b3J5LnNhdmUoYXV0aFVzZXIpO1xuICAgICAgICAgICAgY29uc3QgYXV0aFVzZXJSZXNwb25zZSA9IGF3YWl0IHJlcG9zaXRvcnkuc2VhcmNoKGF1dGhVc2VyLmlkKTtcblxuICAgICAgICAgICAgZXhwZWN0KGF1dGhVc2VyUmVzcG9uc2UpLnRvRXF1YWwoYXV0aFVzZXIpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJyNzZWFyY2hPbmVCeUNyaXRlcmlhJywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIHNhdmUgYSBhdXRoIHVzZXIgYW5kIHNlYXJjaCBieSBjcml0ZXJpYScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGF1dGhVc2VyID0gQXV0aFVzZXJNb3RoZXIucmFuZG9tKCk7XG4gICAgICAgICAgICBhd2FpdCByZXBvc2l0b3J5LnNhdmUoYXV0aFVzZXIpO1xuXG4gICAgICAgICAgICAvLyBjb25zdCBjcml0ZXJpYSA9IG5ldyBDcml0ZXJpYShcbiAgICAgICAgICAgIC8vICAgICBuZXcgRmlsdGVycyhbbmV3IEZpbHRlcihcbiAgICAgICAgICAgIC8vICAgICAgICAgbmV3IEZpbHRlckZpZWxkKCdlbWFpbCcpLFxuICAgICAgICAgICAgLy8gICAgICAgICBGaWx0ZXJPcGVyYXRvci5lcXVhbCgpLFxuICAgICAgICAgICAgLy8gICAgICAgICBuZXcgRmlsdGVyVmFsdWUoYXV0aFVzZXIuZW1haWwudG9TdHJpbmcoKSksXG4gICAgICAgICAgICAvLyAgICAgKV0pLFxuICAgICAgICAgICAgLy8gICAgIE9yZGVyLm5vbmUoKSxcbiAgICAgICAgICAgIC8vIClcbiAgICAgICAgICAgIC8vIGNvbnN0IGF1dGhVc2VyUmVzcG9uc2UgPSBhd2FpdCByZXBvc2l0b3J5LnNlYXJjaE9uZUJ5Q3JpdGVyaWEoY3JpdGVyaWEpO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIGV4cGVjdChhdXRoVXNlclJlc3BvbnNlKS50b0VxdWFsKGF1dGhVc2VyKVxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9