{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/tests/modules/auth/infrastructure/persistence/AuthUserRepository.test.ts","mappings":";;;;;;;;;;;;;;AACA,iFAAyD;AAEzD,iFAAyD;AAEzD,MAAM,UAAU,GAAuB,mBAAS,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;AACvF,MAAM,mBAAmB,GAAwB,mBAAS,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;AAE3F,UAAU,CAAC,GAAS,EAAE;IAClB,MAAM,CAAC,MAAM,mBAAmB,CAAC,CAAC,OAAO,EAAE,CAAC;AAChD,CAAC,CAAA,CAAC,CAAC;AAEH,QAAQ,CAAC,GAAS,EAAE;IAChB,MAAM,CAAC,MAAM,mBAAmB,CAAC,CAAC,OAAO,EAAE,CAAC;IAC5C,MAAM,CAAC,MAAM,mBAAmB,CAAC,CAAC,KAAK,EAAE,CAAC;AAC9C,CAAC,CAAA,CAAC,CAAC;AAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAChC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACnB,EAAE,CAAC,0CAA0C,EAAE,GAAS,EAAE;YACtD,MAAM,QAAQ,GAAG,wBAAc,CAAC,MAAM,EAAE,CAAC;YAEzC,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChC,MAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAE9D,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QAC9C,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,gDAAgD,EAAE,GAAS,EAAE;YAC5D,MAAM,QAAQ,GAAG,wBAAc,CAAC,MAAM,EAAE,CAAC;YACzC,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEhC,iCAAiC;YACjC,+BAA+B;YAC/B,oCAAoC;YACpC,kCAAkC;YAClC,sDAAsD;YACtD,WAAW;YACX,oBAAoB;YACpB,IAAI;YACJ,2EAA2E;YAC3E,EAAE;YACF,6CAA6C;QACjD,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/tests/modules/auth/infrastructure/persistence/AuthUserRepository.test.ts"],"sourcesContent":["import { EnvironmentArranger } from '@microk/tests/domain/EnvironmentArranger';\nimport Container from '../../../../../src/app/Container';\nimport { AuthUserRepository } from '../../../../../src/modules/auth/domain/AuthUserRepository';\nimport AuthUserMother from '../../domain/AuthUserMother';\n\nconst repository: AuthUserRepository = Container.get('Auth.domain.AuthUserRepository');\nconst environmentArranger: EnvironmentArranger = Container.get('Test.EnvironmentArranger');\n\nbeforeEach(async () => {\n    await (await environmentArranger).arrange();\n});\n\nafterAll(async () => {\n    await (await environmentArranger).arrange();\n    await (await environmentArranger).close();\n});\n\ndescribe('AuthUserRepository', () => {\n    describe('#save', () => {\n        it('should save a auth user and search by id', async () => {\n            const authUser = AuthUserMother.random();\n\n            await repository.save(authUser);\n            const authUserResponse = await repository.search(authUser.id);\n\n            expect(authUserResponse).toEqual(authUser)\n        });\n    });\n\n    describe('#searchOneByCriteria', () => {\n        it('should save a auth user and search by criteria', async () => {\n            const authUser = AuthUserMother.random();\n            await repository.save(authUser);\n\n            // const criteria = new Criteria(\n            //     new Filters([new Filter(\n            //         new FilterField('email'),\n            //         FilterOperator.equal(),\n            //         new FilterValue(authUser.email.toString()),\n            //     )]),\n            //     Order.none(),\n            // )\n            // const authUserResponse = await repository.searchOneByCriteria(criteria);\n            //\n            // expect(authUserResponse).toEqual(authUser)\n        });\n    });\n});\n"],"version":3}