{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/cqrs/infrastructure/command/CommandHandlersMapper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBkB;;;;;;;;;;;;;;;;;AAnBlB,MAAA,2BAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,gDAAA,CAAA,CAAA;;AAEA,MAAa,qBAAb,CAAkC;AAG9B,EAAA,WAAA,CAAY,eAAZ,EAA2D;AAAA;AAAA;AAAA;AACvD,SAAK,kBAAL,GAA0B,KAAK,cAAL,CAAoB,eAApB,CAA1B;AACH;;AAEO,EAAA,cAAc,CAAC,eAAD,EAAgD;AAAA;AAAA;AAClE,UAAM,WAAW;AAAA;AAAA,8BAAG,IAAI,GAAJ,EAAH,CAAjB;;AADkE;AAAA;AAGlE,IAAA,eAAe,CAAC,OAAhB,CAAwB,CAAC,cAAD,KAAmB;AAAA;AAAA;AAAA;AACvC,MAAA,WAAW,CAAC,GAAZ,CAAgB,cAAc,CAAC,YAAf,EAAhB,EAA+C,cAA/C;AACH,KAFD;;AAHkE;AAAA;AAOlE,WAAO,WAAP;AACH;;AAEM,EAAA,MAAM,CAAC,OAAD,EAAiB;AAAA;AAAA;AAC1B,UAAM,cAAc;AAAA;AAAA,8BAAG,KAAK,kBAAL,CAAwB,GAAxB,CAA4B,OAAO,CAAC,WAAR,CAAoB,IAAhD,CAAH,CAApB;;AAD0B;AAAA;;AAG1B,QAAI,CAAC,cAAL,EAAqB;AAAA;AAAA;AAAA;AACjB,YAAM,IAAI,2BAAA,CAAA,yBAAJ,CAA8B,OAA9B,CAAN;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;;AAH0B;AAO1B,WAAO,cAAP;AACH;;AAzB6B;;;;AAAlC,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourcesContent":["import { Mapper } from '../../../common/Mapper';\nimport Command from '../../domain/command/Command';\nimport CommandHandler from '../../domain/command/CommandHandler';\nimport { CommandNotRegisteredError } from '../../domain/command/CommandNotRegisteredError';\n\nexport class CommandHandlersMapper implements Mapper<Command, CommandHandler<Command>> {\n    private commandHandlersMap: Map<string, CommandHandler<Command>>;\n\n    constructor(commandHandlers: Array<CommandHandler<Command>>) {\n        this.commandHandlersMap = this.formatHandlers(commandHandlers);\n    }\n\n    private formatHandlers(commandHandlers: Array<CommandHandler<Command>>): Map<string, CommandHandler<Command>> {\n        const handlersMap = new Map();\n\n        commandHandlers.forEach((commandHandler) => {\n            handlersMap.set(commandHandler.subscribedTo(), commandHandler);\n        });\n\n        return handlersMap;\n    }\n\n    public search(command: Command): CommandHandler<Command> {\n        const commandHandler = this.commandHandlersMap.get(command.constructor.name);\n\n        if (!commandHandler) {\n            throw new CommandNotRegisteredError(command);\n        }\n\n        return commandHandler;\n    }\n}\n"]}