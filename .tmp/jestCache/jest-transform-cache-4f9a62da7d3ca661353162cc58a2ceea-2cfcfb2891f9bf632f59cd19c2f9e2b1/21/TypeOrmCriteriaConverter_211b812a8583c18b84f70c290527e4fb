edaaed279ee8fb7f0a9743f26eb6552a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typeorm_1 = require("typeorm");
const FilterOperator_1 = require("../../../common/criteria/FilterOperator");
class TypeOrmCriteriaConverter {
    convert(criteria) {
        const options = {};
        if (criteria.hasOrder()) {
            options.order = {
                name: criteria.order.orderBy.value(),
                id: criteria.order.orderType.value(),
            };
        }
        if (criteria.hasPagination()) {
            options.skip = criteria.offset;
            options.take = criteria.limit;
        }
        if (criteria.hasFilters()) {
            options.where = {};
            for (const filter of criteria.filters.filters) {
                options.where[filter.field.value()] = this.buildWhereCondition(filter);
            }
        }
        return options;
    }
    buildWhereCondition(filter) {
        switch (filter.operator.value()) {
            case FilterOperator_1.Operator.EQUAL:
                return (0, typeorm_1.Equal)(filter.value);
            case FilterOperator_1.Operator.NOT_EQUAL:
                return (0, typeorm_1.Not)((0, typeorm_1.Equal)(filter.value));
            case FilterOperator_1.Operator.GT:
                return (0, typeorm_1.MoreThan)(filter.value);
            case FilterOperator_1.Operator.GT_OR_EQUAL:
                return (0, typeorm_1.MoreThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LT:
                return (0, typeorm_1.LessThan)(filter.value);
            case FilterOperator_1.Operator.LT_OR_EQUAL:
                return (0, typeorm_1.LessThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LIKE:
                return (0, typeorm_1.Like)(filter.value);
            // case Operator.CONTAINS:
            //     return In<string>(filter.value);
            default:
                return filter.value;
        }
    }
}
exports.default = TypeOrmCriteriaConverter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9taWNyb2svcGVyc2lzdGVuY2UvaW5mcmFzdHJ1Y3R1cmUvdHlwZW9ybS9UeXBlT3JtQ3JpdGVyaWFDb252ZXJ0ZXIudHMiLCJtYXBwaW5ncyI6Ijs7QUFDQSxxQ0FBaUc7QUFJakcsNEVBQW1FO0FBRW5FLE1BQXFCLHdCQUF3QjtJQUNsQyxPQUFPLENBQUMsUUFBa0I7UUFDN0IsTUFBTSxPQUFPLEdBQTZCLEVBQUUsQ0FBQztRQUU3QyxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNyQixPQUFPLENBQUMsS0FBSyxHQUFHO2dCQUNaLElBQUksRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ3BDLEVBQUUsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUU7YUFDdkMsQ0FBQztTQUNMO1FBRUQsSUFBSSxRQUFRLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDMUIsT0FBTyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQy9CLE9BQU8sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztTQUNqQztRQUVELElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ25CLEtBQUssTUFBTSxNQUFNLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBQzNDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMxRTtTQUNKO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVPLG1CQUFtQixDQUFDLE1BQWM7UUFDdEMsUUFBUSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzdCLEtBQUsseUJBQVEsQ0FBQyxLQUFLO2dCQUNmLE9BQU8sSUFBQSxlQUFLLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9CLEtBQUsseUJBQVEsQ0FBQyxTQUFTO2dCQUNuQixPQUFPLElBQUEsYUFBRyxFQUFDLElBQUEsZUFBSyxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLEtBQUsseUJBQVEsQ0FBQyxFQUFFO2dCQUNaLE9BQU8sSUFBQSxrQkFBUSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxLQUFLLHlCQUFRLENBQUMsV0FBVztnQkFDckIsT0FBTyxJQUFBLHlCQUFlLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pDLEtBQUsseUJBQVEsQ0FBQyxFQUFFO2dCQUNaLE9BQU8sSUFBQSxrQkFBUSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxLQUFLLHlCQUFRLENBQUMsV0FBVztnQkFDckIsT0FBTyxJQUFBLHlCQUFlLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pDLEtBQUsseUJBQVEsQ0FBQyxJQUFJO2dCQUNkLE9BQU8sSUFBQSxjQUFJLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlCLDBCQUEwQjtZQUMxQix1Q0FBdUM7WUFDdkM7Z0JBQ0ksT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzNCO0lBQ0wsQ0FBQztDQUNKO0FBaERELDJDQWdEQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvY3VhdHJvb2NoZW50YS9NYWdpY1Nob3BwZXIvbWFnaWNzaG9wcGVyLW5vZGUvc3JjL21pY3Jvay9wZXJzaXN0ZW5jZS9pbmZyYXN0cnVjdHVyZS90eXBlb3JtL1R5cGVPcm1Dcml0ZXJpYUNvbnZlcnRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaW5kTWFueU9wdGlvbnMgfSBmcm9tICd0eXBlb3JtL2ZpbmQtb3B0aW9ucy9GaW5kTWFueU9wdGlvbnMnO1xuaW1wb3J0IHsgRXF1YWwsIExlc3NUaGFuLCBMZXNzVGhhbk9yRXF1YWwsIExpa2UsIE1vcmVUaGFuLCBNb3JlVGhhbk9yRXF1YWwsIE5vdCB9IGZyb20gJ3R5cGVvcm0nO1xuaW1wb3J0IEF1dGhVc2VyRW1haWwgZnJvbSAnLi4vLi4vLi4vLi4vbW9kdWxlcy9hdXRoL2RvbWFpbi9BdXRoVXNlckVtYWlsJztcbmltcG9ydCB7IENyaXRlcmlhIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2NyaXRlcmlhL0NyaXRlcmlhJztcbmltcG9ydCB7IEZpbHRlciB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jcml0ZXJpYS9GaWx0ZXInO1xuaW1wb3J0IHsgT3BlcmF0b3IgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vY3JpdGVyaWEvRmlsdGVyT3BlcmF0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUeXBlT3JtQ3JpdGVyaWFDb252ZXJ0ZXIge1xuICAgIHB1YmxpYyBjb252ZXJ0KGNyaXRlcmlhOiBDcml0ZXJpYSk6IEZpbmRNYW55T3B0aW9uczx1bmtub3duPiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnM6IEZpbmRNYW55T3B0aW9uczx1bmtub3duPiA9IHt9O1xuXG4gICAgICAgIGlmIChjcml0ZXJpYS5oYXNPcmRlcigpKSB7XG4gICAgICAgICAgICBvcHRpb25zLm9yZGVyID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IGNyaXRlcmlhLm9yZGVyLm9yZGVyQnkudmFsdWUoKSxcbiAgICAgICAgICAgICAgICBpZDogY3JpdGVyaWEub3JkZXIub3JkZXJUeXBlLnZhbHVlKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyaXRlcmlhLmhhc1BhZ2luYXRpb24oKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5za2lwID0gY3JpdGVyaWEub2Zmc2V0O1xuICAgICAgICAgICAgb3B0aW9ucy50YWtlID0gY3JpdGVyaWEubGltaXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JpdGVyaWEuaGFzRmlsdGVycygpKSB7XG4gICAgICAgICAgICBvcHRpb25zLndoZXJlID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpbHRlciBvZiBjcml0ZXJpYS5maWx0ZXJzLmZpbHRlcnMpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLndoZXJlW2ZpbHRlci5maWVsZC52YWx1ZSgpXSA9IHRoaXMuYnVpbGRXaGVyZUNvbmRpdGlvbihmaWx0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBidWlsZFdoZXJlQ29uZGl0aW9uKGZpbHRlcjogRmlsdGVyKTogYW55IHtcbiAgICAgICAgc3dpdGNoIChmaWx0ZXIub3BlcmF0b3IudmFsdWUoKSkge1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5FUVVBTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gRXF1YWwoZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuTk9UX0VRVUFMOlxuICAgICAgICAgICAgICAgIHJldHVybiBOb3QoRXF1YWwoZmlsdGVyLnZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkdUOlxuICAgICAgICAgICAgICAgIHJldHVybiBNb3JlVGhhbihmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5HVF9PUl9FUVVBTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTW9yZVRoYW5PckVxdWFsKGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkxUOlxuICAgICAgICAgICAgICAgIHJldHVybiBMZXNzVGhhbihmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5MVF9PUl9FUVVBTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTGVzc1RoYW5PckVxdWFsKGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkxJS0U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIExpa2UoZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIC8vIGNhc2UgT3BlcmF0b3IuQ09OVEFJTlM6XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIEluPHN0cmluZz4oZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlci52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==