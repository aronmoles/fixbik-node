{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/core/infrastructure/HttpErrorMiddleware.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhBZ,MAAA,WAAA;AAAA;AAAA,yBAAA,eAAA,CAAA,OAAA,CAAA,6BAAA,CAAA,CAAA,CAAA;AACA,MAAA,YAAA;AAAA;AAAA,yBAAA,OAAA,CAAA,8BAAA,CAAA,CAAA;;AAMA,MAAqB,mBAArB,CAAwC;AACpC,EAAA,WAAA,CACqB,MADrB,EACmC;AAAA;AAAA;AAAA;AAAd,SAAA,MAAA,GAAA,MAAA;AACjB;;AAEJ,EAAA,KAAK,CAAC,KAAD,EAAe,GAAf,EAA6B,GAA7B,EAA4C,IAA5C,EAAqE;AAAA;AAAA;AAAA;AACtE,SAAK,MAAL,CAAY,KAAZ,CAAkB,UAAU,KAAK,CAAC,OAAO,EAAzC;AACA,UAAM,UAAU;AAAA;AAAA,6BAAG,KAAK,YAAY,WAAA,CAAA,OAAjB;AAAA;AAAA,gCAA6B,KAAK,CAAC,IAAnC;AAAA;AAAA,gCAA0C,YAAA,CAAA,UAAA,CAAW,qBAArD,CAAH,CAAhB;;AAFsE;AAAA;AAGtE,IAAA,GAAG,CAAC,MAAJ,CAAW,UAAX,EAAuB,IAAvB,CAA4B;AACxB,MAAA,MAAM,EAAE;AACJ,QAAA,KAAK,EAAE,KAAK,CAAC;AADT;AADgB,KAA5B;;AAHsE;AAAA;AAQtE,IAAA,IAAI,CAAC,KAAD,CAAJ;AACH;;AAdmC;;;;AAAxC,OAAA,CAAA,OAAA,GAAA,mBAAA","sourcesContent":["import HttpError from '../../common/http/HttpError';\nimport { HttpStatus } from '../../common/http/HttpStatus';\nimport Logger from '../domain/Logger';\nimport { ErrorMiddleware, ErrorMiddlewareNext } from '../domain/ErrorMiddleware';\nimport { Request } from '../domain/http/Request';\nimport { Response } from '../domain/http/Response';\n\nexport default class HttpErrorMiddleware implements ErrorMiddleware {\n    constructor(\n        private readonly logger: Logger,\n    ) {}\n\n    apply(error: Error, req: Request, res: Response, next: ErrorMiddlewareNext): void {\n        this.logger.error(`Error: ${error.message}`);\n        const statusCode = error instanceof HttpError ? error.code : HttpStatus.INTERNAL_SERVER_ERROR;\n        res.status(statusCode).send({\n            errors: {\n                title: error.message,\n            },\n        });\n        next(error);\n    }\n}\n"]}