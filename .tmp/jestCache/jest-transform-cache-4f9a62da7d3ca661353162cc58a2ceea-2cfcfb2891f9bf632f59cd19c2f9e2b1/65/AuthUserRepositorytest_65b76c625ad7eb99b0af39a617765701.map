{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/tests/modules/auth/infrastructure/persistence/AuthUserRepository.test.ts","mappings":";;;;;;;;;;;;;;AACA,iFAAyD;AACzD,8EAA2E;AAC3E,yGAAiF;AACjF,mGAA2E;AAC3E,+GAAuF;AAGvF,MAAM,UAAU,GAAuB,mBAAS,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;AACvF,MAAM,mBAAmB,GAAwB,mBAAS,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;AAE3F,UAAU,CAAC,GAAS,EAAE;IAClB,MAAM,CAAC,MAAM,mBAAmB,CAAC,CAAC,OAAO,EAAE,CAAC;AAChD,CAAC,CAAA,CAAC,CAAC;AAEH,QAAQ,CAAC,GAAS,EAAE;IAChB,+CAA+C;IAC/C,MAAM,CAAC,MAAM,mBAAmB,CAAC,CAAC,KAAK,EAAE,CAAC;AAC9C,CAAC,CAAA,CAAC,CAAC;AAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAChC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACnB,EAAE,CAAC,yBAAyB,EAAE,GAAS,EAAE;YACrC,wCAAwC;YAExC,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CACzB,oBAAU,CAAC,MAAM,EAAE,EACnB,IAAI,uBAAa,CAAC,sBAAsB,CAAC,EACzC,IAAI,0BAAgB,CAAC,YAAY,CAAC,CACrC,CAAA;YAED,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpC,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/tests/modules/auth/infrastructure/persistence/AuthUserRepository.test.ts"],"sourcesContent":["import { EnvironmentArranger } from '@microk/tests/domain/EnvironmentArranger';\nimport Container from '../../../../../src/app/Container';\nimport { AuthUser } from '../../../../../src/modules/auth/domain/AuthUser';\nimport AuthUserEmail from '../../../../../src/modules/auth/domain/AuthUserEmail';\nimport AuthUserId from '../../../../../src/modules/auth/domain/AuthUserId';\nimport AuthUserPassword from '../../../../../src/modules/auth/domain/AuthUserPassword';\nimport { AuthUserRepository } from '../../../../../src/modules/auth/domain/AuthUserRepository';\n\nconst repository: AuthUserRepository = Container.get('Auth.domain.AuthUserRepository');\nconst environmentArranger: EnvironmentArranger = Container.get('Test.EnvironmentArranger');\n\nbeforeEach(async () => {\n    await (await environmentArranger).arrange();\n});\n\nafterAll(async () => {\n    // await (await environmentArranger).arrange();\n    await (await environmentArranger).close();\n});\n\ndescribe('AuthUserRepository', () => {\n    describe('#save', () => {\n        it('should save a auth user', async () => {\n            // const course = CourseMother.random();\n\n            const authUser = new AuthUser(\n                AuthUserId.create(),\n                new AuthUserEmail('aron.moles@gmail.com'),\n                new AuthUserPassword('cachibache'),\n            )\n\n            await repository.save(authUser);\n        });\n    });\n});\n"],"version":3}