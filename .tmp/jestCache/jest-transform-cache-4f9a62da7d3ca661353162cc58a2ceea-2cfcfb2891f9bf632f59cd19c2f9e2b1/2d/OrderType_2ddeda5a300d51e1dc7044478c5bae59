47f1a0d8c958bb994681d7be297a2e45
"use strict";

/* istanbul ignore next */
function cov_9alkiscm6() {
  var path = "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/OrderType.ts";
  var hash = "e4fdcf790e4c309cd3d0e048e0ab5faf052411af";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/OrderType.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 48
        }
      },
      "4": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 85
        }
      },
      "5": {
        start: {
          line: 8,
          column: 31
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "6": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 14,
          column: 65
        }
      },
      "7": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 30
        }
      },
      "8": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 32
        }
      },
      "9": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 32
        }
      },
      "10": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 48
        }
      },
      "11": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "12": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 53
        }
      },
      "13": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 54
        }
      },
      "14": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 108
        }
      },
      "15": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 48
        }
      },
      "16": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 47
        }
      },
      "17": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 100
        }
      },
      "18": {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 39,
          column: 30
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 1
          },
          end: {
            line: 10,
            column: 2
          }
        },
        loc: {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 14,
            column: 1
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 23
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 28
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 19
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 13
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 32
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 37
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 35
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 14,
            column: 16
          },
          end: {
            line: 14,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 16
          },
          end: {
            line: 14,
            column: 34
          }
        }, {
          start: {
            line: 14,
            column: 39
          },
          end: {
            line: 14,
            column: 62
          }
        }],
        line: 14
      },
      "4": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 22,
            column: 53
          }
        }, {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 24,
            column: 54
          }
        }, {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 26,
            column: 108
          }
        }],
        line: 20
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/OrderType.ts",
      mappings: ";;;;;;AAAA,sFAA8D;AAC9D,+EAA4E;AAE5E,IAAY,UAIX;AAJD,WAAY,UAAU;IACpB,yBAAW,CAAA;IACX,2BAAa,CAAA;IACb,2BAAa,CAAA;AACf,CAAC,EAJW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAIrB;AAED,MAAa,SAAU,SAAQ,yBAA2B;IACtD,YAAY,KAAiB;QACzB,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,KAAa;QAC1B,QAAQ,KAAK,EAAE;YACX,KAAK,UAAU,CAAC,GAAG;gBACf,OAAO,IAAI,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzC,KAAK,UAAU,CAAC,IAAI;gBAChB,OAAO,IAAI,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC1C;gBACI,MAAM,IAAI,2CAAoB,CAAC,kBAAkB,KAAK,aAAa,CAAC,CAAC;SAC5E;IACL,CAAC;IAEM,MAAM;QACT,OAAO,IAAI,CAAC,KAAK,EAAE,KAAK,UAAU,CAAC,IAAI,CAAC;IAC5C,CAAC;IAEM,KAAK;QACR,OAAO,IAAI,CAAC,KAAK,EAAE,KAAK,UAAU,CAAC,GAAG,CAAC;IAC3C,CAAC;IAES,yBAAyB,CAAC,KAAiB;QACjD,MAAM,IAAI,2CAAoB,CAAC,kBAAkB,KAAK,aAAa,CAAC,CAAC;IACzE,CAAC;CACJ;AA3BD,8BA2BC",
      names: [],
      sources: ["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/OrderType.ts"],
      sourcesContent: ["import EnumValueObject from '../value-object/EnumValueObject';\nimport { InvalidArgumentError } from '../value-object/InvalidArgumentError';\n\nexport enum OrderTypes {\n  ASC = 'asc',\n  DESC = 'desc',\n  NONE = 'none'\n}\n\nexport class OrderType extends EnumValueObject<OrderTypes> {\n    constructor(value: OrderTypes) {\n        super(value, Object.values(OrderTypes));\n    }\n\n    static fromValue(value: string): OrderType {\n        switch (value) {\n            case OrderTypes.ASC:\n                return new OrderType(OrderTypes.ASC);\n            case OrderTypes.DESC:\n                return new OrderType(OrderTypes.DESC);\n            default:\n                throw new InvalidArgumentError(`The order type ${value} is invalid`);\n        }\n    }\n\n    public isNone(): boolean {\n        return this.value() === OrderTypes.NONE;\n    }\n\n    public isAsc(): boolean {\n        return this.value() === OrderTypes.ASC;\n    }\n\n    protected throwErrorForInvalidValue(value: OrderTypes): void {\n        throw new InvalidArgumentError(`The order type ${value} is invalid`);\n    }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e4fdcf790e4c309cd3d0e048e0ab5faf052411af"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_9alkiscm6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_9alkiscm6();

var __importDefault =
/* istanbul ignore next */
(cov_9alkiscm6().s[0]++,
/* istanbul ignore next */
(cov_9alkiscm6().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_9alkiscm6().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_9alkiscm6().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_9alkiscm6().f[0]++;
  cov_9alkiscm6().s[1]++;
  return (
    /* istanbul ignore next */
    (cov_9alkiscm6().b[2][0]++, mod) &&
    /* istanbul ignore next */
    (cov_9alkiscm6().b[2][1]++, mod.__esModule) ?
    /* istanbul ignore next */
    (cov_9alkiscm6().b[1][0]++, mod) :
    /* istanbul ignore next */
    (cov_9alkiscm6().b[1][1]++, {
      "default": mod
    })
  );
}));

/* istanbul ignore next */
cov_9alkiscm6().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_9alkiscm6().s[3]++;
exports.OrderType = exports.OrderTypes = void 0;
const EnumValueObject_1 =
/* istanbul ignore next */
(cov_9alkiscm6().s[4]++, __importDefault(require("../value-object/EnumValueObject")));
const InvalidArgumentError_1 =
/* istanbul ignore next */
(cov_9alkiscm6().s[5]++, require("../value-object/InvalidArgumentError"));
var OrderTypes;

/* istanbul ignore next */
cov_9alkiscm6().s[6]++;

(function (OrderTypes) {
  /* istanbul ignore next */
  cov_9alkiscm6().f[1]++;
  cov_9alkiscm6().s[7]++;
  OrderTypes["ASC"] = "asc";

  /* istanbul ignore next */
  cov_9alkiscm6().s[8]++;
  OrderTypes["DESC"] = "desc";

  /* istanbul ignore next */
  cov_9alkiscm6().s[9]++;
  OrderTypes["NONE"] = "none";
})(OrderTypes =
/* istanbul ignore next */
(cov_9alkiscm6().b[3][0]++, exports.OrderTypes) ||
/* istanbul ignore next */
(cov_9alkiscm6().b[3][1]++, exports.OrderTypes = {}));

class OrderType extends
/* istanbul ignore next */
(EnumValueObject_1.default) {
  constructor(value) {
    /* istanbul ignore next */
    cov_9alkiscm6().f[2]++;
    cov_9alkiscm6().s[10]++;
    super(value, Object.values(OrderTypes));
  }

  static fromValue(value) {
    /* istanbul ignore next */
    cov_9alkiscm6().f[3]++;
    cov_9alkiscm6().s[11]++;

    switch (value) {
      case OrderTypes.ASC:
        /* istanbul ignore next */
        cov_9alkiscm6().b[4][0]++;
        cov_9alkiscm6().s[12]++;
        return new OrderType(OrderTypes.ASC);

      case OrderTypes.DESC:
        /* istanbul ignore next */
        cov_9alkiscm6().b[4][1]++;
        cov_9alkiscm6().s[13]++;
        return new OrderType(OrderTypes.DESC);

      default:
        /* istanbul ignore next */
        cov_9alkiscm6().b[4][2]++;
        cov_9alkiscm6().s[14]++;
        throw new InvalidArgumentError_1.InvalidArgumentError(`The order type ${value} is invalid`);
    }
  }

  isNone() {
    /* istanbul ignore next */
    cov_9alkiscm6().f[4]++;
    cov_9alkiscm6().s[15]++;
    return this.value() === OrderTypes.NONE;
  }

  isAsc() {
    /* istanbul ignore next */
    cov_9alkiscm6().f[5]++;
    cov_9alkiscm6().s[16]++;
    return this.value() === OrderTypes.ASC;
  }

  throwErrorForInvalidValue(value) {
    /* istanbul ignore next */
    cov_9alkiscm6().f[6]++;
    cov_9alkiscm6().s[17]++;
    throw new InvalidArgumentError_1.InvalidArgumentError(`The order type ${value} is invalid`);
  }

}

/* istanbul ignore next */
cov_9alkiscm6().s[18]++;
exports.OrderType = OrderType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9jdWF0cm9vY2hlbnRhL01hZ2ljU2hvcHBlci9tYWdpY3Nob3BwZXItbm9kZS9zcmMvbWljcm9rL2NvbW1vbi9jcml0ZXJpYS9PcmRlclR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFWSixNQUFBLGlCQUFBO0FBQUE7QUFBQSx5QkFBQSxlQUFBLENBQUEsT0FBQSxDQUFBLGlDQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsTUFBQSxzQkFBQTtBQUFBO0FBQUEseUJBQUEsT0FBQSxDQUFBLHNDQUFBLENBQUEsQ0FBQTtBQUVBLElBQVksVUFBWjs7Ozs7QUFBQSxDQUFBLFVBQVksVUFBWixFQUFzQjtBQUFBO0FBQUE7QUFBQTtBQUNwQixFQUFBLFVBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxLQUFBOztBQURvQjtBQUFBO0FBRXBCLEVBQUEsVUFBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLE1BQUE7O0FBRm9CO0FBQUE7QUFHcEIsRUFBQSxVQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsTUFBQTtBQUNELENBSkQsRUFBWSxVQUFVO0FBQVY7QUFBQSw0QkFBQSxPQUFBLENBQUEsVUFBQTtBQUFBO0FBQUEsNEJBQUEsT0FBQSxDQUFBLFVBQUEsR0FBVSxFQUFWLENBQVo7O0FBTUEsTUFBYSxTQUFiO0FBQUE7QUFBQSxDQUErQixpQkFBQSxDQUFBLE9BQS9CLEVBQTBEO0FBQ3RELEVBQUEsV0FBQSxDQUFZLEtBQVosRUFBNkI7QUFBQTtBQUFBO0FBQUE7QUFDekIsVUFBTSxLQUFOLEVBQWEsTUFBTSxDQUFDLE1BQVAsQ0FBYyxVQUFkLENBQWI7QUFDSDs7QUFFZSxTQUFULFNBQVMsQ0FBQyxLQUFELEVBQWM7QUFBQTtBQUFBO0FBQUE7O0FBQzFCLFlBQVEsS0FBUjtBQUNJLFdBQUssVUFBVSxDQUFDLEdBQWhCO0FBQUE7QUFBQTtBQUFBO0FBQ0ksZUFBTyxJQUFJLFNBQUosQ0FBYyxVQUFVLENBQUMsR0FBekIsQ0FBUDs7QUFDSixXQUFLLFVBQVUsQ0FBQyxJQUFoQjtBQUFBO0FBQUE7QUFBQTtBQUNJLGVBQU8sSUFBSSxTQUFKLENBQWMsVUFBVSxDQUFDLElBQXpCLENBQVA7O0FBQ0o7QUFBQTtBQUFBO0FBQUE7QUFDSSxjQUFNLElBQUksc0JBQUEsQ0FBQSxvQkFBSixDQUF5QixrQkFBa0IsS0FBSyxhQUFoRCxDQUFOO0FBTlI7QUFRSDs7QUFFTSxFQUFBLE1BQU0sR0FBQTtBQUFBO0FBQUE7QUFBQTtBQUNULFdBQU8sS0FBSyxLQUFMLE9BQWlCLFVBQVUsQ0FBQyxJQUFuQztBQUNIOztBQUVNLEVBQUEsS0FBSyxHQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ1IsV0FBTyxLQUFLLEtBQUwsT0FBaUIsVUFBVSxDQUFDLEdBQW5DO0FBQ0g7O0FBRVMsRUFBQSx5QkFBeUIsQ0FBQyxLQUFELEVBQWtCO0FBQUE7QUFBQTtBQUFBO0FBQ2pELFVBQU0sSUFBSSxzQkFBQSxDQUFBLG9CQUFKLENBQXlCLGtCQUFrQixLQUFLLGFBQWhELENBQU47QUFDSDs7QUExQnFEOzs7O0FBQTFELE9BQUEsQ0FBQSxTQUFBLEdBQUEsU0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFbnVtVmFsdWVPYmplY3QgZnJvbSAnLi4vdmFsdWUtb2JqZWN0L0VudW1WYWx1ZU9iamVjdCc7XG5pbXBvcnQgeyBJbnZhbGlkQXJndW1lbnRFcnJvciB9IGZyb20gJy4uL3ZhbHVlLW9iamVjdC9JbnZhbGlkQXJndW1lbnRFcnJvcic7XG5cbmV4cG9ydCBlbnVtIE9yZGVyVHlwZXMge1xuICBBU0MgPSAnYXNjJyxcbiAgREVTQyA9ICdkZXNjJyxcbiAgTk9ORSA9ICdub25lJ1xufVxuXG5leHBvcnQgY2xhc3MgT3JkZXJUeXBlIGV4dGVuZHMgRW51bVZhbHVlT2JqZWN0PE9yZGVyVHlwZXM+IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogT3JkZXJUeXBlcykge1xuICAgICAgICBzdXBlcih2YWx1ZSwgT2JqZWN0LnZhbHVlcyhPcmRlclR5cGVzKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21WYWx1ZSh2YWx1ZTogc3RyaW5nKTogT3JkZXJUeXBlIHtcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBPcmRlclR5cGVzLkFTQzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE9yZGVyVHlwZShPcmRlclR5cGVzLkFTQyk7XG4gICAgICAgICAgICBjYXNlIE9yZGVyVHlwZXMuREVTQzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE9yZGVyVHlwZShPcmRlclR5cGVzLkRFU0MpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoYFRoZSBvcmRlciB0eXBlICR7dmFsdWV9IGlzIGludmFsaWRgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBpc05vbmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlKCkgPT09IE9yZGVyVHlwZXMuTk9ORTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNBc2MoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlKCkgPT09IE9yZGVyVHlwZXMuQVNDO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB0aHJvd0Vycm9yRm9ySW52YWxpZFZhbHVlKHZhbHVlOiBPcmRlclR5cGVzKTogdm9pZCB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgVGhlIG9yZGVyIHR5cGUgJHt2YWx1ZX0gaXMgaW52YWxpZGApO1xuICAgIH1cbn1cbiJdfQ==