0868c51faeb28c3f4c5f24a8587e684c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const glob_1 = __importDefault(require("glob"));
const lodash_mergewith_1 = __importDefault(require("lodash.mergewith"));
const path_1 = __importDefault(require("path"));
const jsDocInfo_1 = require("./consumers/jsDocInfo");
const parseJsonCommentsFromYaml_1 = require("./consumers/parseJsonCommentsFromYaml");
const parseYamlComments_1 = require("./consumers/parseYamlComments");
class OpenApi {
    constructor(config) {
        this.config = config;
        this.globFilesMatches = (baseDir, filesPattern, excludedFolder = OpenApi.DEFAULT_EXCLUDED_FOLDER) => {
            try {
                const files = glob_1.default.sync(path_1.default.resolve(baseDir, filesPattern), OpenApi.DEFAULT_GLOB_OPTIONS);
                return files.filter((file) => !file.includes(excludedFolder));
            }
            catch (error) {
                throw new Error('Error Glob Files');
            }
        };
        this.getComments = (text) => {
            const comments = text.match(OpenApi.COMMENTS_PATTERN);
            if (comments) {
                const filterComments = comments.filter((comment) => comment.match(OpenApi.BREAK_LINE));
                return filterComments.map((comment) => comment.trim());
            }
            return [];
        };
        this.getOnlyComments = (fileContents = []) => {
            if (!Array.isArray(fileContents)) {
                return [];
            }
            const comments = fileContents.map((comment) => {
                const trimedComments = comment.trim();
                return this.getComments(trimedComments);
            });
            return [].concat(...comments).filter((comment) => (comment[0] === '/' && comment[1] !== '/'));
        };
    }
    readFile(filePath) {
        return fs_1.default.readFileSync(filePath).toString();
    }
    readFiles(files) {
        if (!files || !Array.isArray(files)) {
            return [];
        }
        return files.map((file) => this.readFile(file));
    }
    mergeDeep(first, second) {
        return (0, lodash_mergewith_1.default)({}, first, second, (x, y) => (y === null ? x : undefined));
    }
    removeEmptyKeys(obj) {
        if (!obj) {
            return {};
        }
        Object.keys(obj).forEach((key) => {
            if (obj[key] === undefined) {
                delete obj[key];
            }
        });
        return obj;
    }
    generateDocs() {
        const files = this.globFilesMatches(this.config.baseDir, this.config.filesPattern);
        const fileContents = this.readFiles(files);
        const comments = this.getOnlyComments(fileContents);
        const jsDocInfo = (0, jsDocInfo_1.jsdocInfo)()(comments);
        const yamlComments = (0, parseYamlComments_1.parseYamlComments)(jsDocInfo);
        const jsonComments = (0, parseJsonCommentsFromYaml_1.parseJsonCommentsFromYaml)(yamlComments);
        const openApi = this.removeEmptyKeys({
            openapi: '3.0.0',
            info: this.config.info,
            servers: this.config.servers,
            paths: this.config.paths || {},
            components: Object.assign(Object.assign({}, this.config.components), { schemas: this.config.components.schemas || {} }),
            security: this.config.security,
            tags: this.config.tags,
            externalDocs: this.config.externalDocs,
        });
        for (const jsonComment of jsonComments) {
            for (const key of Object.keys(jsonComment)) {
                if (key.startsWith('/')) {
                    openApi.paths[key] = this.mergeDeep(openApi.paths[key], jsonComment[key]);
                }
                else {
                    openApi.components.schemas[key] = jsonComment[key];
                }
            }
        }
        return openApi;
    }
}
exports.default = OpenApi;
OpenApi.DEFAULT_EXCLUDED_FOLDER = 'node_modules';
OpenApi.DEFAULT_GLOB_OPTIONS = { ignore: '**/node_modules/**' };
// eslint-disable-next-line prefer-named-capture-group
OpenApi.COMMENTS_PATTERN = /((\/\*\*+[\s\S]*?\*\/)|(\/\*+.*\*\/)|^\/\/.*?[\r\n])[\r\n]*/gm;
OpenApi.BREAK_LINE = /\n/g;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,