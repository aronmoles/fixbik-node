bccb69679f08595583526414e63e131f
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typeorm_1 = require("typeorm");
const AuthUserEmail_1 = __importDefault(require("../../../../modules/auth/domain/AuthUserEmail"));
const FilterOperator_1 = require("../../../common/criteria/FilterOperator");
class TypeOrmCriteriaConverter {
    convert(criteria) {
        const options = {};
        if (criteria.hasOrder()) {
            options.order = {
                name: criteria.order.orderBy.value(),
                id: criteria.order.orderType.value(),
            };
        }
        if (criteria.hasPagination()) {
            options.skip = criteria.offset;
            options.take = criteria.limit;
        }
        if (criteria.hasFilters()) {
            options.where = {};
            // for (const filter of criteria.filters.filters) {
            //     // options.where[filter.field.value()] = this.buildWhereCondition(filter);
            // }
            // eslint-disable-next-line dot-notation
            options.where['email'] = new AuthUserEmail_1.default('aron.moles@gmail.com');
        }
        return options;
    }
    buildWhereCondition(filter) {
        switch (filter.operator.value()) {
            case FilterOperator_1.Operator.EQUAL:
                return (0, typeorm_1.Equal)(filter.value);
            case FilterOperator_1.Operator.NOT_EQUAL:
                return (0, typeorm_1.Not)((0, typeorm_1.Equal)(filter.value));
            case FilterOperator_1.Operator.GT:
                return (0, typeorm_1.MoreThan)(filter.value);
            case FilterOperator_1.Operator.GT_OR_EQUAL:
                return (0, typeorm_1.MoreThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LT:
                return (0, typeorm_1.LessThan)(filter.value);
            case FilterOperator_1.Operator.LT_OR_EQUAL:
                return (0, typeorm_1.LessThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LIKE:
                return (0, typeorm_1.Like)(filter.value);
            // case Operator.CONTAINS:
            //     return In<string>(filter.value);
            default:
                return filter.value;
        }
    }
}
exports.default = TypeOrmCriteriaConverter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9taWNyb2svcGVyc2lzdGVuY2UvaW5mcmFzdHJ1Y3R1cmUvdHlwZW9ybS9UeXBlT3JtQ3JpdGVyaWFDb252ZXJ0ZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxxQ0FBaUc7QUFDakcsa0dBQTBFO0FBRzFFLDRFQUFtRTtBQUVuRSxNQUFxQix3QkFBd0I7SUFDbEMsT0FBTyxDQUFDLFFBQWtCO1FBQzdCLE1BQU0sT0FBTyxHQUE2QixFQUFFLENBQUM7UUFFN0MsSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDckIsT0FBTyxDQUFDLEtBQUssR0FBRztnQkFDWixJQUFJLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO2dCQUNwQyxFQUFFLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFO2FBQ3ZDLENBQUM7U0FDTDtRQUVELElBQUksUUFBUSxDQUFDLGFBQWEsRUFBRSxFQUFFO1lBQzFCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUMvQixPQUFPLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7U0FDakM7UUFFRCxJQUFJLFFBQVEsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUN2QixPQUFPLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNuQixtREFBbUQ7WUFDbkQsaUZBQWlGO1lBQ2pGLElBQUk7WUFDSix3Q0FBd0M7WUFDeEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLHVCQUFhLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUN0RTtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxNQUFjO1FBQ3RDLFFBQVEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUM3QixLQUFLLHlCQUFRLENBQUMsS0FBSztnQkFDZixPQUFPLElBQUEsZUFBSyxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQixLQUFLLHlCQUFRLENBQUMsU0FBUztnQkFDbkIsT0FBTyxJQUFBLGFBQUcsRUFBQyxJQUFBLGVBQUssRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNwQyxLQUFLLHlCQUFRLENBQUMsRUFBRTtnQkFDWixPQUFPLElBQUEsa0JBQVEsRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsS0FBSyx5QkFBUSxDQUFDLFdBQVc7Z0JBQ3JCLE9BQU8sSUFBQSx5QkFBZSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QyxLQUFLLHlCQUFRLENBQUMsRUFBRTtnQkFDWixPQUFPLElBQUEsa0JBQVEsRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsS0FBSyx5QkFBUSxDQUFDLFdBQVc7Z0JBQ3JCLE9BQU8sSUFBQSx5QkFBZSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QyxLQUFLLHlCQUFRLENBQUMsSUFBSTtnQkFDZCxPQUFPLElBQUEsY0FBSSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QiwwQkFBMEI7WUFDMUIsdUNBQXVDO1lBQ3ZDO2dCQUNJLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQztTQUMzQjtJQUNMLENBQUM7Q0FDSjtBQWxERCwyQ0FrREMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9taWNyb2svcGVyc2lzdGVuY2UvaW5mcmFzdHJ1Y3R1cmUvdHlwZW9ybS9UeXBlT3JtQ3JpdGVyaWFDb252ZXJ0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmluZE1hbnlPcHRpb25zIH0gZnJvbSAndHlwZW9ybS9maW5kLW9wdGlvbnMvRmluZE1hbnlPcHRpb25zJztcbmltcG9ydCB7IEVxdWFsLCBMZXNzVGhhbiwgTGVzc1RoYW5PckVxdWFsLCBMaWtlLCBNb3JlVGhhbiwgTW9yZVRoYW5PckVxdWFsLCBOb3QgfSBmcm9tICd0eXBlb3JtJztcbmltcG9ydCBBdXRoVXNlckVtYWlsIGZyb20gJy4uLy4uLy4uLy4uL21vZHVsZXMvYXV0aC9kb21haW4vQXV0aFVzZXJFbWFpbCc7XG5pbXBvcnQgeyBDcml0ZXJpYSB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jcml0ZXJpYS9Dcml0ZXJpYSc7XG5pbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vY3JpdGVyaWEvRmlsdGVyJztcbmltcG9ydCB7IE9wZXJhdG9yIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2NyaXRlcmlhL0ZpbHRlck9wZXJhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHlwZU9ybUNyaXRlcmlhQ29udmVydGVyIHtcbiAgICBwdWJsaWMgY29udmVydChjcml0ZXJpYTogQ3JpdGVyaWEpOiBGaW5kTWFueU9wdGlvbnM8dW5rbm93bj4ge1xuICAgICAgICBjb25zdCBvcHRpb25zOiBGaW5kTWFueU9wdGlvbnM8dW5rbm93bj4gPSB7fTtcblxuICAgICAgICBpZiAoY3JpdGVyaWEuaGFzT3JkZXIoKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5vcmRlciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjcml0ZXJpYS5vcmRlci5vcmRlckJ5LnZhbHVlKCksXG4gICAgICAgICAgICAgICAgaWQ6IGNyaXRlcmlhLm9yZGVyLm9yZGVyVHlwZS52YWx1ZSgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcml0ZXJpYS5oYXNQYWdpbmF0aW9uKCkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2tpcCA9IGNyaXRlcmlhLm9mZnNldDtcbiAgICAgICAgICAgIG9wdGlvbnMudGFrZSA9IGNyaXRlcmlhLmxpbWl0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyaXRlcmlhLmhhc0ZpbHRlcnMoKSkge1xuICAgICAgICAgICAgb3B0aW9ucy53aGVyZSA9IHt9O1xuICAgICAgICAgICAgLy8gZm9yIChjb25zdCBmaWx0ZXIgb2YgY3JpdGVyaWEuZmlsdGVycy5maWx0ZXJzKSB7XG4gICAgICAgICAgICAvLyAgICAgLy8gb3B0aW9ucy53aGVyZVtmaWx0ZXIuZmllbGQudmFsdWUoKV0gPSB0aGlzLmJ1aWxkV2hlcmVDb25kaXRpb24oZmlsdGVyKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgICAgICAgIG9wdGlvbnMud2hlcmVbJ2VtYWlsJ10gPSBuZXcgQXV0aFVzZXJFbWFpbCgnYXJvbi5tb2xlc0BnbWFpbC5jb20nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRXaGVyZUNvbmRpdGlvbihmaWx0ZXI6IEZpbHRlcik6IGFueSB7XG4gICAgICAgIHN3aXRjaCAoZmlsdGVyLm9wZXJhdG9yLnZhbHVlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEVxdWFsKGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLk5PVF9FUVVBTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTm90KEVxdWFsKGZpbHRlci52YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5HVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTW9yZVRoYW4oZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuR1RfT1JfRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1vcmVUaGFuT3JFcXVhbChmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5MVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTGVzc1RoYW4oZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuTFRfT1JfRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIExlc3NUaGFuT3JFcXVhbChmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5MSUtFOlxuICAgICAgICAgICAgICAgIHJldHVybiBMaWtlKGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICAvLyBjYXNlIE9wZXJhdG9yLkNPTlRBSU5TOlxuICAgICAgICAgICAgLy8gICAgIHJldHVybiBJbjxzdHJpbmc+KGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXIudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwidmVyc2lvbiI6M30=