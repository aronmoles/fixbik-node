f5f20937791bfb4875b8bc39f7c44661
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typeorm_1 = require("typeorm");
const FilterOperator_1 = require("../../../common/criteria/FilterOperator");
class TypeOrmCriteriaConverter {
    convert(criteria) {
        const options = {};
        if (criteria.hasOrder()) {
            options.order = {
                name: criteria.order.orderBy.value(),
                id: criteria.order.orderType.value(),
            };
        }
        if (criteria.hasPagination()) {
            options.skip = criteria.offset;
            options.take = criteria.limit;
        }
        if (criteria.hasFilters()) {
            options.where = {};
            // for (const filter of criteria.filters.filters) {
            //     // options.where[filter.field.value()] = this.buildWhereCondition(filter);
            // }
            options.where['email'] = 'aron.moles@gmail.com';
        }
        return options;
    }
    buildWhereCondition(filter) {
        switch (filter.operator.value()) {
            case FilterOperator_1.Operator.EQUAL:
                return (0, typeorm_1.Equal)(filter.value);
            case FilterOperator_1.Operator.NOT_EQUAL:
                return (0, typeorm_1.Not)((0, typeorm_1.Equal)(filter.value));
            case FilterOperator_1.Operator.GT:
                return (0, typeorm_1.MoreThan)(filter.value);
            case FilterOperator_1.Operator.GT_OR_EQUAL:
                return (0, typeorm_1.MoreThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LT:
                return (0, typeorm_1.LessThan)(filter.value);
            case FilterOperator_1.Operator.LT_OR_EQUAL:
                return (0, typeorm_1.LessThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LIKE:
                return (0, typeorm_1.Like)(filter.value);
            // case Operator.CONTAINS:
            //     return In<string>(filter.value);
            default:
                return filter.value;
        }
    }
}
exports.default = TypeOrmCriteriaConverter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9taWNyb2svcGVyc2lzdGVuY2UvaW5mcmFzdHJ1Y3R1cmUvdHlwZW9ybS9UeXBlT3JtQ3JpdGVyaWFDb252ZXJ0ZXIudHMiLCJtYXBwaW5ncyI6Ijs7QUFDQSxxQ0FBaUc7QUFHakcsNEVBQW1FO0FBRW5FLE1BQXFCLHdCQUF3QjtJQUNsQyxPQUFPLENBQUMsUUFBa0I7UUFDN0IsTUFBTSxPQUFPLEdBQTZCLEVBQUUsQ0FBQztRQUU3QyxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNyQixPQUFPLENBQUMsS0FBSyxHQUFHO2dCQUNaLElBQUksRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ3BDLEVBQUUsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUU7YUFDdkMsQ0FBQztTQUNMO1FBRUQsSUFBSSxRQUFRLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDMUIsT0FBTyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQy9CLE9BQU8sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztTQUNqQztRQUVELElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ25CLG1EQUFtRDtZQUNuRCxpRkFBaUY7WUFDakYsSUFBSTtZQUNKLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsc0JBQXNCLENBQUM7U0FDbkQ7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRU8sbUJBQW1CLENBQUMsTUFBYztRQUN0QyxRQUFRLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDN0IsS0FBSyx5QkFBUSxDQUFDLEtBQUs7Z0JBQ2YsT0FBTyxJQUFBLGVBQUssRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0IsS0FBSyx5QkFBUSxDQUFDLFNBQVM7Z0JBQ25CLE9BQU8sSUFBQSxhQUFHLEVBQUMsSUFBQSxlQUFLLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDcEMsS0FBSyx5QkFBUSxDQUFDLEVBQUU7Z0JBQ1osT0FBTyxJQUFBLGtCQUFRLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xDLEtBQUsseUJBQVEsQ0FBQyxXQUFXO2dCQUNyQixPQUFPLElBQUEseUJBQWUsRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekMsS0FBSyx5QkFBUSxDQUFDLEVBQUU7Z0JBQ1osT0FBTyxJQUFBLGtCQUFRLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xDLEtBQUsseUJBQVEsQ0FBQyxXQUFXO2dCQUNyQixPQUFPLElBQUEseUJBQWUsRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekMsS0FBSyx5QkFBUSxDQUFDLElBQUk7Z0JBQ2QsT0FBTyxJQUFBLGNBQUksRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUIsMEJBQTBCO1lBQzFCLHVDQUF1QztZQUN2QztnQkFDSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDM0I7SUFDTCxDQUFDO0NBQ0o7QUFqREQsMkNBaURDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9jdWF0cm9vY2hlbnRhL01hZ2ljU2hvcHBlci9tYWdpY3Nob3BwZXItbm9kZS9zcmMvbWljcm9rL3BlcnNpc3RlbmNlL2luZnJhc3RydWN0dXJlL3R5cGVvcm0vVHlwZU9ybUNyaXRlcmlhQ29udmVydGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpbmRNYW55T3B0aW9ucyB9IGZyb20gJ3R5cGVvcm0vZmluZC1vcHRpb25zL0ZpbmRNYW55T3B0aW9ucyc7XG5pbXBvcnQgeyBFcXVhbCwgTGVzc1RoYW4sIExlc3NUaGFuT3JFcXVhbCwgTGlrZSwgTW9yZVRoYW4sIE1vcmVUaGFuT3JFcXVhbCwgTm90IH0gZnJvbSAndHlwZW9ybSc7XG5pbXBvcnQgeyBDcml0ZXJpYSB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jcml0ZXJpYS9Dcml0ZXJpYSc7XG5pbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vY3JpdGVyaWEvRmlsdGVyJztcbmltcG9ydCB7IE9wZXJhdG9yIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2NyaXRlcmlhL0ZpbHRlck9wZXJhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHlwZU9ybUNyaXRlcmlhQ29udmVydGVyIHtcbiAgICBwdWJsaWMgY29udmVydChjcml0ZXJpYTogQ3JpdGVyaWEpOiBGaW5kTWFueU9wdGlvbnM8dW5rbm93bj4ge1xuICAgICAgICBjb25zdCBvcHRpb25zOiBGaW5kTWFueU9wdGlvbnM8dW5rbm93bj4gPSB7fTtcblxuICAgICAgICBpZiAoY3JpdGVyaWEuaGFzT3JkZXIoKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5vcmRlciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjcml0ZXJpYS5vcmRlci5vcmRlckJ5LnZhbHVlKCksXG4gICAgICAgICAgICAgICAgaWQ6IGNyaXRlcmlhLm9yZGVyLm9yZGVyVHlwZS52YWx1ZSgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcml0ZXJpYS5oYXNQYWdpbmF0aW9uKCkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2tpcCA9IGNyaXRlcmlhLm9mZnNldDtcbiAgICAgICAgICAgIG9wdGlvbnMudGFrZSA9IGNyaXRlcmlhLmxpbWl0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyaXRlcmlhLmhhc0ZpbHRlcnMoKSkge1xuICAgICAgICAgICAgb3B0aW9ucy53aGVyZSA9IHt9O1xuICAgICAgICAgICAgLy8gZm9yIChjb25zdCBmaWx0ZXIgb2YgY3JpdGVyaWEuZmlsdGVycy5maWx0ZXJzKSB7XG4gICAgICAgICAgICAvLyAgICAgLy8gb3B0aW9ucy53aGVyZVtmaWx0ZXIuZmllbGQudmFsdWUoKV0gPSB0aGlzLmJ1aWxkV2hlcmVDb25kaXRpb24oZmlsdGVyKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIG9wdGlvbnMud2hlcmVbJ2VtYWlsJ10gPSAnYXJvbi5tb2xlc0BnbWFpbC5jb20nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBidWlsZFdoZXJlQ29uZGl0aW9uKGZpbHRlcjogRmlsdGVyKTogYW55IHtcbiAgICAgICAgc3dpdGNoIChmaWx0ZXIub3BlcmF0b3IudmFsdWUoKSkge1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5FUVVBTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gRXF1YWwoZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuTk9UX0VRVUFMOlxuICAgICAgICAgICAgICAgIHJldHVybiBOb3QoRXF1YWwoZmlsdGVyLnZhbHVlKSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkdUOlxuICAgICAgICAgICAgICAgIHJldHVybiBNb3JlVGhhbihmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5HVF9PUl9FUVVBTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTW9yZVRoYW5PckVxdWFsKGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkxUOlxuICAgICAgICAgICAgICAgIHJldHVybiBMZXNzVGhhbihmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5MVF9PUl9FUVVBTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTGVzc1RoYW5PckVxdWFsKGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkxJS0U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIExpa2UoZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIC8vIGNhc2UgT3BlcmF0b3IuQ09OVEFJTlM6XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIEluPHN0cmluZz4oZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlci52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==