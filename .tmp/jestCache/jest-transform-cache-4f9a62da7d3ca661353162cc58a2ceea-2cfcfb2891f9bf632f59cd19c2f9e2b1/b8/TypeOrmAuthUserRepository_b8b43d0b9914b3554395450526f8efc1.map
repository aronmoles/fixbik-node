{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/modules/auth/infrastructure/persistence/TypeOrmAuthUserRepository.ts","mappings":";;;;;;;;;;;;;;;AAAA,+DAA4D;AAC5D,2DAAwD;AACxD,qEAAkE;AAClE,2EAAwE;AACxE,6DAA0D;AAC1D,qEAAkE;AAClE,yDAAsD;AAEtD,mIAA2G;AAC3G,oGAAiG;AAMjG,6DAA0D;AAE1D,MAAa,yBAA0B,SAAQ,qCAA2B;IAC5D,YAAY;QAClB,OAAO,+BAAc,CAAC;IAC1B,CAAC;IAEM,IAAI,CAAC,MAAgB;QACxB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAEY,MAAM,CAAC,EAAc;;YAC9B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YAE3C,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAElD,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IAEK,YAAY;;YACd,8CAA8C;YAC9C,8CAA8C;YAC9C,eAAe;YACf,sDAAsD;YACtD,SAAS;YACT,KAAK;YAEL,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YAC3C,MAAM,QAAQ,GAAG,IAAI,mBAAQ,CACzB,IAAI,iBAAO,CAAC,CAAC,IAAI,eAAM,CACnB,IAAI,yBAAW,CAAC,OAAO,CAAC,EACxB,+BAAc,CAAC,KAAK,EAAE,EACtB,IAAI,yBAAW,CAAC,gBAAgB,CAAC,CACpC,CAAC,CAAC,EACH,aAAK,CAAC,IAAI,EAAE,CACf,CAAA;YACD,MAAM,iBAAiB,GAAG,IAAI,kCAAwB,EAAE,CAAC;YACzD,MAAM,MAAM,GAAG,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;YAClD,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;YACjD,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;CACJ;AAvCD,8DAuCC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/modules/auth/infrastructure/persistence/TypeOrmAuthUserRepository.ts"],"sourcesContent":["import { Criteria } from '@microk/common/criteria/Criteria';\nimport { Filter } from '@microk/common/criteria/Filter';\nimport { FilterField } from '@microk/common/criteria/FilterField';\nimport { FilterOperator } from '@microk/common/criteria/FilterOperator';\nimport { Filters } from '@microk/common/criteria/Filters';\nimport { FilterValue } from '@microk/common/criteria/FilterValue';\nimport { Order } from '@microk/common/criteria/Order';\nimport { Nullable } from '@microk/common/Nullable';\nimport TypeOrmCriteriaConverter from '@microk/persistence/infrastructure/typeorm/TypeOrmCriteriaConverter';\nimport { TypeOrmRepository } from '@microk/persistence/infrastructure/typeorm/TypeOrmRepository';\nimport { EntitySchema } from 'typeorm';\nimport { AuthUser } from '../../domain/AuthUser';\nimport AuthUserEmail from '../../domain/AuthUserEmail';\nimport AuthUserId from '../../domain/AuthUserId';\nimport { AuthUserRepository } from '../../domain/AuthUserRepository';\nimport { AuthUserEntity } from './typeorm/AuthUserEntity';\n\nexport class TypeOrmAuthUserRepository extends TypeOrmRepository<AuthUser> implements AuthUserRepository {\n    protected entitySchema(): EntitySchema<AuthUser> {\n        return AuthUserEntity;\n    }\n\n    public save(course: AuthUser): Promise<void> {\n        return this.persist(course);\n    }\n\n    public async search(id: AuthUserId): Promise<Nullable<AuthUser>> {\n        const repository = await this.repository();\n\n        const authUser = await repository.findOne({ id });\n\n        return authUser;\n    }\n\n    async customSearch(): Promise<Nullable<AuthUser>> {\n        // const repository = await this.repository();\n        // const authUser = await repository.findOne({\n        //     where: {\n        //         email: new AuthUserEmail('amoles@pav.com'),\n        //     },\n        // })\n\n        const repository = await this.repository();\n        const criteria = new Criteria(\n            new Filters([new Filter(\n                new FilterField('email'),\n                FilterOperator.equal(),\n                new FilterValue('amoles@pav.com'),\n            )]),\n            Order.none(),\n        )\n        const criteriaConverter = new TypeOrmCriteriaConverter();\n        const filter = criteriaConverter.convert(criteria)\n        const authUser = await repository.findOne(filter)\n        return authUser;\n    }\n}\n"],"version":3}