{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/tests/modules/auth/application/Authenticator.test.ts","mappings":";;;;;;;;;;;;;;AACA,sGAA8E;AAC9E,uIAA+G;AAC/G,iHAAyF;AAEzF,mGAA2E;AAC3E,iGAAyE;AACzE,8EAAsD;AACtD,wFAAgE;AAEhE,IAAI,kBAA0C,CAAC;AAC/C,IAAI,mBAAwC,CAAC;AAC7C,IAAI,wBAAkD,CAAC;AAEvD,UAAU,CAAC,GAAG,EAAE;IACZ,mBAAmB,GAAG,IAAI,iCAAuB,EAAE,CAAC;IACpD,kBAAkB,GAAG,IAAI,gCAAsB,EAAE,CAAC;IAClD,wBAAwB,GAAG,IAAI,kCAAwB,CAAC,IAAI,uBAAa,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,CAAC,CAAA;AACvH,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC3B,EAAE,CAAC,kCAAkC,EAAE,GAAS,EAAE;QAC9C,MAAM,KAAK,GAAG,iCAAuB,CAAC,MAAM,EAAE,CAAC;QAC/C,MAAM,QAAQ,GAAG,wBAAc,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACjD,kBAAkB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAExC,MAAM,SAAS,GAAG,MAAM,wBAAwB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAE/D,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IAC/C,CAAC,CAAA,CAAC,CAAC;IACH,EAAE,CAAC,+CAA+C,EAAE,GAAS,EAAE;QAC3D,MAAM,KAAK,GAAG,iCAAuB,CAAC,MAAM,EAAE,CAAC;QAC/C,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAEpC,MAAM,MAAM,CAAC,GAAS,EAAE;YACpB,MAAM,wBAAwB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC,CAAA,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,2BAAiB,CAAC,CAAC;IAC1C,CAAC,CAAA,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/tests/modules/auth/application/Authenticator.test.ts"],"sourcesContent":["import NotFoundHttpError from '@microk/common/http/errors/NotFoundHttpError';\nimport InvalidEmailError from '@microk/common/value-object/InvalidEmailError';\nimport AuthenticateQueryHandler from '../../../../src/modules/auth/application/login/AuthenticateQueryHandler';\nimport Authenticator from '../../../../src/modules/auth/application/login/Authenticator';\nimport AuthTokenRepository from '../../../../src/modules/auth/domain/AuthTokenRepository';\nimport AuthTokenRepositoryMock from '../__mocks__/AuthTokenRepositoryMock';\nimport AuthUserRepositoryMock from '../__mocks__/AuthUserRepositoryMock';\nimport AuthUserMother from '../domain/AuthUserMother';\nimport AuthenticateQueryMother from './AuthenticateQueryMother';\n\nlet authUserRepository: AuthUserRepositoryMock;\nlet authTokenRepository: AuthTokenRepository;\nlet authenticateQueryHandler: AuthenticateQueryHandler;\n\nbeforeEach(() => {\n    authTokenRepository = new AuthTokenRepositoryMock();\n    authUserRepository = new AuthUserRepositoryMock();\n    authenticateQueryHandler = new AuthenticateQueryHandler(new Authenticator(authUserRepository, authTokenRepository))\n});\n\ndescribe('Authenticator', () => {\n    it('should create a valid auth token', async () => {\n        const query = AuthenticateQueryMother.random();\n        const authUser = AuthUserMother.fromQuery(query);\n        authUserRepository.mockReturn(authUser);\n\n        const authToken = await authenticateQueryHandler.handle(query);\n\n        expect(authToken.toString()).toBeDefined();\n    });\n    it('should throw NotFoundError if user not exists', async () => {\n        const query = AuthenticateQueryMother.random();\n        authUserRepository.mockReturn(null);\n\n        await expect(async () => {\n            await authenticateQueryHandler.handle(query);\n        }).rejects.toThrow(InvalidEmailError);\n    });\n});\n"],"version":3}