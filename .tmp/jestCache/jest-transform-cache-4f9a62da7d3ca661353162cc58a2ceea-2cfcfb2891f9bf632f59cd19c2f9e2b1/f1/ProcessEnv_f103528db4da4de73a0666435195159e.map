{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/app/ProcessEnv.ts"],"names":[],"mappingsmB;AAAA;AAAA;AAAA;AACf,EAAA,OAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA;;AADe;AAAA;AAEf,EAAA,OAAA,CAAA,OAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;;AAFe;AAAA;AAGf,EAAA,OAAA,CAAA,OAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACH,CAJD,EAAY,OAAO;AAAP;AAAA,6BAAA,OAAA,CAAA,OAAA;AAAA;AAAA,6BAAA,OAAA,CAAA,OAAA,GAAO,EAAP,CAAZ;;AAyBA,MAAqB,UAArB,CAA+B;AAG3B,EAAA,WAAA,GAAA;AAAA;AAAA;AAAA;AACI,SAAK,GAAL,GAAW;AACP,MAAA,QAAQ,EAAE,OAAO,CAAC,GAAR,CAAY,QADf;AAEP,MAAA,IAAI,EAAE,MAFC;AAIP,MAAA,UAAU,EAAE,EAJL;AAMP,MAAA,aAAa,EAAE,EANR;AAOP,MAAA,aAAa,EAAE,EAPR;AAQP,MAAA,iBAAiB,EAAE,EARZ;AASP,MAAA,iBAAiB,EAAE,EATZ;AAUP,MAAA,cAAc,EAAE,EAVT;AAYP,MAAA,UAAU,EAAE,EAZL;AAaP,MAAA,UAAU,EAAE,EAbL;AAcP,MAAA,UAAU,EAAE,EAdL;AAeP,MAAA,cAAc,EAAE,EAfT;AAgBP,MAAA,cAAc,EAAE;AAhBT,KAAX,CADJ,CAoBI;;AACA,UAAM,eAAe;AAAA;AAAA,8BAAG,GAAG,SAAS,eAAe,OAAO,CAAC,GAAR,CAAY,QAAQ,EAAlD,CAArB;;AArBJ;AAAA;;AAsBI,QAAI,EAAE,CAAC,UAAH,CAAc,eAAd,CAAJ,EAAoC;AAAA;AAAA;AAAA;;AAChC,MAAA,OAAO,CAAC,QAAD,CAAP,CAAkB,MAAlB,CAAyB;AAAE,QAAA,IAAI,EAAE;AAAR,OAAzB;AACH,KAFD,MAEO;AAAA;AAAA;AACH,YAAM,WAAW;AAAA;AAAA,gCAAG,GAAG,SAAS,aAAf,CAAjB;;AADG;AAAA;;AAEH,UAAI,EAAE,CAAC,UAAH,CAAc,WAAd,CAAJ,EAAgC;AAAA;AAAA;AAAA;;AAC5B,QAAA,OAAO,CAAC,QAAD,CAAP,CAAkB,MAAlB,CAAyB;AAAE,UAAA,IAAI,EAAE;AAAR,SAAzB;AACH,OAFD;AAAA;AAAA;AAAA;AAAA;AAGH;;AAED,UAAM,OAAO;AAAA;AAAA,8BAAG,MAAM,CAAC,IAAP,CAAY,KAAK,GAAjB,CAAH,CAAb;;AA/BJ;AAAA;;AAiCI,SAAK,MAAM,GAAX,IAAkB,OAAlB,EAA2B;AACvB,YAAM,KAAK;AAAA;AAAA,gCAAG,OAAO,CAAC,GAAR,CAAY,GAAZ,CAAH,CAAX;;AADuB;AAAA;;AAGvB,UAAI,KAAJ,EAAW;AAAA;AAAA;AAAA;AACP,aAAK,GAAL,CAAS,GAAT,IAAgB,KAAhB;AACH,OAFD,MAEO;AAAA;AAAA;AAAA;AACH,cAAM,IAAI,KAAJ,CAAU,mBAAmB,GAAG,EAAhC,CAAN;AACH;AACJ;;AAzCL;AAAA;;AA2CI,QAAI,CAAC,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,QAArB,CAA8B,KAAK,GAAL,CAAS,UAAT,CAA9B,CAAL,EAA0D;AAAA;AAAA;AAAA;AACtD,YAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAGH;;AAEM,EAAA,GAAG,CAAyB,GAAzB,EAA+B;AAAA;AAAA;AAAA;AACrC,WAAO,KAAK,GAAL,CAAS,GAAT,CAAP;AACH;;AAEM,EAAA,GAAG,CAAyB,GAAzB,EAAiC,KAAjC,EAAiD;AAAA;AAAA;AAAA;AACvD,SAAK,GAAL,CAAS,GAAT,IAAgB,KAAhB;AACH;;AAzD0B;;;;AAA/B,OAAA,CAAA,OAAA,GAAA,UAAA","sourcesContent":["/* eslint-disable no-undef, @typescript-eslint/no-var-requires */\nimport Env from '@microk/core/domain/Env';\nimport * as fs from 'fs';\n\nexport enum EnvMode {\n    dev,\n    test,\n    prod,\n}\n\nexport interface EnvKey {\n    NODE_ENV: string;\n    PORT: string;\n\n    JWT_SECRET: string;\n\n    RABBITMQ_HOST: string;\n    RABBITMQ_USER: string;\n    RABBITMQ_PASSWORD: string;\n    RABBITMQ_EXCHANGE: string;\n    RABBITMQ_QUEUE: string;\n\n    MYSQL_HOST: string;\n    MYSQL_PORT: string;\n    MYSQL_USER: string;\n    MYSQL_PASSWORD: string;\n    MYSQL_DATABASE: string;\n}\n\nexport default class ProcessEnv implements Env<EnvKey> {\n    private readonly env: EnvKey;\n\n    constructor() {\n        this.env = {\n            NODE_ENV: process.env.NODE_ENV,\n            PORT: '3000',\n\n            JWT_SECRET: '',\n\n            RABBITMQ_HOST: '',\n            RABBITMQ_USER: '',\n            RABBITMQ_PASSWORD: '',\n            RABBITMQ_EXCHANGE: '',\n            RABBITMQ_QUEUE: '',\n\n            MYSQL_HOST: '',\n            MYSQL_PORT: '',\n            MYSQL_USER: '',\n            MYSQL_PASSWORD: '',\n            MYSQL_DATABASE: '',\n        };\n\n        // TODO Crear un DotEnv\n        const modeEnvFilePath = `${__dirname}/../../.env.${process.env.NODE_ENV}`;\n        if (fs.existsSync(modeEnvFilePath)) {\n            require('dotenv').config({ path: modeEnvFilePath });\n        } else {\n            const envFilePath = `${__dirname}/../../.env`;\n            if (fs.existsSync(envFilePath)) {\n                require('dotenv').config({ path: envFilePath });\n            }\n        }\n\n        const envKeys = Object.keys(this.env) as Array<keyof EnvKey>;\n\n        for (const key of envKeys) {\n            const value = process.env[key];\n\n            if (value) {\n                this.env[key] = value;\n            } else {\n                throw new Error(`Missing env key ${key}`);\n            }\n        }\n\n        if (!Object.keys(EnvMode).includes(this.get('NODE_ENV'))) {\n            throw new Error('Invalid NODE_ENV value.');\n        }\n    }\n\n    public get<T extends keyof EnvKey>(key: T): EnvKey[T] {\n        return this.env[key];\n    }\n\n    public set<T extends keyof EnvKey>(key: T, value: EnvKey[T]) {\n        this.env[key] = value;\n    }\n}\n"]}