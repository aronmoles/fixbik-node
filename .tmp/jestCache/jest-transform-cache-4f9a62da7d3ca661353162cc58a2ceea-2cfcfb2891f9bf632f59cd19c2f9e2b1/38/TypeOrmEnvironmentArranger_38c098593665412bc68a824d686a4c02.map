{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/tests/infrastructure/typeorm/TypeOrmEnvironmentArranger.ts"],"names":[],"mappingsqBAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,kCAAA,CAAA,CAAA;;AAEA,MAAa,0BAAb;AAAA;AAAA,CAAgD,qBAAA,CAAA,mBAAhD,EAAmE;AAC/D,EAAA,WAAA,CAAoB,OAApB,EAAgD;AAAA;AAAA;AAAA;AAC5C;;AAD4C;AAAA;AAA5B,SAAA,OAAA,GAAA,OAAA;AAEnB;;AAEY,EAAA,OAAO,GAAA;AAAA;AAAA;AAAA;;;;;AAChB,YAAM,KAAK,aAAL,EAAN;AACH,K;AAAA;;AAEe,EAAA,aAAa,GAAA;AAAA;AAAA;AAAA;;;;AACzB,YAAM,QAAQ;AAAA;AAAA,gCAAG,MAAM,KAAK,QAAL,EAAT,CAAd;;;;;AAEA,UAAI;AAAA;AAAA;;AACA,aAAK,MAAM,MAAX,IAAqB,QAArB,EAA+B;AAC3B,gBAAM,UAAU;AAAA;AAAA,oCAAG,CAAC,MAAM,KAAK,MAAL,EAAP,EAAsB,aAAtB,CAAoC,MAAM,CAAC,IAA3C,CAAH,CAAhB;;AAD2B;AAAA;AAE3B,gBAAM,UAAU,CAAC,KAAX,CAAiB,kBAAkB,MAAM,CAAC,SAAS,GAAnD,CAAN;AACH;AACJ,OALD,CAKE,OAAO,KAAP,EAAc;AAAA;AAAA;AACZ,cAAM,IAAI,KAAJ,CAAU,kCAAkC,KAAK,EAAjD,CAAN;AACH;AACJ,K;AAAA;;AAEa,EAAA,QAAQ,GAAA;AAAA;AAAA;AAAA;;;;;AAClB,aAAO,CAAC,MAAM,KAAK,MAAL,EAAP,EAAsB,eAA7B;AACH,K;AAAA;;AAES,EAAA,MAAM,GAAA;AAAA;AAAA;AAAA;AACZ,WAAO,KAAK,OAAZ;AACH;;AAEY,EAAA,KAAK,GAAA;AAAA;AAAA;AAAA;;;;;AACd,aAAO,CAAC,MAAM,KAAK,MAAL,EAAP,EAAsB,KAAtB,EAAP;AACH,K;AAAA;;AAhC8D;;;;AAAnE,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourcesContent":["import { Connection, EntityMetadata } from 'typeorm';\nimport { EnvironmentArranger } from '../../domain/EnvironmentArranger';\n\nexport class TypeOrmEnvironmentArranger extends EnvironmentArranger {\n    constructor(private _client: Promise<Connection>) {\n        super();\n    }\n\n    public async arrange(): Promise<void> {\n        await this.cleanDatabase();\n    }\n\n    protected async cleanDatabase(): Promise<void> {\n        const entities = await this.entities();\n\n        try {\n            for (const entity of entities) {\n                const repository = (await this.client()).getRepository(entity.name);\n                await repository.query(`TRUNCATE TABLE ${entity.tableName};`);\n            }\n        } catch (error) {\n            throw new Error(`Unable to clean test database: ${error}`);\n        }\n    }\n\n    private async entities(): Promise<EntityMetadata[]> {\n        return (await this.client()).entityMetadatas;\n    }\n\n    protected client(): Promise<Connection> {\n        return this._client;\n    }\n\n    public async close(): Promise<void> {\n        return (await this.client()).close();\n    }\n}\n"]}