{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/event/infrastructure/EventSubscriberMapper.ts","mappings":";;;AAKA,MAAa,qBAAqB;IAG9B,YAAY,sBAA2D;QACnE,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,CAAC;IACzF,CAAC;IAEO,sBAAsB,CAC1B,sBAA2D;QAE3D,MAAM,yBAAyB,GAAG,IAAI,GAAG,EAA+C,CAAC;QAEzF,sBAAsB,CAAC,OAAO,CAAC,CAAC,qBAAqB,EAAE,EAAE;YACrD,qBAAqB,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,EAAE;gBAC9D,IAAI,2BAA2B,GAAG,yBAAyB,CAAC,GAAG,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC;gBACrG,IAAI,CAAC,2BAA2B,EAAE;oBAC9B,2BAA2B,GAAG,EAAE,CAAC;iBACpC;gBACD,2BAA2B,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAA;gBACvD,yBAAyB,CAAC,GAAG,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,2BAA2B,CAAC,CAAA;YACnG,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAC;QAEH,OAAO,yBAAyB,CAAC;IACrC,CAAC;IAEM,MAAM,CAAC,WAAwB;QAClC,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;QAEvF,IAAI,CAAC,sBAAsB,EAAE;YACzB,OAAO,EAAE,CAAC;SACb;QAED,OAAO,sBAAsB,CAAC;IAClC,CAAC;CACJ;AAnCD,sDAmCC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/event/infrastructure/EventSubscriberMapper.ts"],"sourcesContent":["import { Mapper } from '../../common/Mapper';\nimport MessageName from '../../common/message/MessageName';\nimport DomainEvent from '../domain/DomainEvent';\nimport EventSubscriber from '../domain/EventSubscriber';\n\nexport class EventSubscriberMapper implements Mapper<MessageName, EventSubscriber<DomainEvent>[]> {\n    private domainEventSubscribersMap: Map<string, Array<EventSubscriber<DomainEvent>>>;\n\n    constructor(domainEventSubscribers: Array<EventSubscriber<DomainEvent>>) {\n        this.domainEventSubscribersMap = this.formatEventSubscribers(domainEventSubscribers);\n    }\n\n    private formatEventSubscribers(\n        domainEventSubscribers: Array<EventSubscriber<DomainEvent>>,\n    ): Map<string, Array<EventSubscriber<DomainEvent>>> {\n        const domainEventSubscribersMap = new Map<string, Array<EventSubscriber<DomainEvent>>>();\n\n        domainEventSubscribers.forEach((domainEventSubscriber) => {\n            domainEventSubscriber.subscribedTo().forEach((domainEventClass) => {\n                let domainEventSubscribersInMap = domainEventSubscribersMap.get(domainEventClass.EVENT_NAME.value());\n                if (!domainEventSubscribersInMap) {\n                    domainEventSubscribersInMap = [];\n                }\n                domainEventSubscribersInMap.push(domainEventSubscriber)\n                domainEventSubscribersMap.set(domainEventClass.EVENT_NAME.value(), domainEventSubscribersInMap)\n            })\n        });\n\n        return domainEventSubscribersMap;\n    }\n\n    public search(messageName: MessageName): Array<EventSubscriber<DomainEvent>> {\n        const domainEventSubscribers = this.domainEventSubscribersMap.get(messageName.value());\n\n        if (!domainEventSubscribers) {\n            return [];\n        }\n\n        return domainEventSubscribers;\n    }\n}\n"],"version":3}