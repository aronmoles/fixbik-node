{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/persistence/infrastructure/typeorm/TypeOrmCriteriaConverter.ts"],"names":[],"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","sourcesContent":["import { FindManyOptions } from 'typeorm/find-options/FindManyOptions';\nimport { Equal, LessThan, LessThanOrEqual, Like, MoreThan, MoreThanOrEqual, Not } from 'typeorm';\nimport { Criteria } from '../../../common/criteria/Criteria';\nimport { Filter } from '../../../common/criteria/Filter';\nimport { Operator } from '../../../common/criteria/FilterOperator';\n\nexport default class TypeOrmCriteriaConverter {\n    public convert(criteria: Criteria): FindManyOptions<unknown> {\n        const options: FindManyOptions<unknown> = {};\n\n        if (criteria.hasOrder()) {\n            options.order = {\n                name: criteria.order.orderBy.value(),\n                id: criteria.order.orderType.value(),\n            };\n        }\n\n        if (criteria.hasPagination()) {\n            options.skip = criteria.offset;\n            options.take = criteria.limit;\n        }\n\n        if (criteria.hasFilters()) {\n            options.where = {};\n            for (const filter of criteria.filters.filters) {\n                options.where[filter.field.value()] = this.buildWhereCondition(filter);\n            }\n        }\n\n        return options;\n    }\n\n    private buildWhereCondition(filter: Filter): any {\n        switch (filter.operator.value()) {\n            case Operator.EQUAL:\n                return Equal(filter.value.value());\n            case Operator.NOT_EQUAL:\n                return Not(Equal(filter.value.value()));\n            case Operator.GT:\n                return MoreThan(filter.value.value());\n            case Operator.GT_OR_EQUAL:\n                return MoreThanOrEqual(filter.value.value());\n            case Operator.LT:\n                return LessThan(filter.value.value());\n            case Operator.LT_OR_EQUAL:\n                return LessThanOrEqual(filter.value.value());\n            case Operator.LIKE:\n                return Like(filter.value.value());\n            // case Operator.CONTAINS:\n            //     return In<string>(filter.value.value);\n            default:\n                return filter.value.value();\n        }\n    }\n}\n"]}