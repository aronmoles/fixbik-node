96cd4156c85811f3128d06ce91c5de97
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typeorm_1 = require("typeorm");
const FilterOperator_1 = require("../../../common/criteria/FilterOperator");
class TypeOrmCriteriaConverter {
    convert(criteria) {
        const options = {};
        if (criteria.hasOrder()) {
            options.order = {
                name: criteria.order.orderBy.value(),
                id: criteria.order.orderType.value(),
            };
        }
        if (criteria.hasPagination()) {
            options.skip = criteria.offset;
            options.take = criteria.limit;
        }
        if (criteria.hasFilters()) {
            options.where = {};
            for (const filter of criteria.filters.filters) {
                options.where[filter.field.value()] = this.buildWhereCondition(filter);
            }
        }
        return options;
    }
    buildWhereCondition(filter) {
        switch (filter.operator.value()) {
            case FilterOperator_1.Operator.EQUAL:
                return (0, typeorm_1.Equal)(filter.value);
            case FilterOperator_1.Operator.NOT_EQUAL:
                return (0, typeorm_1.Not)((0, typeorm_1.Equal)(filter.value));
            case FilterOperator_1.Operator.GT:
                return (0, typeorm_1.MoreThan)(filter.value);
            case FilterOperator_1.Operator.GT_OR_EQUAL:
                return (0, typeorm_1.MoreThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LT:
                return (0, typeorm_1.LessThan)(filter.value);
            case FilterOperator_1.Operator.LT_OR_EQUAL:
                return (0, typeorm_1.LessThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LIKE:
                return (0, typeorm_1.Like)(filter.value);
            // case Operator.CONTAINS:
            //     return In<string>(filter.value.value());
            default:
                return filter.value;
        }
    }
}
exports.default = TypeOrmCriteriaConverter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9taWNyb2svcGVyc2lzdGVuY2UvaW5mcmFzdHJ1Y3R1cmUvdHlwZW9ybS9UeXBlT3JtQ3JpdGVyaWFDb252ZXJ0ZXIudHMiLCJtYXBwaW5ncyI6Ijs7QUFDQSxxQ0FBaUc7QUFHakcsNEVBQW1FO0FBR25FLE1BQXFCLHdCQUF3QjtJQUNsQyxPQUFPLENBQUMsUUFBa0I7UUFDN0IsTUFBTSxPQUFPLEdBQTZCLEVBQUUsQ0FBQztRQUU3QyxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNyQixPQUFPLENBQUMsS0FBSyxHQUFHO2dCQUNaLElBQUksRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ3BDLEVBQUUsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUU7YUFDdkMsQ0FBQztTQUNMO1FBRUQsSUFBSSxRQUFRLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDMUIsT0FBTyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQy9CLE9BQU8sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztTQUNqQztRQUVELElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ25CLEtBQUssTUFBTSxNQUFNLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBQzNDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMxRTtTQUNKO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVPLG1CQUFtQixDQUFDLE1BQWM7UUFDdEMsUUFBUSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzdCLEtBQUsseUJBQVEsQ0FBQyxLQUFLO2dCQUNmLE9BQU8sSUFBQSxlQUFLLEVBQW1CLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNqRCxLQUFLLHlCQUFRLENBQUMsU0FBUztnQkFDbkIsT0FBTyxJQUFBLGFBQUcsRUFBbUIsSUFBQSxlQUFLLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDdEQsS0FBSyx5QkFBUSxDQUFDLEVBQUU7Z0JBQ1osT0FBTyxJQUFBLGtCQUFRLEVBQW1CLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwRCxLQUFLLHlCQUFRLENBQUMsV0FBVztnQkFDckIsT0FBTyxJQUFBLHlCQUFlLEVBQW1CLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMzRCxLQUFLLHlCQUFRLENBQUMsRUFBRTtnQkFDWixPQUFPLElBQUEsa0JBQVEsRUFBbUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BELEtBQUsseUJBQVEsQ0FBQyxXQUFXO2dCQUNyQixPQUFPLElBQUEseUJBQWUsRUFBbUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNELEtBQUsseUJBQVEsQ0FBQyxJQUFJO2dCQUNkLE9BQU8sSUFBQSxjQUFJLEVBQW1CLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRCwwQkFBMEI7WUFDMUIsK0NBQStDO1lBQy9DO2dCQUNJLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQztTQUMzQjtJQUNMLENBQUM7Q0FDSjtBQWhERCwyQ0FnREMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9taWNyb2svcGVyc2lzdGVuY2UvaW5mcmFzdHJ1Y3R1cmUvdHlwZW9ybS9UeXBlT3JtQ3JpdGVyaWFDb252ZXJ0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmluZE1hbnlPcHRpb25zIH0gZnJvbSAndHlwZW9ybS9maW5kLW9wdGlvbnMvRmluZE1hbnlPcHRpb25zJztcbmltcG9ydCB7IEVxdWFsLCBMZXNzVGhhbiwgTGVzc1RoYW5PckVxdWFsLCBMaWtlLCBNb3JlVGhhbiwgTW9yZVRoYW5PckVxdWFsLCBOb3QgfSBmcm9tICd0eXBlb3JtJztcbmltcG9ydCB7IENyaXRlcmlhIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2NyaXRlcmlhL0NyaXRlcmlhJztcbmltcG9ydCB7IEZpbHRlciB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jcml0ZXJpYS9GaWx0ZXInO1xuaW1wb3J0IHsgT3BlcmF0b3IgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vY3JpdGVyaWEvRmlsdGVyT3BlcmF0b3InO1xuaW1wb3J0IHsgVmFsdWVPYmplY3QgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vdmFsdWUtb2JqZWN0L1ZhbHVlT2JqZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHlwZU9ybUNyaXRlcmlhQ29udmVydGVyIHtcbiAgICBwdWJsaWMgY29udmVydChjcml0ZXJpYTogQ3JpdGVyaWEpOiBGaW5kTWFueU9wdGlvbnM8dW5rbm93bj4ge1xuICAgICAgICBjb25zdCBvcHRpb25zOiBGaW5kTWFueU9wdGlvbnM8dW5rbm93bj4gPSB7fTtcblxuICAgICAgICBpZiAoY3JpdGVyaWEuaGFzT3JkZXIoKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5vcmRlciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjcml0ZXJpYS5vcmRlci5vcmRlckJ5LnZhbHVlKCksXG4gICAgICAgICAgICAgICAgaWQ6IGNyaXRlcmlhLm9yZGVyLm9yZGVyVHlwZS52YWx1ZSgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcml0ZXJpYS5oYXNQYWdpbmF0aW9uKCkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2tpcCA9IGNyaXRlcmlhLm9mZnNldDtcbiAgICAgICAgICAgIG9wdGlvbnMudGFrZSA9IGNyaXRlcmlhLmxpbWl0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyaXRlcmlhLmhhc0ZpbHRlcnMoKSkge1xuICAgICAgICAgICAgb3B0aW9ucy53aGVyZSA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWx0ZXIgb2YgY3JpdGVyaWEuZmlsdGVycy5maWx0ZXJzKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy53aGVyZVtmaWx0ZXIuZmllbGQudmFsdWUoKV0gPSB0aGlzLmJ1aWxkV2hlcmVDb25kaXRpb24oZmlsdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRXaGVyZUNvbmRpdGlvbihmaWx0ZXI6IEZpbHRlcik6IGFueSB7XG4gICAgICAgIHN3aXRjaCAoZmlsdGVyLm9wZXJhdG9yLnZhbHVlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEVxdWFsPFZhbHVlT2JqZWN0PGFueT4+KGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLk5PVF9FUVVBTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTm90PFZhbHVlT2JqZWN0PGFueT4+KEVxdWFsKGZpbHRlci52YWx1ZSkpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5HVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTW9yZVRoYW48VmFsdWVPYmplY3Q8YW55Pj4oZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuR1RfT1JfRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1vcmVUaGFuT3JFcXVhbDxWYWx1ZU9iamVjdDxhbnk+PihmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5MVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gTGVzc1RoYW48VmFsdWVPYmplY3Q8YW55Pj4oZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuTFRfT1JfRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIExlc3NUaGFuT3JFcXVhbDxWYWx1ZU9iamVjdDxhbnk+PihmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5MSUtFOlxuICAgICAgICAgICAgICAgIHJldHVybiBMaWtlPFZhbHVlT2JqZWN0PGFueT4+KGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICAvLyBjYXNlIE9wZXJhdG9yLkNPTlRBSU5TOlxuICAgICAgICAgICAgLy8gICAgIHJldHVybiBJbjxzdHJpbmc+KGZpbHRlci52YWx1ZS52YWx1ZSgpKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlci52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==