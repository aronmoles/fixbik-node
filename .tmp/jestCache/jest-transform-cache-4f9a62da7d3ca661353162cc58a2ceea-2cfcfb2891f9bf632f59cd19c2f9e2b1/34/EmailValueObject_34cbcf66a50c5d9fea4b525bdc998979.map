{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/value-object/EmailValueObject.ts","mappings":";;;;;AAAA,qFAAkF;AAClF,4EAAoD;AAEpD,MAAqB,gBAAiB,SAAQ,qCAAiB;IAC3D,YAAY,KAAa;QACrB,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAEO,kBAAkB,CAAC,KAAa;QACpC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;YAC3B,MAAM,IAAI,2BAAiB,CAAC,KAAK,CAAC,CAAA;SACrC;IACL,CAAC;IAEO,YAAY,CAAC,KAAa;QAC9B,OAAO,MAAM,CAAC,KAAK,CAAC;aACf,WAAW,EAAE;aACb,KAAK;QACF,8DAA8D;QAC9D,uJAAuJ,CAC1J,CAAC;IACV,CAAC;CACJ;AApBD,mCAoBC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/value-object/EmailValueObject.ts"],"sourcesContent":["import { StringValueObject } from '@microk/common/value-object/StringValueObject';\nimport InvalidEmailError from './InvalidEmailError';\n\nexport default class EmailValueObject extends StringValueObject {\n    constructor(email: string) {\n        super(email);\n        this.ensureIsValidEmail(email);\n    }\n\n    private ensureIsValidEmail(email: string) {\n        if (!this.isValidEmail(email)) {\n            throw new InvalidEmailError(email)\n        }\n    }\n\n    private isValidEmail(email: string) {\n        return String(email)\n            .toLowerCase()\n            .match(\n                // eslint-disable-next-line max-len,prefer-named-capture-group\n                /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n            );\n    }\n}\n"],"version":3}