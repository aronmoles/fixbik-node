84f465f2a83b60421913fefedc9e0a0b
"use strict";

/* istanbul ignore next */
function cov_1ujcvmz8hz() {
  var path = "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/FilterOperator.ts";
  var hash = "bb0625f032d004667244e84b0277859c01033785";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/FilterOperator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 51
        }
      },
      "4": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 7,
          column: 85
        }
      },
      "5": {
        start: {
          line: 8,
          column: 31
        },
        end: {
          line: 8,
          column: 78
        }
      },
      "6": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 20,
          column: 59
        }
      },
      "7": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "8": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 33
        }
      },
      "9": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 25
        }
      },
      "10": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 35
        }
      },
      "11": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 25
        }
      },
      "12": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "13": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 30
        }
      },
      "14": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 46
        }
      },
      "15": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "16": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 58
        }
      },
      "17": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 30,
          column: 62
        }
      },
      "18": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 55
        }
      },
      "19": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 64
        }
      },
      "20": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 55
        }
      },
      "21": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 64
        }
      },
      "22": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 57
        }
      },
      "23": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 113
        }
      },
      "24": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 46
        }
      },
      "25": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 105
        }
      },
      "26": {
        start: {
          line: 56,
          column: 0
        },
        end: {
          line: 56,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 1
          },
          end: {
            line: 10,
            column: 2
          }
        },
        loc: {
          start: {
            line: 10,
            column: 21
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 48,
            column: 5
          }
        },
        line: 25
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 49,
            column: 4
          },
          end: {
            line: 49,
            column: 5
          }
        },
        loc: {
          start: {
            line: 49,
            column: 23
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 49
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        loc: {
          start: {
            line: 52,
            column: 37
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 52
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 14
          },
          end: {
            line: 20,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 14
          },
          end: {
            line: 20,
            column: 30
          }
        }, {
          start: {
            line: 20,
            column: 35
          },
          end: {
            line: 20,
            column: 56
          }
        }],
        line: 20
      },
      "4": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 28,
            column: 58
          }
        }, {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 30,
            column: 62
          }
        }, {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 32,
            column: 55
          }
        }, {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 34,
            column: 64
          }
        }, {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 36,
            column: 55
          }
        }, {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 38,
            column: 64
          }
        }, {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 40,
            column: 57
          }
        }, {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 46,
            column: 113
          }
        }],
        line: 26
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0, 0, 0, 0, 0]
    },
    inputSourceMap: {
      file: "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/FilterOperator.ts",
      mappings: ";;;;;;AAAA,sFAA8D;AAC9D,+EAA4E;AAE5E,IAAY,QAUX;AAVD,WAAY,QAAQ;IAClB,uBAAW,CAAA;IACX,4BAAgB,CAAA;IAChB,oBAAQ,CAAA;IACR,8BAAkB,CAAA;IAClB,oBAAQ,CAAA;IACR,8BAAkB,CAAA;IAClB,yBAAa,CAAA;IACb,yBAAyB;IACzB,iCAAiC;AACnC,CAAC,EAVW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAUnB;AAED,MAAa,cAAe,SAAQ,yBAAyB;IACzD,MAAM,CAAC,KAAK;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,KAAa;QAC1B,QAAQ,KAAK,EAAE;YACX,KAAK,QAAQ,CAAC,KAAK;gBACf,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC9C,KAAK,QAAQ,CAAC,SAAS;gBACnB,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAClD,KAAK,QAAQ,CAAC,EAAE;gBACZ,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC3C,KAAK,QAAQ,CAAC,WAAW;gBACrB,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACpD,KAAK,QAAQ,CAAC,EAAE;gBACZ,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC3C,KAAK,QAAQ,CAAC,WAAW;gBACrB,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACpD,KAAK,QAAQ,CAAC,IAAI;gBACd,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC7C,0BAA0B;YAC1B,oDAAoD;YACpD,8BAA8B;YAC9B,wDAAwD;YACxD;gBACI,MAAM,IAAI,2CAAoB,CAAC,uBAAuB,KAAK,aAAa,CAAC,CAAC;SACjF;IACL,CAAC;IAED,YAAY,KAAe;QACvB,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1C,CAAC;IAES,yBAAyB,CAAC,KAAe;QAC/C,MAAM,IAAI,2CAAoB,CAAC,uBAAuB,KAAK,aAAa,CAAC,CAAC;IAC9E,CAAC;CACJ;AArCD,wCAqCC",
      names: [],
      sources: ["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/FilterOperator.ts"],
      sourcesContent: ["import EnumValueObject from '../value-object/EnumValueObject';\nimport { InvalidArgumentError } from '../value-object/InvalidArgumentError';\n\nexport enum Operator {\n  EQUAL = '=',\n  NOT_EQUAL = '!=',\n  GT = '>',\n  GT_OR_EQUAL = '>=',\n  LT = '<',\n  LT_OR_EQUAL = '<=',\n  LIKE = 'LIKE',\n  // CONTAINS = 'CONTAINS',\n  // NOT_CONTAINS = 'NOT_CONTAINS',\n}\n\nexport class FilterOperator extends EnumValueObject<Operator> {\n    static equal() {\n        return this.fromValue(Operator.EQUAL);\n    }\n\n    static fromValue(value: string): FilterOperator {\n        switch (value) {\n            case Operator.EQUAL:\n                return new FilterOperator(Operator.EQUAL);\n            case Operator.NOT_EQUAL:\n                return new FilterOperator(Operator.NOT_EQUAL);\n            case Operator.GT:\n                return new FilterOperator(Operator.GT);\n            case Operator.GT_OR_EQUAL:\n                return new FilterOperator(Operator.GT_OR_EQUAL);\n            case Operator.LT:\n                return new FilterOperator(Operator.LT);\n            case Operator.LT_OR_EQUAL:\n                return new FilterOperator(Operator.LT_OR_EQUAL);\n            case Operator.LIKE:\n                return new FilterOperator(Operator.LIKE);\n            // case Operator.CONTAINS:\n            //     return new FilterOperator(Operator.CONTAINS);\n            // case Operator.NOT_CONTAINS:\n            //     return new FilterOperator(Operator.NOT_CONTAINS);\n            default:\n                throw new InvalidArgumentError(`The filter operator ${value} is invalid`);\n        }\n    }\n\n    constructor(value: Operator) {\n        super(value, Object.values(Operator));\n    }\n\n    protected throwErrorForInvalidValue(value: Operator): void {\n        throw new InvalidArgumentError(`The filter operator ${value} is invalid`);\n    }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bb0625f032d004667244e84b0277859c01033785"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ujcvmz8hz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1ujcvmz8hz();

var __importDefault =
/* istanbul ignore next */
(cov_1ujcvmz8hz().s[0]++,
/* istanbul ignore next */
(cov_1ujcvmz8hz().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1ujcvmz8hz().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1ujcvmz8hz().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1ujcvmz8hz().f[0]++;
  cov_1ujcvmz8hz().s[1]++;
  return (
    /* istanbul ignore next */
    (cov_1ujcvmz8hz().b[2][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1ujcvmz8hz().b[2][1]++, mod.__esModule) ?
    /* istanbul ignore next */
    (cov_1ujcvmz8hz().b[1][0]++, mod) :
    /* istanbul ignore next */
    (cov_1ujcvmz8hz().b[1][1]++, {
      "default": mod
    })
  );
}));

/* istanbul ignore next */
cov_1ujcvmz8hz().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1ujcvmz8hz().s[3]++;
exports.FilterOperator = exports.Operator = void 0;
const EnumValueObject_1 =
/* istanbul ignore next */
(cov_1ujcvmz8hz().s[4]++, __importDefault(require("../value-object/EnumValueObject")));
const InvalidArgumentError_1 =
/* istanbul ignore next */
(cov_1ujcvmz8hz().s[5]++, require("../value-object/InvalidArgumentError"));
var Operator;

/* istanbul ignore next */
cov_1ujcvmz8hz().s[6]++;

(function (Operator) {
  /* istanbul ignore next */
  cov_1ujcvmz8hz().f[1]++;
  cov_1ujcvmz8hz().s[7]++;
  Operator["EQUAL"] = "=";

  /* istanbul ignore next */
  cov_1ujcvmz8hz().s[8]++;
  Operator["NOT_EQUAL"] = "!=";

  /* istanbul ignore next */
  cov_1ujcvmz8hz().s[9]++;
  Operator["GT"] = ">";

  /* istanbul ignore next */
  cov_1ujcvmz8hz().s[10]++;
  Operator["GT_OR_EQUAL"] = ">=";

  /* istanbul ignore next */
  cov_1ujcvmz8hz().s[11]++;
  Operator["LT"] = "<";

  /* istanbul ignore next */
  cov_1ujcvmz8hz().s[12]++;
  Operator["LT_OR_EQUAL"] = "<=";

  /* istanbul ignore next */
  cov_1ujcvmz8hz().s[13]++;
  Operator["LIKE"] = "LIKE"; // CONTAINS = 'CONTAINS',
  // NOT_CONTAINS = 'NOT_CONTAINS',
})(Operator =
/* istanbul ignore next */
(cov_1ujcvmz8hz().b[3][0]++, exports.Operator) ||
/* istanbul ignore next */
(cov_1ujcvmz8hz().b[3][1]++, exports.Operator = {}));

class FilterOperator extends
/* istanbul ignore next */
(EnumValueObject_1.default) {
  static equal() {
    /* istanbul ignore next */
    cov_1ujcvmz8hz().f[2]++;
    cov_1ujcvmz8hz().s[14]++;
    return this.fromValue(Operator.EQUAL);
  }

  static fromValue(value) {
    /* istanbul ignore next */
    cov_1ujcvmz8hz().f[3]++;
    cov_1ujcvmz8hz().s[15]++;

    switch (value) {
      case Operator.EQUAL:
        /* istanbul ignore next */
        cov_1ujcvmz8hz().b[4][0]++;
        cov_1ujcvmz8hz().s[16]++;
        return new FilterOperator(Operator.EQUAL);

      case Operator.NOT_EQUAL:
        /* istanbul ignore next */
        cov_1ujcvmz8hz().b[4][1]++;
        cov_1ujcvmz8hz().s[17]++;
        return new FilterOperator(Operator.NOT_EQUAL);

      case Operator.GT:
        /* istanbul ignore next */
        cov_1ujcvmz8hz().b[4][2]++;
        cov_1ujcvmz8hz().s[18]++;
        return new FilterOperator(Operator.GT);

      case Operator.GT_OR_EQUAL:
        /* istanbul ignore next */
        cov_1ujcvmz8hz().b[4][3]++;
        cov_1ujcvmz8hz().s[19]++;
        return new FilterOperator(Operator.GT_OR_EQUAL);

      case Operator.LT:
        /* istanbul ignore next */
        cov_1ujcvmz8hz().b[4][4]++;
        cov_1ujcvmz8hz().s[20]++;
        return new FilterOperator(Operator.LT);

      case Operator.LT_OR_EQUAL:
        /* istanbul ignore next */
        cov_1ujcvmz8hz().b[4][5]++;
        cov_1ujcvmz8hz().s[21]++;
        return new FilterOperator(Operator.LT_OR_EQUAL);

      case Operator.LIKE:
        /* istanbul ignore next */
        cov_1ujcvmz8hz().b[4][6]++;
        cov_1ujcvmz8hz().s[22]++;
        return new FilterOperator(Operator.LIKE);
      // case Operator.CONTAINS:
      //     return new FilterOperator(Operator.CONTAINS);
      // case Operator.NOT_CONTAINS:
      //     return new FilterOperator(Operator.NOT_CONTAINS);

      default:
        /* istanbul ignore next */
        cov_1ujcvmz8hz().b[4][7]++;
        cov_1ujcvmz8hz().s[23]++;
        throw new InvalidArgumentError_1.InvalidArgumentError(`The filter operator ${value} is invalid`);
    }
  }

  constructor(value) {
    /* istanbul ignore next */
    cov_1ujcvmz8hz().f[4]++;
    cov_1ujcvmz8hz().s[24]++;
    super(value, Object.values(Operator));
  }

  throwErrorForInvalidValue(value) {
    /* istanbul ignore next */
    cov_1ujcvmz8hz().f[5]++;
    cov_1ujcvmz8hz().s[25]++;
    throw new InvalidArgumentError_1.InvalidArgumentError(`The filter operator ${value} is invalid`);
  }

}

/* istanbul ignore next */
cov_1ujcvmz8hz().s[26]++;
exports.FilterOperator = FilterOperator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9jdWF0cm9vY2hlbnRhL01hZ2ljU2hvcHBlci9tYWdpY3Nob3BwZXItbm9kZS9zcmMvbWljcm9rL2NvbW1vbi9jcml0ZXJpYS9GaWx0ZXJPcGVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBU0U7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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Q0FBeUIsdUJBQXVCLEtBQUssYUFBckQsQ0FBTjtBQUNIOztBQXBDd0Q7Ozs7QUFBN0QsT0FBQSxDQUFBLGNBQUEsR0FBQSxjQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEVudW1WYWx1ZU9iamVjdCBmcm9tICcuLi92YWx1ZS1vYmplY3QvRW51bVZhbHVlT2JqZWN0JztcbmltcG9ydCB7IEludmFsaWRBcmd1bWVudEVycm9yIH0gZnJvbSAnLi4vdmFsdWUtb2JqZWN0L0ludmFsaWRBcmd1bWVudEVycm9yJztcblxuZXhwb3J0IGVudW0gT3BlcmF0b3Ige1xuICBFUVVBTCA9ICc9JyxcbiAgTk9UX0VRVUFMID0gJyE9JyxcbiAgR1QgPSAnPicsXG4gIEdUX09SX0VRVUFMID0gJz49JyxcbiAgTFQgPSAnPCcsXG4gIExUX09SX0VRVUFMID0gJzw9JyxcbiAgTElLRSA9ICdMSUtFJyxcbiAgLy8gQ09OVEFJTlMgPSAnQ09OVEFJTlMnLFxuICAvLyBOT1RfQ09OVEFJTlMgPSAnTk9UX0NPTlRBSU5TJyxcbn1cblxuZXhwb3J0IGNsYXNzIEZpbHRlck9wZXJhdG9yIGV4dGVuZHMgRW51bVZhbHVlT2JqZWN0PE9wZXJhdG9yPiB7XG4gICAgc3RhdGljIGVxdWFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tVmFsdWUoT3BlcmF0b3IuRVFVQUwpO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tVmFsdWUodmFsdWU6IHN0cmluZyk6IEZpbHRlck9wZXJhdG9yIHtcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5FUVVBTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZpbHRlck9wZXJhdG9yKE9wZXJhdG9yLkVRVUFMKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuTk9UX0VRVUFMOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmlsdGVyT3BlcmF0b3IoT3BlcmF0b3IuTk9UX0VRVUFMKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuR1Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGaWx0ZXJPcGVyYXRvcihPcGVyYXRvci5HVCk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkdUX09SX0VRVUFMOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmlsdGVyT3BlcmF0b3IoT3BlcmF0b3IuR1RfT1JfRVFVQUwpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5MVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZpbHRlck9wZXJhdG9yKE9wZXJhdG9yLkxUKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuTFRfT1JfRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGaWx0ZXJPcGVyYXRvcihPcGVyYXRvci5MVF9PUl9FUVVBTCk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkxJS0U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGaWx0ZXJPcGVyYXRvcihPcGVyYXRvci5MSUtFKTtcbiAgICAgICAgICAgIC8vIGNhc2UgT3BlcmF0b3IuQ09OVEFJTlM6XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIG5ldyBGaWx0ZXJPcGVyYXRvcihPcGVyYXRvci5DT05UQUlOUyk7XG4gICAgICAgICAgICAvLyBjYXNlIE9wZXJhdG9yLk5PVF9DT05UQUlOUzpcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gbmV3IEZpbHRlck9wZXJhdG9yKE9wZXJhdG9yLk5PVF9DT05UQUlOUyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgVGhlIGZpbHRlciBvcGVyYXRvciAke3ZhbHVlfSBpcyBpbnZhbGlkYCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogT3BlcmF0b3IpIHtcbiAgICAgICAgc3VwZXIodmFsdWUsIE9iamVjdC52YWx1ZXMoT3BlcmF0b3IpKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgdGhyb3dFcnJvckZvckludmFsaWRWYWx1ZSh2YWx1ZTogT3BlcmF0b3IpOiB2b2lkIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKGBUaGUgZmlsdGVyIG9wZXJhdG9yICR7dmFsdWV9IGlzIGludmFsaWRgKTtcbiAgICB9XG59XG4iXX0=