640744d02d0854e424a90dbb12bfc93b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterOperator = exports.Operator = void 0;
const EnumValueObject_1 = __importDefault(require("../value-object/EnumValueObject"));
const InvalidArgumentError_1 = require("../value-object/InvalidArgumentError");
var Operator;
(function (Operator) {
    Operator["EQUAL"] = "=";
    Operator["NOT_EQUAL"] = "!=";
    Operator["GT"] = ">";
    Operator["GT_OR_EQUAL"] = ">=";
    Operator["LT"] = "<";
    Operator["LT_OR_EQUAL"] = "<=";
    Operator["LIKE"] = "LIKE";
    // CONTAINS = 'CONTAINS',
    // NOT_CONTAINS = 'NOT_CONTAINS',
})(Operator = exports.Operator || (exports.Operator = {}));
class FilterOperator extends EnumValueObject_1.default {
    static equal() {
        return this.fromValue(Operator.EQUAL);
    }
    static fromValue(value) {
        switch (value) {
            case Operator.EQUAL:
                return new FilterOperator(Operator.EQUAL);
            case Operator.NOT_EQUAL:
                return new FilterOperator(Operator.NOT_EQUAL);
            case Operator.GT:
                return new FilterOperator(Operator.GT);
            case Operator.GT_OR_EQUAL:
                return new FilterOperator(Operator.GT_OR_EQUAL);
            case Operator.LT:
                return new FilterOperator(Operator.LT);
            case Operator.LT_OR_EQUAL:
                return new FilterOperator(Operator.LT_OR_EQUAL);
            case Operator.LIKE:
                return new FilterOperator(Operator.LIKE);
            // case Operator.CONTAINS:
            //     return new FilterOperator(Operator.CONTAINS);
            // case Operator.NOT_CONTAINS:
            //     return new FilterOperator(Operator.NOT_CONTAINS);
            default:
                throw new InvalidArgumentError_1.InvalidArgumentError(`The filter operator ${value} is invalid`);
        }
    }
    constructor(value) {
        super(value, Object.values(Operator));
    }
    throwErrorForInvalidValue(value) {
        throw new InvalidArgumentError_1.InvalidArgumentError(`The filter operator ${value} is invalid`);
    }
}
exports.FilterOperator = FilterOperator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9taWNyb2svY29tbW9uL2NyaXRlcmlhL0ZpbHRlck9wZXJhdG9yLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUE4RDtBQUM5RCwrRUFBNEU7QUFFNUUsSUFBWSxRQVVYO0FBVkQsV0FBWSxRQUFRO0lBQ2xCLHVCQUFXLENBQUE7SUFDWCw0QkFBZ0IsQ0FBQTtJQUNoQixvQkFBUSxDQUFBO0lBQ1IsOEJBQWtCLENBQUE7SUFDbEIsb0JBQVEsQ0FBQTtJQUNSLDhCQUFrQixDQUFBO0lBQ2xCLHlCQUFhLENBQUE7SUFDYix5QkFBeUI7SUFDekIsaUNBQWlDO0FBQ25DLENBQUMsRUFWVyxRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQVVuQjtBQUVELE1BQWEsY0FBZSxTQUFRLHlCQUF5QjtJQUN6RCxNQUFNLENBQUMsS0FBSztRQUNSLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBYTtRQUMxQixRQUFRLEtBQUssRUFBRTtZQUNYLEtBQUssUUFBUSxDQUFDLEtBQUs7Z0JBQ2YsT0FBTyxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUMsS0FBSyxRQUFRLENBQUMsU0FBUztnQkFDbkIsT0FBTyxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDbEQsS0FBSyxRQUFRLENBQUMsRUFBRTtnQkFDWixPQUFPLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMzQyxLQUFLLFFBQVEsQ0FBQyxXQUFXO2dCQUNyQixPQUFPLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNwRCxLQUFLLFFBQVEsQ0FBQyxFQUFFO2dCQUNaLE9BQU8sSUFBSSxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzNDLEtBQUssUUFBUSxDQUFDLFdBQVc7Z0JBQ3JCLE9BQU8sSUFBSSxjQUFjLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3BELEtBQUssUUFBUSxDQUFDLElBQUk7Z0JBQ2QsT0FBTyxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0MsMEJBQTBCO1lBQzFCLG9EQUFvRDtZQUNwRCw4QkFBOEI7WUFDOUIsd0RBQXdEO1lBQ3hEO2dCQUNJLE1BQU0sSUFBSSwyQ0FBb0IsQ0FBQyx1QkFBdUIsS0FBSyxhQUFhLENBQUMsQ0FBQztTQUNqRjtJQUNMLENBQUM7SUFFRCxZQUFZLEtBQWU7UUFDdkIsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVTLHlCQUF5QixDQUFDLEtBQWU7UUFDL0MsTUFBTSxJQUFJLDJDQUFvQixDQUFDLHVCQUF1QixLQUFLLGFBQWEsQ0FBQyxDQUFDO0lBQzlFLENBQUM7Q0FDSjtBQXJDRCx3Q0FxQ0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9taWNyb2svY29tbW9uL2NyaXRlcmlhL0ZpbHRlck9wZXJhdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFbnVtVmFsdWVPYmplY3QgZnJvbSAnLi4vdmFsdWUtb2JqZWN0L0VudW1WYWx1ZU9iamVjdCc7XG5pbXBvcnQgeyBJbnZhbGlkQXJndW1lbnRFcnJvciB9IGZyb20gJy4uL3ZhbHVlLW9iamVjdC9JbnZhbGlkQXJndW1lbnRFcnJvcic7XG5cbmV4cG9ydCBlbnVtIE9wZXJhdG9yIHtcbiAgRVFVQUwgPSAnPScsXG4gIE5PVF9FUVVBTCA9ICchPScsXG4gIEdUID0gJz4nLFxuICBHVF9PUl9FUVVBTCA9ICc+PScsXG4gIExUID0gJzwnLFxuICBMVF9PUl9FUVVBTCA9ICc8PScsXG4gIExJS0UgPSAnTElLRScsXG4gIC8vIENPTlRBSU5TID0gJ0NPTlRBSU5TJyxcbiAgLy8gTk9UX0NPTlRBSU5TID0gJ05PVF9DT05UQUlOUycsXG59XG5cbmV4cG9ydCBjbGFzcyBGaWx0ZXJPcGVyYXRvciBleHRlbmRzIEVudW1WYWx1ZU9iamVjdDxPcGVyYXRvcj4ge1xuICAgIHN0YXRpYyBlcXVhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVZhbHVlKE9wZXJhdG9yLkVRVUFMKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVZhbHVlKHZhbHVlOiBzdHJpbmcpOiBGaWx0ZXJPcGVyYXRvciB7XG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGaWx0ZXJPcGVyYXRvcihPcGVyYXRvci5FUVVBTCk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLk5PVF9FUVVBTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZpbHRlck9wZXJhdG9yKE9wZXJhdG9yLk5PVF9FUVVBTCk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkdUOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmlsdGVyT3BlcmF0b3IoT3BlcmF0b3IuR1QpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5HVF9PUl9FUVVBTDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZpbHRlck9wZXJhdG9yKE9wZXJhdG9yLkdUX09SX0VRVUFMKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuTFQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGaWx0ZXJPcGVyYXRvcihPcGVyYXRvci5MVCk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkxUX09SX0VRVUFMOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmlsdGVyT3BlcmF0b3IoT3BlcmF0b3IuTFRfT1JfRVFVQUwpO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5MSUtFOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmlsdGVyT3BlcmF0b3IoT3BlcmF0b3IuTElLRSk7XG4gICAgICAgICAgICAvLyBjYXNlIE9wZXJhdG9yLkNPTlRBSU5TOlxuICAgICAgICAgICAgLy8gICAgIHJldHVybiBuZXcgRmlsdGVyT3BlcmF0b3IoT3BlcmF0b3IuQ09OVEFJTlMpO1xuICAgICAgICAgICAgLy8gY2FzZSBPcGVyYXRvci5OT1RfQ09OVEFJTlM6XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIG5ldyBGaWx0ZXJPcGVyYXRvcihPcGVyYXRvci5OT1RfQ09OVEFJTlMpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoYFRoZSBmaWx0ZXIgb3BlcmF0b3IgJHt2YWx1ZX0gaXMgaW52YWxpZGApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IodmFsdWU6IE9wZXJhdG9yKSB7XG4gICAgICAgIHN1cGVyKHZhbHVlLCBPYmplY3QudmFsdWVzKE9wZXJhdG9yKSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHRocm93RXJyb3JGb3JJbnZhbGlkVmFsdWUodmFsdWU6IE9wZXJhdG9yKTogdm9pZCB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgVGhlIGZpbHRlciBvcGVyYXRvciAke3ZhbHVlfSBpcyBpbnZhbGlkYCk7XG4gICAgfVxufVxuIl0sInZlcnNpb24iOjN9