{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/FilterOperator.ts","mappings":";;;;;;AAAA,sFAA8D;AAC9D,+EAA4E;AAE5E,IAAY,QAUX;AAVD,WAAY,QAAQ;IAClB,uBAAW,CAAA;IACX,4BAAgB,CAAA;IAChB,oBAAQ,CAAA;IACR,8BAAkB,CAAA;IAClB,oBAAQ,CAAA;IACR,8BAAkB,CAAA;IAClB,yBAAa,CAAA;IACb,yBAAyB;IACzB,iCAAiC;AACnC,CAAC,EAVW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAUnB;AAED,MAAa,cAAe,SAAQ,yBAAyB;IACzD,MAAM,CAAC,KAAK;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,KAAa;QAC1B,QAAQ,KAAK,EAAE;YACX,KAAK,QAAQ,CAAC,KAAK;gBACf,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC9C,KAAK,QAAQ,CAAC,SAAS;gBACnB,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAClD,KAAK,QAAQ,CAAC,EAAE;gBACZ,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC3C,KAAK,QAAQ,CAAC,WAAW;gBACrB,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACpD,KAAK,QAAQ,CAAC,EAAE;gBACZ,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC3C,KAAK,QAAQ,CAAC,WAAW;gBACrB,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACpD,KAAK,QAAQ,CAAC,IAAI;gBACd,OAAO,IAAI,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC7C,0BAA0B;YAC1B,oDAAoD;YACpD,8BAA8B;YAC9B,wDAAwD;YACxD;gBACI,MAAM,IAAI,2CAAoB,CAAC,uBAAuB,KAAK,aAAa,CAAC,CAAC;SACjF;IACL,CAAC;IAED,YAAY,KAAe;QACvB,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1C,CAAC;IAES,yBAAyB,CAAC,KAAe;QAC/C,MAAM,IAAI,2CAAoB,CAAC,uBAAuB,KAAK,aAAa,CAAC,CAAC;IAC9E,CAAC;CACJ;AArCD,wCAqCC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/FilterOperator.ts"],"sourcesContent":["import EnumValueObject from '../value-object/EnumValueObject';\nimport { InvalidArgumentError } from '../value-object/InvalidArgumentError';\n\nexport enum Operator {\n  EQUAL = '=',\n  NOT_EQUAL = '!=',\n  GT = '>',\n  GT_OR_EQUAL = '>=',\n  LT = '<',\n  LT_OR_EQUAL = '<=',\n  LIKE = 'LIKE',\n  // CONTAINS = 'CONTAINS',\n  // NOT_CONTAINS = 'NOT_CONTAINS',\n}\n\nexport class FilterOperator extends EnumValueObject<Operator> {\n    static equal() {\n        return this.fromValue(Operator.EQUAL);\n    }\n\n    static fromValue(value: string): FilterOperator {\n        switch (value) {\n            case Operator.EQUAL:\n                return new FilterOperator(Operator.EQUAL);\n            case Operator.NOT_EQUAL:\n                return new FilterOperator(Operator.NOT_EQUAL);\n            case Operator.GT:\n                return new FilterOperator(Operator.GT);\n            case Operator.GT_OR_EQUAL:\n                return new FilterOperator(Operator.GT_OR_EQUAL);\n            case Operator.LT:\n                return new FilterOperator(Operator.LT);\n            case Operator.LT_OR_EQUAL:\n                return new FilterOperator(Operator.LT_OR_EQUAL);\n            case Operator.LIKE:\n                return new FilterOperator(Operator.LIKE);\n            // case Operator.CONTAINS:\n            //     return new FilterOperator(Operator.CONTAINS);\n            // case Operator.NOT_CONTAINS:\n            //     return new FilterOperator(Operator.NOT_CONTAINS);\n            default:\n                throw new InvalidArgumentError(`The filter operator ${value} is invalid`);\n        }\n    }\n\n    constructor(value: Operator) {\n        super(value, Object.values(Operator));\n    }\n\n    protected throwErrorForInvalidValue(value: Operator): void {\n        throw new InvalidArgumentError(`The filter operator ${value} is invalid`);\n    }\n}\n"],"version":3}