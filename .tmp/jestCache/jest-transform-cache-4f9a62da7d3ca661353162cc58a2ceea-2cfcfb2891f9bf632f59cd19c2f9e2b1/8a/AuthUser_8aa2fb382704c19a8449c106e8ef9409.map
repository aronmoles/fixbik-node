{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/modules/auth/domain/AuthUser.ts"],"names":[],"mappingsiBK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjBL,MAAA,eAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,8BAAA,CAAA,CAAA;AAKA,MAAA,gCAAA;AAAA;AAAA,0BAAA,eAAA,CAAA,OAAA,CAAA,kCAAA,CAAA,CAAA,CAAA;;AAIA,MAAa,QAAb;AAAA;AAAA,CAA8B,eAAA,CAAA,aAA9B,EAA2C;AACvC,EAAA,WAAA,CACa,EADb,EAEa,KAFb,EAGa,QAHb,EAIa,oBAJb,EAIyE;AAAA;AAAA;AAAA;AAErE;;AAFqE;AAAA;AAH5D,SAAA,EAAA,GAAA,EAAA;;AAG4D;AAAA;AAF5D,SAAA,KAAA,GAAA,KAAA;;AAE4D;AAAA;AAD5D,SAAA,QAAA,GAAA,QAAA;;AAC4D;AAAA;AAA5D,SAAA,oBAAA,GAAA,oBAAA;AAGZ;;AAED,EAAA,YAAY,GAAA;AAAA;AAAA;;;;AAAA;AAAA;AACR,WAAO;AACH,MAAA,EAAE,EAAE,KAAK,EAAL,CAAQ,KAAR,EADD;AAEH,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW,KAAX,EAFJ;AAGH,MAAA,QAAQ,EAAE,KAAK,QAAL,CAAc,KAAd,EAHP;AAIH,MAAA,oBAAoB;AAAE;AAAA,oCAAA,EAAA,GAAA,KAAK,oBAAL,MAAyB,IAAzB;AAAA;AAAA,mCAAyB,EAAA,KAAA,KAAA,CAAzB;AAAA;AAAA,mCAAyB,KAAA,CAAzB;AAAA;AAAA,mCAAyB,EAAA,CAAE,KAAF,EAAzB;AAJnB,KAAP;AAMH;;AAED,EAAA,eAAe,CAAC,QAAD,EAA2B;AAAA;AAAA;AAAA;;AACtC,QAAI,CAAC,KAAK,QAAL,CAAc,MAAd,CAAqB,QAArB,CAAL,EAAqC;AAAA;AAAA;AAAA;AACjC,YAAM,IAAI,gCAAA,CAAA,OAAJ,EAAN;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAGH;;AAvBsC;;;;AAA3C,OAAA,CAAA,QAAA,GAAA,QAAA","sourcesContent":["import { AggregateRoot } from '@microk/common/AggregateRoot';\nimport { Nullable } from '@microk/common/Nullable';\nimport { PrimitivesObject } from '@microk/common/PrimitiveType';\nimport AuthUserEmail from './AuthUserEmail';\nimport AuthUserId from './AuthUserId';\nimport AuthUserIncorrectPasswordError from './AuthUserIncorrectPasswordError';\nimport AuthUserPassword from './AuthUserPassword';\nimport AuthUserRecoverPasswordToken from './AuthUserRecoverPasswordToken';\n\nexport class AuthUser extends AggregateRoot {\n    constructor(\n        readonly id: AuthUserId,\n        readonly email: AuthUserEmail,\n        readonly password: AuthUserPassword,\n        readonly recoverPasswordToken: Nullable<AuthUserRecoverPasswordToken>,\n    ) {\n        super();\n    }\n\n    toPrimitives(): PrimitivesObject {\n        return {\n            id: this.id.value(),\n            email: this.email.value(),\n            password: this.password.value(),\n            recoverPasswordToken: this.recoverPasswordToken?.value(),\n        };\n    }\n\n    isValidPassword(password: AuthUserPassword) {\n        if (!this.password.equals(password)) {\n            throw new AuthUserIncorrectPasswordError();\n        }\n    }\n}\n"]}