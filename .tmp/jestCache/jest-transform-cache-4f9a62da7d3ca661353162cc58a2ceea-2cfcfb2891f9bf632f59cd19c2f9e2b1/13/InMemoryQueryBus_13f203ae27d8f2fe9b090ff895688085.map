{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/cqrs/infrastructure/query/InMemoryQueryBus.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsByB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApBzB,MAAA,UAAA;AAAA;AAAA,0BAAA,eAAA,CAAA,OAAA,CAAA,uCAAA,CAAA,CAAA,CAAA;;AAMA,MAAqB,gBAArB,CAAqC;AAGjC,EAAA,WAAA,CACqB,mBADrB,EAEI,SAAA;AAAA;AAAA,+BAAqD,EAArD,CAFJ,EAE2D;AAAA;AAAA;AAAA;AADtC,SAAA,mBAAA,GAAA,mBAAA;;AACsC;AAAA;AAEvD,SAAK,QAAL,GAAgB,IAAI,UAAA,CAAA,OAAJ,CAAmC,SAAnC,CAAhB;AACH;;AAED,EAAA,GAAG,CAA0B,KAA1B,EAAsC;AAAA;AAAA;AAAA;AACrC,WAAO,KAAK,QAAL,CAAc,GAAd,CAAkB,KAAlB,EAAyB,MAAK;AAAA;AAAA;AACjC,YAAM,OAAO;AAAA;AAAA,gCAAG,KAAK,mBAAL,CAAyB,MAAzB,CAAgC,KAAhC,CAAH,CAAb;;AADiC;AAAA;AAEjC,aAAO,OAAO,CAAC,MAAR,CAAe,KAAf,CAAP;AACH,KAHM,CAAP;AAIH;;AAfgC;;;;AAArC,OAAA,CAAA,OAAA,GAAA,gBAAA","sourcesContent":["import { Mapper } from '../../../common/Mapper';\nimport WrapperExecutor from '../../../core/domain/WrapperExecutor';\nimport Executor from '../../../core/infrastructure/Executor';\nimport Query from '../../domain/query/Query';\nimport QueryBus from '../../domain/query/QueryBus';\nimport { QueryHandler } from '../../domain/query/QueryHandler';\nimport { QueryResponse } from '../../domain/query/QueryResponse';\n\nexport default class InMemoryQueryBus implements QueryBus {\n    private readonly executor: Executor<Query, QueryResponse>;\n\n    constructor(\n        private readonly queryHandlersMapper: Mapper<Query, QueryHandler<Query, QueryResponse>>,\n        executors: WrapperExecutor<Query, QueryResponse>[] = [],\n    ) {\n        this.executor = new Executor<Query, QueryResponse>(executors);\n    }\n\n    ask<R extends QueryResponse>(query: Query): Promise<R> {\n        return this.executor.run(query, () => {\n            const handler = this.queryHandlersMapper.search(query);\n            return handler.handle(query);\n        }) as Promise<R>;\n    }\n}\n"]}