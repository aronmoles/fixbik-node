e02c5d0ea70e049cc7ff43ac2732146f
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(require("./index"));
describe('OpenApi', () => {
    it('should create a valid auth token', () => __awaiter(void 0, void 0, void 0, function* () {
        const openApi = new index_1.default({
            baseDir: `${__dirname}/examples`,
            filesPattern: './*.ts',
            info: {
                title: 'Test',
                version: '1.0.0',
                description: 'Public API',
                license: {
                    name: 'MIT',
                },
            },
            components: {
                securitySchemes: {
                    jwt: {
                        type: 'http',
                        scheme: 'bearer',
                        bearerFormat: 'JWT',
                    },
                },
            },
        });
        const openApiDoc = openApi.generateDocs();
        expect(openApiDoc).toEqual({
            openapi: '3.0.0',
            info: {
                title: 'Test',
                version: '1.0.0',
                description: 'Public API',
                license: {
                    name: 'MIT',
                },
            },
            paths: {
                '/notification': {
                    post: {
                        operationId: 'addJob',
                        tags: [
                            'jobs',
                        ],
                        summary: 'Creates a new notification.',
                        description: '',
                        security: [
                            {
                                jwt: [],
                            },
                        ],
                        requestBody: {
                            description: 'Notification object to create',
                            required: true,
                            content: {
                                'application/json': {
                                    schema: {
                                        $ref: '#/components/schemas/Notification',
                                    },
                                },
                            },
                        },
                        responses: {
                            201: {
                                description: 'Successful operation. The notification has been created on the server.',
                                content: {
                                    'application/json': {
                                        schema: {
                                            $ref: '#/components/schemas/Notification',
                                        },
                                    },
                                },
                            },
                            400: {
                                description: 'Bad Request',
                                content: {
                                    'application/json': {
                                        schema: {
                                            $ref: '#/components/schemas/Error',
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },
            components: {
                securitySchemes: {
                    jwt: {
                        type: 'http',
                        scheme: 'bearer',
                        bearerFormat: 'JWT',
                    },
                },
                schemas: {
                    Error: {
                        type: 'object',
                        properties: {
                            message: {
                                type: 'string',
                            },
                            code: {
                                type: 'integer',
                                example: 404,
                            },
                        },
                    },
                    Notification: {
                        type: 'object',
                        required: [
                            'serviceUrl',
                        ],
                        properties: {
                            serviceUrl: {
                                type: 'string',
                            },
                            authenticationHeader: {
                                type: 'string',
                            },
                            certificateSubject: {
                                type: 'string',
                            },
                            parameters: {
                                type: 'string',
                            },
                        },
                    },
                },
            },
        });
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,