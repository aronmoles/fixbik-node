{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/docs/openapi/index.ts","mappings":";;;;;AAAA,wEAAyC;AASzC,iEAA8D;AAC9D,mEAAgE;AAChE,qDAAkD;AAClD,qFAAkF;AAClF,qEAAkE;AAClE,qDAAkD;AAelD,MAAqB,OAAO;IACxB,YACqB,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;IAE1C,CAAC;IAED,SAAS,CAAC,KAAK,EAAE,MAAM;QACnB,OAAO,IAAA,0BAAS,EAAC,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;IAChF,CAAC;IAED,eAAe,CAAC,GAAG;QACf,IAAI,CAAC,GAAG,EAAE;YACN,OAAO,EAAE,CAAC;SACb;QACD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YAC7B,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;gBACxB,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;aACnB;QACL,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACf,CAAC;IAED,YAAY;QACR,MAAM,KAAK,GAAG,IAAA,mCAAgB,EAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QACvD,MAAM,YAAY,GAAG,IAAA,qBAAS,EAAC,KAAK,CAAC,CAAC;QACtC,MAAM,QAAQ,GAAG,IAAA,iCAAe,EAAC,YAAY,CAAC,CAAC;QAC/C,MAAM,SAAS,GAAG,IAAA,qBAAS,GAAE,CAAC,QAAQ,CAAC,CAAA;QACvC,MAAM,YAAY,GAAG,IAAA,qCAAiB,EAAC,SAAS,CAAC,CAAA;QACjD,MAAM,YAAY,GAAG,IAAA,qDAAyB,EAAC,YAAY,CAAC,CAAA;QAE5D,MAAM,OAAO,GAAkB,IAAI,CAAC,eAAe,CAAC;YAChD,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;YACtB,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;YAC5B,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE;YAC9B,UAAU,kCACH,IAAI,CAAC,MAAM,CAAC,UAAU,KACzB,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,EAAE,GAChD;YACD,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;YAC9B,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;YACtB,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY;SACzC,CAAC,CAAC;QAEH,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;YACpC,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;gBACxC,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;oBACrB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC7E;qBAAM;oBACH,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;iBACtD;aACJ;SACJ;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;CACJ;AAxDD,0BAwDC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/docs/openapi/index.ts"],"sourcesContent":["import mergeWith from 'lodash.mergewith';\nimport { OpenAPIObject } from 'openapi3-ts';\nimport {\n    ComponentsObject, ExternalDocumentationObject,\n    InfoObject,\n    PathsObject,\n    SecurityRequirementObject,\n    ServerObject, TagObject,\n} from 'openapi3-ts/src/model/OpenApi';\nimport { getOnlyComments } from './consumers/GetOnlyComments';\nimport { globFilesMatches } from './consumers/GlobFilesMatches';\nimport { jsdocInfo } from './consumers/jsDocInfo';\nimport { parseJsonCommentsFromYaml } from './consumers/parseJsonCommentsFromYaml';\nimport { parseYamlComments } from './consumers/parseYamlComments';\nimport { readFiles } from './consumers/ReadFiles';\n\nexport type OpenApiConfig = {\n    baseDir: string,\n    filesPattern: string,\n\n    info: InfoObject;\n    servers?: ServerObject[];\n    paths?: PathsObject;\n    components?: ComponentsObject;\n    security?: SecurityRequirementObject[];\n    tags?: TagObject[];\n    externalDocs?: ExternalDocumentationObject;\n}\n\nexport default class OpenApi {\n    constructor(\n        private readonly config: OpenApiConfig,\n    ) {\n    }\n\n    mergeDeep(first, second) {\n        return mergeWith({}, first, second, (x, y) => (y === null ? x : undefined));\n    }\n\n    removeEmptyKeys(obj) {\n        if (!obj) {\n            return {};\n        }\n        Object.keys(obj).forEach((key) => {\n            if (obj[key] === undefined) {\n                delete obj[key];\n            }\n        });\n        return obj;\n    }\n\n    generateDocs(): OpenAPIObject {\n        const files = globFilesMatches(__dirname, './**/*.ts');\n        const fileContents = readFiles(files);\n        const comments = getOnlyComments(fileContents);\n        const jsDocInfo = jsdocInfo()(comments)\n        const yamlComments = parseYamlComments(jsDocInfo)\n        const jsonComments = parseJsonCommentsFromYaml(yamlComments)\n\n        const openApi: OpenAPIObject = this.removeEmptyKeys({\n            openapi: '3.0.0',\n            info: this.config.info,\n            servers: this.config.servers,\n            paths: this.config.paths || {},\n            components: {\n                ...this.config.components,\n                schemas: this.config.components.schemas || {},\n            },\n            security: this.config.security,\n            tags: this.config.tags,\n            externalDocs: this.config.externalDocs,\n        });\n\n        for (const jsonComment of jsonComments) {\n            for (const key of Object.keys(jsonComment)) {\n                if (key.startsWith('/')) {\n                    openApi.paths[key] = this.mergeDeep(openApi.paths[key], jsonComment[key]);\n                } else {\n                    openApi.components.schemas[key] = jsonComment[key];\n                }\n            }\n        }\n\n        return openApi;\n    }\n}\n"],"version":3}