{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/cqrs/infrastructure/query/QueryHandlersMapper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBQ;;;;;;;;;;;;;AAvBR,MAAA,yBAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,4CAAA,CAAA,CAAA;;AAGA,MAAqB,mBAArB,CAAwC;AAGpC,EAAA,WAAA,CAAY,aAAZ,EAAoE;AAAA;AAAA;AAAA;AAChE,SAAK,gBAAL,GAAwB,KAAK,cAAL,CAAoB,aAApB,CAAxB;AACH;;AAEO,EAAA,cAAc,CAClB,aADkB,EACsC;AAAA;AAAA;AAExD,UAAM,WAAW;AAAA;AAAA,8BAAG,IAAI,GAAJ,EAAH,CAAjB;;AAFwD;AAAA;AAIxD,IAAA,aAAa,CAAC,OAAd,CAAsB,CAAC,YAAD,KAAiB;AAAA;AAAA;AAAA;AACnC,MAAA,WAAW,CAAC,GAAZ,CAAgB,YAAY,CAAC,YAAb,EAAhB,EAA6C,YAA7C;AACH,KAFD;;AAJwD;AAAA;AAQxD,WAAO,WAAP;AACH;;AAEM,EAAA,MAAM,CAAC,KAAD,EAAa;AAAA;AAAA;AACtB,UAAM,YAAY;AAAA;AAAA,8BAAG,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,KAAK,CAAC,WAAN,CAAkB,IAA5C,CAAH,CAAlB;;AADsB;AAAA;;AAGtB,QAAI,CAAC,YAAL,EAAmB;AAAA;AAAA;AAAA;AACf,YAAM,IAAI,yBAAA,CAAA,uBAAJ,CAA4B,KAA5B,CAAN;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;;AAHsB;AAOtB,WAAO,YAAP;AACH;;AA3BmC;;;;AAAxC,OAAA,CAAA,OAAA,GAAA,mBAAA","sourcesContent":["import Query from '../../domain/query/Query';\nimport { QueryHandler } from '../../domain/query/QueryHandler';\nimport { QueryNotRegisteredError } from '../../domain/query/QueryNotRegisteredError';\nimport { QueryResponse } from '../../domain/query/QueryResponse';\n\nexport default class QueryHandlersMapper {\n    private queryHandlersMap: Map<string, QueryHandler<Query, QueryResponse>>;\n\n    constructor(queryHandlers: Array<QueryHandler<Query, QueryResponse>>) {\n        this.queryHandlersMap = this.formatHandlers(queryHandlers);\n    }\n\n    private formatHandlers(\n        queryHandlers: Array<QueryHandler<Query, QueryResponse>>\n    ): Map<string, QueryHandler<Query, QueryResponse>> {\n        const handlersMap = new Map();\n\n        queryHandlers.forEach((queryHandler) => {\n            handlersMap.set(queryHandler.subscribedTo(), queryHandler);\n        });\n\n        return handlersMap;\n    }\n\n    public search(query: Query): QueryHandler<Query, QueryResponse> {\n        const queryHandler = this.queryHandlersMap.get(query.constructor.name);\n\n        if (!queryHandler) {\n            throw new QueryNotRegisteredError(query);\n        }\n\n        return queryHandler;\n    }\n}\n"]}