{"version":3,"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/Filter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBQ;;;;;;;;;;;;;;;;;AAlBR,MAAA,sBAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,sCAAA,CAAA,CAAA;AACA,MAAA,aAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,eAAA,CAAA,CAAA;AACA,MAAA,gBAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,kBAAA,CAAA,CAAA;AACA,MAAA,aAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;AAEA,MAAa,MAAb,CAAmB;AAKf,EAAA,WAAA,CAAY,KAAZ,EAAgC,QAAhC,EAA0D,KAA1D,EAA4E;AAAA;AAAA;AAAA;AACxE,SAAK,KAAL,GAAa,KAAb;;AADwE;AAAA;AAExE,SAAK,QAAL,GAAgB,QAAhB;;AAFwE;AAAA;AAGxE,SAAK,KAAL,GAAa,KAAb;AACH;;AAEgB,SAAV,UAAU,CAAC,MAAD,EAA4B;AAAA;AAAA;AACzC,UAAM,KAAK;AAAA;AAAA,8BAAG,MAAM,CAAC,GAAP,CAAW,OAAX,CAAH,CAAX;AACA,UAAM,QAAQ;AAAA;AAAA,+BAAG,MAAM,CAAC,GAAP,CAAW,UAAX,CAAH,CAAd;AACA,UAAM,KAAK;AAAA;AAAA,+BAAG,MAAM,CAAC,GAAP,CAAW,OAAX,CAAH,CAAX;;AAHyC;AAAA;;AAKzC;AAAI;AAAA,kCAAC,KAAD;AAAA;AAAA,iCAAU,CAAC,QAAX;AAAA;AAAA,iCAAuB,CAAC,KAAxB,CAAJ,EAAmC;AAAA;AAAA;AAAA;AAC/B,YAAM,IAAI,sBAAA,CAAA,oBAAJ,CAAyB,uBAAzB,CAAN;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;;AALyC;AASzC,WAAO,IAAI,MAAJ,CAAW,IAAI,aAAA,CAAA,WAAJ,CAAgB,KAAhB,CAAX,EAAmC,gBAAA,CAAA,cAAA,CAAe,SAAf,CAAyB,QAAzB,CAAnC,EAAuE,IAAI,aAAA,CAAA,WAAJ,CAAgB,KAAhB,CAAvE,CAAP;AACH;;AArBc;;;;AAAnB,OAAA,CAAA,MAAA,GAAA,MAAA","sourcesContent":["import { InvalidArgumentError } from '../value-object/InvalidArgumentError';\nimport { FilterField } from './FilterField';\nimport { FilterOperator } from './FilterOperator';\nimport { FilterValue } from './FilterValue';\n\nexport class Filter {\n    readonly field: FilterField;\n    readonly operator: FilterOperator;\n    readonly value: FilterValue;\n\n    constructor(field: FilterField, operator: FilterOperator, value: FilterValue) {\n        this.field = field;\n        this.operator = operator;\n        this.value = value;\n    }\n\n    static fromValues(values: Map<string, string>): Filter {\n        const field = values.get('field');\n        const operator = values.get('operator');\n        const value = values.get('value');\n\n        if (!field || !operator || !value) {\n            throw new InvalidArgumentError('The filter is invalid');\n        }\n\n        return new Filter(new FilterField(field), FilterOperator.fromValue(operator), new FilterValue(value));\n    }\n}\n"]}