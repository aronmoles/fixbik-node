c42fe128a865c33b78547d3d8248d523
"use strict";

/* istanbul ignore next */
function cov_1p2mao4v3x() {
  var path = "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/Filter.ts";
  var hash = "4f90c175301a9780f1ab3218d4d3443422f3b74d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/Filter.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 24
        }
      },
      "2": {
        start: {
          line: 4,
          column: 31
        },
        end: {
          line: 4,
          column: 78
        }
      },
      "3": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 46
        }
      },
      "4": {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 6,
          column: 52
        }
      },
      "5": {
        start: {
          line: 7,
          column: 22
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 27
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 27
        }
      },
      "9": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 41
        }
      },
      "10": {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 16,
          column: 47
        }
      },
      "11": {
        start: {
          line: 17,
          column: 22
        },
        end: {
          line: 17,
          column: 41
        }
      },
      "12": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "13": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 91
        }
      },
      "14": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 155
        }
      },
      "15": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 40
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 30
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 14
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 12
          },
          end: {
            line: 18,
            column: 18
          }
        }, {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 18,
            column: 31
          }
        }, {
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 18,
            column: 41
          }
        }],
        line: 18
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/Filter.ts",
      mappings: ";;;AAAA,+EAA4E;AAC5E,+CAA4C;AAC5C,qDAAkD;AAClD,+CAA4C;AAE5C,MAAa,MAAM;IAKf,YAAY,KAAkB,EAAE,QAAwB,EAAE,KAAkB;QACxE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,MAA2B;QACzC,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAClC,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxC,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAElC,IAAI,CAAC,KAAK,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,EAAE;YAC/B,MAAM,IAAI,2CAAoB,CAAC,uBAAuB,CAAC,CAAC;SAC3D;QAED,OAAO,IAAI,MAAM,CAAC,IAAI,yBAAW,CAAC,KAAK,CAAC,EAAE,+BAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,yBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1G,CAAC;CACJ;AAtBD,wBAsBC",
      names: [],
      sources: ["/Users/cuatroochenta/MagicShopper/magicshopper-node/src/microk/common/criteria/Filter.ts"],
      sourcesContent: ["import { InvalidArgumentError } from '../value-object/InvalidArgumentError';\nimport { FilterField } from './FilterField';\nimport { FilterOperator } from './FilterOperator';\nimport { FilterValue } from './FilterValue';\n\nexport class Filter {\n    readonly field: FilterField;\n    readonly operator: FilterOperator;\n    readonly value: FilterValue;\n\n    constructor(field: FilterField, operator: FilterOperator, value: FilterValue) {\n        this.field = field;\n        this.operator = operator;\n        this.value = value;\n    }\n\n    static fromValues(values: Map<string, string>): Filter {\n        const field = values.get('field');\n        const operator = values.get('operator');\n        const value = values.get('value');\n\n        if (!field || !operator || !value) {\n            throw new InvalidArgumentError('The filter is invalid');\n        }\n\n        return new Filter(new FilterField(field), FilterOperator.fromValue(operator), new FilterValue(value));\n    }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4f90c175301a9780f1ab3218d4d3443422f3b74d"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1p2mao4v3x = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_1p2mao4v3x();
cov_1p2mao4v3x().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});

/* istanbul ignore next */
cov_1p2mao4v3x().s[1]++;
exports.Filter = void 0;
const InvalidArgumentError_1 =
/* istanbul ignore next */
(cov_1p2mao4v3x().s[2]++, require("../value-object/InvalidArgumentError"));
const FilterField_1 =
/* istanbul ignore next */
(cov_1p2mao4v3x().s[3]++, require("./FilterField"));
const FilterOperator_1 =
/* istanbul ignore next */
(cov_1p2mao4v3x().s[4]++, require("./FilterOperator"));
const FilterValue_1 =
/* istanbul ignore next */
(cov_1p2mao4v3x().s[5]++, require("./FilterValue"));

class Filter {
  constructor(field, operator, value) {
    /* istanbul ignore next */
    cov_1p2mao4v3x().f[0]++;
    cov_1p2mao4v3x().s[6]++;
    this.field = field;

    /* istanbul ignore next */
    cov_1p2mao4v3x().s[7]++;
    this.operator = operator;

    /* istanbul ignore next */
    cov_1p2mao4v3x().s[8]++;
    this.value = value;
  }

  static fromValues(values) {
    /* istanbul ignore next */
    cov_1p2mao4v3x().f[1]++;
    const field =
    /* istanbul ignore next */
    (cov_1p2mao4v3x().s[9]++, values.get('field'));
    const operator =
    /* istanbul ignore next */
    (cov_1p2mao4v3x().s[10]++, values.get('operator'));
    const value =
    /* istanbul ignore next */
    (cov_1p2mao4v3x().s[11]++, values.get('value'));

    /* istanbul ignore next */
    cov_1p2mao4v3x().s[12]++;

    if (
    /* istanbul ignore next */
    (cov_1p2mao4v3x().b[1][0]++, !field) ||
    /* istanbul ignore next */
    (cov_1p2mao4v3x().b[1][1]++, !operator) ||
    /* istanbul ignore next */
    (cov_1p2mao4v3x().b[1][2]++, !value)) {
      /* istanbul ignore next */
      cov_1p2mao4v3x().b[0][0]++;
      cov_1p2mao4v3x().s[13]++;
      throw new InvalidArgumentError_1.InvalidArgumentError('The filter is invalid');
    } else
    /* istanbul ignore next */
    {
      cov_1p2mao4v3x().b[0][1]++;
    }

    cov_1p2mao4v3x().s[14]++;
    return new Filter(new FilterField_1.FilterField(field), FilterOperator_1.FilterOperator.fromValue(operator), new FilterValue_1.FilterValue(value));
  }

}

/* istanbul ignore next */
cov_1p2mao4v3x().s[15]++;
exports.Filter = Filter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9jdWF0cm9vY2hlbnRhL01hZ2ljU2hvcHBlci9tYWdpY3Nob3BwZXItbm9kZS9zcmMvbWljcm9rL2NvbW1vbi9jcml0ZXJpYS9GaWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQlE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbEJSLE1BQUEsc0JBQUE7QUFBQTtBQUFBLDBCQUFBLE9BQUEsQ0FBQSxzQ0FBQSxDQUFBLENBQUE7QUFDQSxNQUFBLGFBQUE7QUFBQTtBQUFBLDBCQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQTtBQUNBLE1BQUEsZ0JBQUE7QUFBQTtBQUFBLDBCQUFBLE9BQUEsQ0FBQSxrQkFBQSxDQUFBLENBQUE7QUFDQSxNQUFBLGFBQUE7QUFBQTtBQUFBLDBCQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQTs7QUFFQSxNQUFhLE1BQWIsQ0FBbUI7QUFLZixFQUFBLFdBQUEsQ0FBWSxLQUFaLEVBQWdDLFFBQWhDLEVBQTBELEtBQTFELEVBQTRFO0FBQUE7QUFBQTtBQUFBO0FBQ3hFLFNBQUssS0FBTCxHQUFhLEtBQWI7O0FBRHdFO0FBQUE7QUFFeEUsU0FBSyxRQUFMLEdBQWdCLFFBQWhCOztBQUZ3RTtBQUFBO0FBR3hFLFNBQUssS0FBTCxHQUFhLEtBQWI7QUFDSDs7QUFFZ0IsU0FBVixVQUFVLENBQUMsTUFBRCxFQUE0QjtBQUFBO0FBQUE7QUFDekMsVUFBTSxLQUFLO0FBQUE7QUFBQSw4QkFBRyxNQUFNLENBQUMsR0FBUCxDQUFXLE9BQVgsQ0FBSCxDQUFYO0FBQ0EsVUFBTSxRQUFRO0FBQUE7QUFBQSwrQkFBRyxNQUFNLENBQUMsR0FBUCxDQUFXLFVBQVgsQ0FBSCxDQUFkO0FBQ0EsVUFBTSxLQUFLO0FBQUE7QUFBQSwrQkFBRyxNQUFNLENBQUMsR0FBUCxDQUFXLE9BQVgsQ0FBSCxDQUFYOztBQUh5QztBQUFBOztBQUt6QztBQUFJO0FBQUEsa0NBQUMsS0FBRDtBQUFBO0FBQUEsaUNBQVUsQ0FBQyxRQUFYO0FBQUE7QUFBQSxpQ0FBdUIsQ0FBQyxLQUF4QixDQUFKLEVBQW1DO0FBQUE7QUFBQTtBQUFBO0FBQy9CLFlBQU0sSUFBSSxzQkFBQSxDQUFBLG9CQUFKLENBQXlCLHVCQUF6QixDQUFOO0FBQ0gsS0FGRDtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUx5QztBQVN6QyxXQUFPLElBQUksTUFBSixDQUFXLElBQUksYUFBQSxDQUFBLFdBQUosQ0FBZ0IsS0FBaEIsQ0FBWCxFQUFtQyxnQkFBQSxDQUFBLGNBQUEsQ0FBZSxTQUFmLENBQXlCLFFBQXpCLENBQW5DLEVBQXVFLElBQUksYUFBQSxDQUFBLFdBQUosQ0FBZ0IsS0FBaEIsQ0FBdkUsQ0FBUDtBQUNIOztBQXJCYzs7OztBQUFuQixPQUFBLENBQUEsTUFBQSxHQUFBLE1BQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnZhbGlkQXJndW1lbnRFcnJvciB9IGZyb20gJy4uL3ZhbHVlLW9iamVjdC9JbnZhbGlkQXJndW1lbnRFcnJvcic7XG5pbXBvcnQgeyBGaWx0ZXJGaWVsZCB9IGZyb20gJy4vRmlsdGVyRmllbGQnO1xuaW1wb3J0IHsgRmlsdGVyT3BlcmF0b3IgfSBmcm9tICcuL0ZpbHRlck9wZXJhdG9yJztcbmltcG9ydCB7IEZpbHRlclZhbHVlIH0gZnJvbSAnLi9GaWx0ZXJWYWx1ZSc7XG5cbmV4cG9ydCBjbGFzcyBGaWx0ZXIge1xuICAgIHJlYWRvbmx5IGZpZWxkOiBGaWx0ZXJGaWVsZDtcbiAgICByZWFkb25seSBvcGVyYXRvcjogRmlsdGVyT3BlcmF0b3I7XG4gICAgcmVhZG9ubHkgdmFsdWU6IEZpbHRlclZhbHVlO1xuXG4gICAgY29uc3RydWN0b3IoZmllbGQ6IEZpbHRlckZpZWxkLCBvcGVyYXRvcjogRmlsdGVyT3BlcmF0b3IsIHZhbHVlOiBGaWx0ZXJWYWx1ZSkge1xuICAgICAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tVmFsdWVzKHZhbHVlczogTWFwPHN0cmluZywgc3RyaW5nPik6IEZpbHRlciB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gdmFsdWVzLmdldCgnZmllbGQnKTtcbiAgICAgICAgY29uc3Qgb3BlcmF0b3IgPSB2YWx1ZXMuZ2V0KCdvcGVyYXRvcicpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlcy5nZXQoJ3ZhbHVlJyk7XG5cbiAgICAgICAgaWYgKCFmaWVsZCB8fCAhb3BlcmF0b3IgfHwgIXZhbHVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1RoZSBmaWx0ZXIgaXMgaW52YWxpZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBGaWx0ZXIobmV3IEZpbHRlckZpZWxkKGZpZWxkKSwgRmlsdGVyT3BlcmF0b3IuZnJvbVZhbHVlKG9wZXJhdG9yKSwgbmV3IEZpbHRlclZhbHVlKHZhbHVlKSk7XG4gICAgfVxufVxuIl19