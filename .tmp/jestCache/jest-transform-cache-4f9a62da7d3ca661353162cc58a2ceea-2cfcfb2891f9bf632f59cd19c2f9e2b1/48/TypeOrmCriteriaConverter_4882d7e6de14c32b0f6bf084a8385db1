3cb337505f33768cb6a551bfb0d300d8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typeorm_1 = require("typeorm");
const FilterOperator_1 = require("../../../common/criteria/FilterOperator");
class TypeOrmCriteriaConverter {
    convert(criteria) {
        const options = {};
        if (criteria.hasOrder()) {
            options.order = {
                name: criteria.order.orderBy.value(),
                id: criteria.order.orderType.value(),
            };
        }
        if (criteria.hasPagination()) {
            options.skip = criteria.offset;
            options.take = criteria.limit;
        }
        if (criteria.hasFilters()) {
            options.where = {};
            for (const filter of criteria.filters.filters) {
                options.where[`AuthUser.${filter.field.value()}`] = this.buildWhereCondition(filter);
            }
        }
        return options;
    }
    buildWhereCondition(filter) {
        switch (filter.operator.value()) {
            case FilterOperator_1.Operator.EQUAL:
                return (0, typeorm_1.Raw)(() => `${filter.field.value()} = '${filter.value.toString()}%'`);
            case FilterOperator_1.Operator.NOT_EQUAL:
                return (0, typeorm_1.Not)((0, typeorm_1.Equal)(filter.value));
            case FilterOperator_1.Operator.GT:
                return (0, typeorm_1.MoreThan)(filter.value);
            case FilterOperator_1.Operator.GT_OR_EQUAL:
                return (0, typeorm_1.MoreThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LT:
                return (0, typeorm_1.LessThan)(filter.value);
            case FilterOperator_1.Operator.LT_OR_EQUAL:
                return (0, typeorm_1.LessThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LIKE:
                return (0, typeorm_1.Like)(filter.value);
            // case Operator.CONTAINS:
            //     return In<string>(filter.value);
            default:
                return filter.value;
        }
    }
}
exports.default = TypeOrmCriteriaConverter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9taWNyb2svcGVyc2lzdGVuY2UvaW5mcmFzdHJ1Y3R1cmUvdHlwZW9ybS9UeXBlT3JtQ3JpdGVyaWFDb252ZXJ0ZXIudHMiLCJtYXBwaW5ncyI6Ijs7QUFDQSxxQ0FBc0c7QUFHdEcsNEVBQW1FO0FBRW5FLE1BQXFCLHdCQUF3QjtJQUNsQyxPQUFPLENBQUMsUUFBa0I7UUFDN0IsTUFBTSxPQUFPLEdBQTZCLEVBQUUsQ0FBQztRQUU3QyxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNyQixPQUFPLENBQUMsS0FBSyxHQUFHO2dCQUNaLElBQUksRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ3BDLEVBQUUsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUU7YUFDdkMsQ0FBQztTQUNMO1FBRUQsSUFBSSxRQUFRLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDMUIsT0FBTyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQy9CLE9BQU8sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztTQUNqQztRQUVELElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ25CLEtBQUssTUFBTSxNQUFNLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBQzNDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEY7U0FDSjtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxNQUFjO1FBQ3RDLFFBQVEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUM3QixLQUFLLHlCQUFRLENBQUMsS0FBSztnQkFDZixPQUFPLElBQUEsYUFBRyxFQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoRixLQUFLLHlCQUFRLENBQUMsU0FBUztnQkFDbkIsT0FBTyxJQUFBLGFBQUcsRUFBQyxJQUFBLGVBQUssRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNwQyxLQUFLLHlCQUFRLENBQUMsRUFBRTtnQkFDWixPQUFPLElBQUEsa0JBQVEsRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsS0FBSyx5QkFBUSxDQUFDLFdBQVc7Z0JBQ3JCLE9BQU8sSUFBQSx5QkFBZSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QyxLQUFLLHlCQUFRLENBQUMsRUFBRTtnQkFDWixPQUFPLElBQUEsa0JBQVEsRUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsS0FBSyx5QkFBUSxDQUFDLFdBQVc7Z0JBQ3JCLE9BQU8sSUFBQSx5QkFBZSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QyxLQUFLLHlCQUFRLENBQUMsSUFBSTtnQkFDZCxPQUFPLElBQUEsY0FBSSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5QiwwQkFBMEI7WUFDMUIsdUNBQXVDO1lBQ3ZDO2dCQUNJLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQztTQUMzQjtJQUNMLENBQUM7Q0FDSjtBQWhERCwyQ0FnREMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9taWNyb2svcGVyc2lzdGVuY2UvaW5mcmFzdHJ1Y3R1cmUvdHlwZW9ybS9UeXBlT3JtQ3JpdGVyaWFDb252ZXJ0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmluZE1hbnlPcHRpb25zIH0gZnJvbSAndHlwZW9ybS9maW5kLW9wdGlvbnMvRmluZE1hbnlPcHRpb25zJztcbmltcG9ydCB7IEVxdWFsLCBMZXNzVGhhbiwgTGVzc1RoYW5PckVxdWFsLCBMaWtlLCBNb3JlVGhhbiwgTW9yZVRoYW5PckVxdWFsLCBOb3QsIFJhdyB9IGZyb20gJ3R5cGVvcm0nO1xuaW1wb3J0IHsgQ3JpdGVyaWEgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vY3JpdGVyaWEvQ3JpdGVyaWEnO1xuaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2NyaXRlcmlhL0ZpbHRlcic7XG5pbXBvcnQgeyBPcGVyYXRvciB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jcml0ZXJpYS9GaWx0ZXJPcGVyYXRvcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR5cGVPcm1Dcml0ZXJpYUNvbnZlcnRlciB7XG4gICAgcHVibGljIGNvbnZlcnQoY3JpdGVyaWE6IENyaXRlcmlhKTogRmluZE1hbnlPcHRpb25zPHVua25vd24+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9uczogRmluZE1hbnlPcHRpb25zPHVua25vd24+ID0ge307XG5cbiAgICAgICAgaWYgKGNyaXRlcmlhLmhhc09yZGVyKCkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMub3JkZXIgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogY3JpdGVyaWEub3JkZXIub3JkZXJCeS52YWx1ZSgpLFxuICAgICAgICAgICAgICAgIGlkOiBjcml0ZXJpYS5vcmRlci5vcmRlclR5cGUudmFsdWUoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JpdGVyaWEuaGFzUGFnaW5hdGlvbigpKSB7XG4gICAgICAgICAgICBvcHRpb25zLnNraXAgPSBjcml0ZXJpYS5vZmZzZXQ7XG4gICAgICAgICAgICBvcHRpb25zLnRha2UgPSBjcml0ZXJpYS5saW1pdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcml0ZXJpYS5oYXNGaWx0ZXJzKCkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMud2hlcmUgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmlsdGVyIG9mIGNyaXRlcmlhLmZpbHRlcnMuZmlsdGVycykge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMud2hlcmVbYEF1dGhVc2VyLiR7ZmlsdGVyLmZpZWxkLnZhbHVlKCl9YF0gPSB0aGlzLmJ1aWxkV2hlcmVDb25kaXRpb24oZmlsdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRXaGVyZUNvbmRpdGlvbihmaWx0ZXI6IEZpbHRlcik6IGFueSB7XG4gICAgICAgIHN3aXRjaCAoZmlsdGVyLm9wZXJhdG9yLnZhbHVlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJhdygoKSA9PiBgJHtmaWx0ZXIuZmllbGQudmFsdWUoKX0gPSAnJHtmaWx0ZXIudmFsdWUudG9TdHJpbmcoKX0lJ2ApO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5OT1RfRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5vdChFcXVhbChmaWx0ZXIudmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuR1Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1vcmVUaGFuKGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkdUX09SX0VRVUFMOlxuICAgICAgICAgICAgICAgIHJldHVybiBNb3JlVGhhbk9yRXF1YWwoZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuTFQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIExlc3NUaGFuKGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkxUX09SX0VRVUFMOlxuICAgICAgICAgICAgICAgIHJldHVybiBMZXNzVGhhbk9yRXF1YWwoZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuTElLRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gTGlrZShmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgLy8gY2FzZSBPcGVyYXRvci5DT05UQUlOUzpcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gSW48c3RyaW5nPihmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sInZlcnNpb24iOjN9