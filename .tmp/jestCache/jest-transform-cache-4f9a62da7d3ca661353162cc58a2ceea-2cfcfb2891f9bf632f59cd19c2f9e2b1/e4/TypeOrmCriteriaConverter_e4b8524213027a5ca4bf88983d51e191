48727121fbb7ddb5238ad04c68469d35
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typeorm_1 = require("typeorm");
const FilterOperator_1 = require("../../../common/criteria/FilterOperator");
class TypeOrmCriteriaConverter {
    convert(criteria) {
        const options = {};
        if (criteria.hasOrder()) {
            options.order = {
                name: criteria.order.orderBy.value(),
                id: criteria.order.orderType.value(),
            };
        }
        if (criteria.hasPagination()) {
            options.skip = criteria.offset;
            options.take = criteria.limit;
        }
        if (criteria.hasFilters()) {
            options.where = {};
            for (const filter of criteria.filters.filters) {
                options.where[filter.field.value()] = this.buildWhereCondition(filter);
            }
        }
        return options;
    }
    buildWhereCondition(filter) {
        switch (filter.operator.value()) {
            case FilterOperator_1.Operator.EQUAL:
                return (0, typeorm_1.Raw)(() => `AuthUser.${filter.field.value()} = '${filter.value.toString()}%'`);
            case FilterOperator_1.Operator.NOT_EQUAL:
                return (0, typeorm_1.Not)((0, typeorm_1.Equal)(filter.value));
            case FilterOperator_1.Operator.GT:
                return (0, typeorm_1.MoreThan)(filter.value);
            case FilterOperator_1.Operator.GT_OR_EQUAL:
                return (0, typeorm_1.MoreThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LT:
                return (0, typeorm_1.LessThan)(filter.value);
            case FilterOperator_1.Operator.LT_OR_EQUAL:
                return (0, typeorm_1.LessThanOrEqual)(filter.value);
            case FilterOperator_1.Operator.LIKE:
                return (0, typeorm_1.Like)(filter.value);
            // case Operator.CONTAINS:
            //     return In<string>(filter.value);
            default:
                return filter.value;
        }
    }
}
exports.default = TypeOrmCriteriaConverter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2N1YXRyb29jaGVudGEvTWFnaWNTaG9wcGVyL21hZ2ljc2hvcHBlci1ub2RlL3NyYy9taWNyb2svcGVyc2lzdGVuY2UvaW5mcmFzdHJ1Y3R1cmUvdHlwZW9ybS9UeXBlT3JtQ3JpdGVyaWFDb252ZXJ0ZXIudHMiLCJtYXBwaW5ncyI6Ijs7QUFDQSxxQ0FBc0c7QUFHdEcsNEVBQW1FO0FBRW5FLE1BQXFCLHdCQUF3QjtJQUNsQyxPQUFPLENBQUMsUUFBa0I7UUFDN0IsTUFBTSxPQUFPLEdBQTZCLEVBQUUsQ0FBQztRQUU3QyxJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNyQixPQUFPLENBQUMsS0FBSyxHQUFHO2dCQUNaLElBQUksRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ3BDLEVBQUUsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUU7YUFDdkMsQ0FBQztTQUNMO1FBRUQsSUFBSSxRQUFRLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDMUIsT0FBTyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQy9CLE9BQU8sQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztTQUNqQztRQUVELElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ25CLEtBQUssTUFBTSxNQUFNLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBQzNDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMxRTtTQUNKO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVPLG1CQUFtQixDQUFDLE1BQWM7UUFDdEMsUUFBUSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzdCLEtBQUsseUJBQVEsQ0FBQyxLQUFLO2dCQUNmLE9BQU8sSUFBQSxhQUFHLEVBQUMsR0FBRyxFQUFFLENBQUMsWUFBWSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3pGLEtBQUsseUJBQVEsQ0FBQyxTQUFTO2dCQUNuQixPQUFPLElBQUEsYUFBRyxFQUFDLElBQUEsZUFBSyxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLEtBQUsseUJBQVEsQ0FBQyxFQUFFO2dCQUNaLE9BQU8sSUFBQSxrQkFBUSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxLQUFLLHlCQUFRLENBQUMsV0FBVztnQkFDckIsT0FBTyxJQUFBLHlCQUFlLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pDLEtBQUsseUJBQVEsQ0FBQyxFQUFFO2dCQUNaLE9BQU8sSUFBQSxrQkFBUSxFQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsQyxLQUFLLHlCQUFRLENBQUMsV0FBVztnQkFDckIsT0FBTyxJQUFBLHlCQUFlLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pDLEtBQUsseUJBQVEsQ0FBQyxJQUFJO2dCQUNkLE9BQU8sSUFBQSxjQUFJLEVBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlCLDBCQUEwQjtZQUMxQix1Q0FBdUM7WUFDdkM7Z0JBQ0ksT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQzNCO0lBQ0wsQ0FBQztDQUNKO0FBaERELDJDQWdEQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvY3VhdHJvb2NoZW50YS9NYWdpY1Nob3BwZXIvbWFnaWNzaG9wcGVyLW5vZGUvc3JjL21pY3Jvay9wZXJzaXN0ZW5jZS9pbmZyYXN0cnVjdHVyZS90eXBlb3JtL1R5cGVPcm1Dcml0ZXJpYUNvbnZlcnRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaW5kTWFueU9wdGlvbnMgfSBmcm9tICd0eXBlb3JtL2ZpbmQtb3B0aW9ucy9GaW5kTWFueU9wdGlvbnMnO1xuaW1wb3J0IHsgRXF1YWwsIExlc3NUaGFuLCBMZXNzVGhhbk9yRXF1YWwsIExpa2UsIE1vcmVUaGFuLCBNb3JlVGhhbk9yRXF1YWwsIE5vdCwgUmF3IH0gZnJvbSAndHlwZW9ybSc7XG5pbXBvcnQgeyBDcml0ZXJpYSB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jcml0ZXJpYS9Dcml0ZXJpYSc7XG5pbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vY3JpdGVyaWEvRmlsdGVyJztcbmltcG9ydCB7IE9wZXJhdG9yIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2NyaXRlcmlhL0ZpbHRlck9wZXJhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHlwZU9ybUNyaXRlcmlhQ29udmVydGVyIHtcbiAgICBwdWJsaWMgY29udmVydChjcml0ZXJpYTogQ3JpdGVyaWEpOiBGaW5kTWFueU9wdGlvbnM8dW5rbm93bj4ge1xuICAgICAgICBjb25zdCBvcHRpb25zOiBGaW5kTWFueU9wdGlvbnM8dW5rbm93bj4gPSB7fTtcblxuICAgICAgICBpZiAoY3JpdGVyaWEuaGFzT3JkZXIoKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5vcmRlciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjcml0ZXJpYS5vcmRlci5vcmRlckJ5LnZhbHVlKCksXG4gICAgICAgICAgICAgICAgaWQ6IGNyaXRlcmlhLm9yZGVyLm9yZGVyVHlwZS52YWx1ZSgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcml0ZXJpYS5oYXNQYWdpbmF0aW9uKCkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2tpcCA9IGNyaXRlcmlhLm9mZnNldDtcbiAgICAgICAgICAgIG9wdGlvbnMudGFrZSA9IGNyaXRlcmlhLmxpbWl0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyaXRlcmlhLmhhc0ZpbHRlcnMoKSkge1xuICAgICAgICAgICAgb3B0aW9ucy53aGVyZSA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWx0ZXIgb2YgY3JpdGVyaWEuZmlsdGVycy5maWx0ZXJzKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy53aGVyZVtmaWx0ZXIuZmllbGQudmFsdWUoKV0gPSB0aGlzLmJ1aWxkV2hlcmVDb25kaXRpb24oZmlsdGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRXaGVyZUNvbmRpdGlvbihmaWx0ZXI6IEZpbHRlcik6IGFueSB7XG4gICAgICAgIHN3aXRjaCAoZmlsdGVyLm9wZXJhdG9yLnZhbHVlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJhdygoKSA9PiBgQXV0aFVzZXIuJHtmaWx0ZXIuZmllbGQudmFsdWUoKX0gPSAnJHtmaWx0ZXIudmFsdWUudG9TdHJpbmcoKX0lJ2ApO1xuICAgICAgICAgICAgY2FzZSBPcGVyYXRvci5OT1RfRVFVQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5vdChFcXVhbChmaWx0ZXIudmFsdWUpKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuR1Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1vcmVUaGFuKGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkdUX09SX0VRVUFMOlxuICAgICAgICAgICAgICAgIHJldHVybiBNb3JlVGhhbk9yRXF1YWwoZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuTFQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIExlc3NUaGFuKGZpbHRlci52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIE9wZXJhdG9yLkxUX09SX0VRVUFMOlxuICAgICAgICAgICAgICAgIHJldHVybiBMZXNzVGhhbk9yRXF1YWwoZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgT3BlcmF0b3IuTElLRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gTGlrZShmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgLy8gY2FzZSBPcGVyYXRvci5DT05UQUlOUzpcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gSW48c3RyaW5nPihmaWx0ZXIudmFsdWUpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sInZlcnNpb24iOjN9