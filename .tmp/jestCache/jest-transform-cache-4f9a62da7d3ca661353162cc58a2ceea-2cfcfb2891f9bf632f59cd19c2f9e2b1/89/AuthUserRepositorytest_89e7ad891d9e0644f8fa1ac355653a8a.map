{"file":"/Users/cuatroochenta/MagicShopper/magicshopper-node/tests/modules/auth/infrastructure/persistence/AuthUserRepository.test.ts","mappings":";;;;;;;;;;;;;;AAQA,iFAAyD;AAEzD,iFAAyD;AAEzD,MAAM,UAAU,GAAuB,mBAAS,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;AACvF,MAAM,mBAAmB,GAAwB,mBAAS,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;AAE3F,UAAU,CAAC,GAAS,EAAE;IAClB,MAAM,CAAC,MAAM,mBAAmB,CAAC,CAAC,OAAO,EAAE,CAAC;AAChD,CAAC,CAAA,CAAC,CAAC;AAEH,QAAQ,CAAC,GAAS,EAAE;IAChB,MAAM,CAAC,MAAM,mBAAmB,CAAC,CAAC,OAAO,EAAE,CAAC;IAC5C,MAAM,CAAC,MAAM,mBAAmB,CAAC,CAAC,KAAK,EAAE,CAAC;AAC9C,CAAC,CAAA,CAAC,CAAC;AAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAChC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACnB,EAAE,CAAC,0CAA0C,EAAE,GAAS,EAAE;YACtD,MAAM,QAAQ,GAAG,wBAAc,CAAC,MAAM,EAAE,CAAC;YAEzC,MAAM,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChC,MAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAE9D,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QAC9C,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,2BAA2B,EAAE,GAAS,EAAE;YACvC,MAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,YAAY,EAAE,CAAC;QAC7D,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IACH,2CAA2C;IAC3C,yEAAyE;IACzE,oDAAoD;IACpD,2CAA2C;IAC3C,EAAE;IACF,yCAAyC;IACzC,uCAAuC;IACvC,4CAA4C;IAC5C,0CAA0C;IAC1C,8DAA8D;IAC9D,mBAAmB;IACnB,4BAA4B;IAC5B,YAAY;IACZ,gFAAgF;IAChF,EAAE;IACF,qDAAqD;IACrD,UAAU;IACV,MAAM;AACV,CAAC,CAAC,CAAC","names":[],"sources":["/Users/cuatroochenta/MagicShopper/magicshopper-node/tests/modules/auth/infrastructure/persistence/AuthUserRepository.test.ts"],"sourcesContent":["import { Criteria } from '@microk/common/criteria/Criteria';\nimport { Filter } from '@microk/common/criteria/Filter';\nimport { FilterField } from '@microk/common/criteria/FilterField';\nimport { FilterOperator } from '@microk/common/criteria/FilterOperator';\nimport { Filters } from '@microk/common/criteria/Filters';\nimport { FilterValue } from '@microk/common/criteria/FilterValue';\nimport { Order } from '@microk/common/criteria/Order';\nimport { EnvironmentArranger } from '@microk/tests/domain/EnvironmentArranger';\nimport Container from '../../../../../src/app/Container';\nimport { AuthUserRepository } from '../../../../../src/modules/auth/domain/AuthUserRepository';\nimport AuthUserMother from '../../domain/AuthUserMother';\n\nconst repository: AuthUserRepository = Container.get('Auth.domain.AuthUserRepository');\nconst environmentArranger: EnvironmentArranger = Container.get('Test.EnvironmentArranger');\n\nbeforeEach(async () => {\n    await (await environmentArranger).arrange();\n});\n\nafterAll(async () => {\n    await (await environmentArranger).arrange();\n    await (await environmentArranger).close();\n});\n\ndescribe('AuthUserRepository', () => {\n    describe('#save', () => {\n        it('should save a auth user and search by id', async () => {\n            const authUser = AuthUserMother.random();\n\n            await repository.save(authUser);\n            const authUserResponse = await repository.search(authUser.id);\n\n            expect(authUserResponse).toEqual(authUser)\n        });\n    });\n\n    describe('#customSearch', () => {\n        it('should do a custom search', async () => {\n            const authUserResponse = await repository.customSearch();\n        });\n    });\n    // describe('#searchOneByCriteria', () => {\n    //     it('should save a auth user and search by criteria', async () => {\n    //         const authUser = AuthUserMother.random();\n    //         await repository.save(authUser);\n    //\n    //         const criteria = new Criteria(\n    //             new Filters([new Filter(\n    //                 new FilterField('email'),\n    //                 FilterOperator.equal(),\n    //                 new FilterValue(authUser.email.toString()),\n    //             )]),\n    //             Order.none(),\n    //         )\n    //         const authUserResponse = await repository.searchByCriteria(criteria);\n    //\n    //         expect(authUserResponse).toEqual(authUser)\n    //     });\n    // });\n});\n"],"version":3}